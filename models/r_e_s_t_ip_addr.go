// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTIPAddr r e s t IP addr
//
// swagger:model RESTIPAddr
type RESTIPAddr struct {

	// gateway
	// Required: true
	Gateway *string `json:"gateway"`

	// ip
	// Example: 192.168.209.197
	// Required: true
	IP *string `json:"ip"`

	// ip prefix
	// Example: 32
	// Required: true
	IPPrefix *int64 `json:"ip_prefix"`
}

// Validate validates this r e s t IP addr
func (m *RESTIPAddr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPPrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTIPAddr) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *RESTIPAddr) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *RESTIPAddr) validateIPPrefix(formats strfmt.Registry) error {

	if err := validate.Required("ip_prefix", "body", m.IPPrefix); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t IP addr based on context it is used
func (m *RESTIPAddr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTIPAddr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTIPAddr) UnmarshalBinary(b []byte) error {
	var res RESTIPAddr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
