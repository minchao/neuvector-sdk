// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTComplianceData r e s t compliance data
//
// swagger:model RESTComplianceData
type RESTComplianceData struct {

	// docker cis version
	// Example: 1.2.0
	// Required: true
	DockerCisVersion *string `json:"docker_cis_version"`

	// items
	// Required: true
	Items []*RESTBenchItem `json:"items"`

	// kubernetes cis category
	// Required: true
	KubernetesCisCategory *string `json:"kubernetes_cis_category"`

	// kubernetes cis version
	// Example: 1.5.1
	// Required: true
	KubernetesCisVersion *string `json:"kubernetes_cis_version"`

	// run at
	// Example: 2018-06-21T19:00:53Z
	// Required: true
	// Format: date-time
	RunAt *strfmt.DateTime `json:"run_at"`

	// run timestamp
	// Example: 1516561253
	// Required: true
	RunTimestamp *int64 `json:"run_timestamp"`
}

// Validate validates this r e s t compliance data
func (m *RESTComplianceData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDockerCisVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesCisCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesCisVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTComplianceData) validateDockerCisVersion(formats strfmt.Registry) error {

	if err := validate.Required("docker_cis_version", "body", m.DockerCisVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTComplianceData) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTComplianceData) validateKubernetesCisCategory(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_cis_category", "body", m.KubernetesCisCategory); err != nil {
		return err
	}

	return nil
}

func (m *RESTComplianceData) validateKubernetesCisVersion(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_cis_version", "body", m.KubernetesCisVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTComplianceData) validateRunAt(formats strfmt.Registry) error {

	if err := validate.Required("run_at", "body", m.RunAt); err != nil {
		return err
	}

	if err := validate.FormatOf("run_at", "body", "date-time", m.RunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTComplianceData) validateRunTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("run_timestamp", "body", m.RunTimestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t compliance data based on the context it is used
func (m *RESTComplianceData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTComplianceData) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTComplianceData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTComplianceData) UnmarshalBinary(b []byte) error {
	var res RESTComplianceData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
