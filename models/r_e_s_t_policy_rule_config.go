// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTPolicyRuleConfig r e s t policy rule config
//
// swagger:model RESTPolicyRuleConfig
type RESTPolicyRuleConfig struct {

	// action
	// Example: deny
	Action string `json:"action,omitempty"`

	// applications
	// Example: ["HTTP","SSH"]
	Applications []string `json:"applications"`

	// cfg type
	// Required: true
	// Enum: [learned user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// comment
	// Example: a deny rule
	Comment string `json:"comment,omitempty"`

	// disable
	// Example: true
	Disable bool `json:"disable,omitempty"`

	// from
	// Example: nv.iperfclient
	From string `json:"from,omitempty"`

	// id
	// Example: 10001
	// Required: true
	ID *uint32 `json:"id"`

	// ports
	// Example: any
	Ports string `json:"ports,omitempty"`

	// priority
	// Example: 0
	Priority uint32 `json:"priority,omitempty"`

	// to
	// Example: external
	To string `json:"to,omitempty"`
}

// Validate validates this r e s t policy rule config
func (m *RESTPolicyRuleConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rESTPolicyRuleConfigTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["learned","user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTPolicyRuleConfigTypeCfgTypePropEnum = append(rESTPolicyRuleConfigTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTPolicyRuleConfigCfgTypeLearned captures enum value "learned"
	RESTPolicyRuleConfigCfgTypeLearned string = "learned"

	// RESTPolicyRuleConfigCfgTypeUserCreated captures enum value "user_created"
	RESTPolicyRuleConfigCfgTypeUserCreated string = "user_created"

	// RESTPolicyRuleConfigCfgTypeGround captures enum value "ground"
	RESTPolicyRuleConfigCfgTypeGround string = "ground"

	// RESTPolicyRuleConfigCfgTypeFederal captures enum value "federal"
	RESTPolicyRuleConfigCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTPolicyRuleConfig) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTPolicyRuleConfigTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTPolicyRuleConfig) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRuleConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t policy rule config based on context it is used
func (m *RESTPolicyRuleConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTPolicyRuleConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTPolicyRuleConfig) UnmarshalBinary(b []byte) error {
	var res RESTPolicyRuleConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
