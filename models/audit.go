// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Audit audit
//
// swagger:model Audit
type Audit struct {

	// aggregation from
	// Example: 1516832670
	// Required: true
	AggregationFrom *int64 `json:"aggregation_from"`

	// base os
	// Example: ubuntu:16.04
	// Required: true
	BaseOs *string `json:"base_os"`

	// cluster name
	// Example: cluster1
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// count
	// Example: 10
	// Required: true
	Count *int64 `json:"count"`

	// cvedb version
	// Example: 1.011
	// Required: true
	CvedbVersion *string `json:"cvedb_version"`

	// enforcer id
	// Example: bced57295eefbd3f3bd0cf798b6184fa789
	// Required: true
	EnforcerID *string `json:"enforcer_id"`

	// enforcer name
	// Example: allinone
	// Required: true
	EnforcerName *string `json:"enforcer_name"`

	// error
	// Example: Request failed
	// Required: true
	Error *string `json:"error"`

	// high vul cnt
	// Example: 1
	// Required: true
	HighVulCnt *int64 `json:"high_vul_cnt"`

	// high vuls
	HighVuls []string `json:"high_vuls"`

	// host id
	// Example: 2AU7:TIEN:O5KX:QK56:LFQP:IJSV:FXBN:QJV7
	// Required: true
	HostID *string `json:"host_id"`

	// host name
	// Example: ubuntu64
	// Required: true
	HostName *string `json:"host_name"`

	// image id
	// Example: d572b7ee3511b21a2b78b8915bc03c5786ad01949704c1418624224c4cae2c5f
	ImageID string `json:"image_id,omitempty"`

	// items
	Items []string `json:"items"`

	// level
	// Example: INFO
	// Required: true
	Level *string `json:"level"`

	// medium vul cnt
	// Example: 1
	// Required: true
	MediumVulCnt *int64 `json:"medium_vul_cnt"`

	// medium vuls
	MediumVuls []string `json:"medium_vuls"`

	// message
	// Required: true
	Message *string `json:"message"`

	// name
	// Example: Container.Managed
	Name string `json:"name,omitempty"`

	// packages
	Packages []string `json:"packages"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// platform version
	// Required: true
	PlatformVersion *string `json:"platform_version"`

	// registry
	// Example: https://registry.hub.docker.com/
	Registry string `json:"registry,omitempty"`

	// registry name
	RegistryName string `json:"registry_name,omitempty"`

	// reported at
	// Example: 2018-01-24T22:24:30Z
	// Required: true
	// Format: date-time
	ReportedAt *strfmt.DateTime `json:"reported_at"`

	// reported timestamp
	// Example: 1516832670
	// Required: true
	ReportedTimestamp *int64 `json:"reported_timestamp"`

	// repository
	// Example: alpine
	Repository string `json:"repository,omitempty"`

	// response rule id
	// Example: 10007
	ResponseRuleID int64 `json:"response_rule_id,omitempty"`

	// tag
	// Example: latest
	Tag string `json:"tag,omitempty"`

	// user
	// Example: root
	// Required: true
	User *string `json:"user"`

	// workload domain
	WorkloadDomain string `json:"workload_domain,omitempty"`

	// workload id
	// Example: 7df6a19648e2860c89fe12c8d5b1c52079a
	WorkloadID string `json:"workload_id,omitempty"`

	// workload image
	WorkloadImage string `json:"workload_image,omitempty"`

	// workload name
	WorkloadName string `json:"workload_name,omitempty"`

	// workload service
	WorkloadService string `json:"workload_service,omitempty"`
}

// Validate validates this audit
func (m *Audit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighVulCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediumVulCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Audit) validateAggregationFrom(formats strfmt.Registry) error {

	if err := validate.Required("aggregation_from", "body", m.AggregationFrom); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateCvedbVersion(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_version", "body", m.CvedbVersion); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateEnforcerID(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_id", "body", m.EnforcerID); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateEnforcerName(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_name", "body", m.EnforcerName); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateHighVulCnt(formats strfmt.Registry) error {

	if err := validate.Required("high_vul_cnt", "body", m.HighVulCnt); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateMediumVulCnt(formats strfmt.Registry) error {

	if err := validate.Required("medium_vul_cnt", "body", m.MediumVulCnt); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validatePlatformVersion(formats strfmt.Registry) error {

	if err := validate.Required("platform_version", "body", m.PlatformVersion); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateReportedAt(formats strfmt.Registry) error {

	if err := validate.Required("reported_at", "body", m.ReportedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("reported_at", "body", "date-time", m.ReportedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateReportedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("reported_timestamp", "body", m.ReportedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Audit) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit based on context it is used
func (m *Audit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Audit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Audit) UnmarshalBinary(b []byte) error {
	var res Audit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
