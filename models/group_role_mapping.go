// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupRoleMapping group role mapping
//
// swagger:model GroupRoleMapping
type GroupRoleMapping struct {

	// global role
	// Example: admin
	// Required: true
	GlobalRole *string `json:"global_role"`

	// group
	// Example: Domain Admins
	// Required: true
	Group *string `json:"group"`

	// role domains
	RoleDomains *GroupRoleMappingRoleDomains `json:"role_domains,omitempty"`
}

// Validate validates this group role mapping
func (m *GroupRoleMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupRoleMapping) validateGlobalRole(formats strfmt.Registry) error {

	if err := validate.Required("global_role", "body", m.GlobalRole); err != nil {
		return err
	}

	return nil
}

func (m *GroupRoleMapping) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *GroupRoleMapping) validateRoleDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleDomains) { // not required
		return nil
	}

	if m.RoleDomains != nil {
		if err := m.RoleDomains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this group role mapping based on the context it is used
func (m *GroupRoleMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupRoleMapping) contextValidateRoleDomains(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleDomains != nil {

		if swag.IsZero(m.RoleDomains) { // not required
			return nil
		}

		if err := m.RoleDomains.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupRoleMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupRoleMapping) UnmarshalBinary(b []byte) error {
	var res GroupRoleMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupRoleMappingRoleDomains group role mapping role domains
//
// swagger:model GroupRoleMappingRoleDomains
type GroupRoleMappingRoleDomains struct {

	// domains
	// Example: ["domain1","domain2"]
	Domains []string `json:"domains"`

	// role
	// Example: admin
	Role string `json:"role,omitempty"`
}

// Validate validates this group role mapping role domains
func (m *GroupRoleMappingRoleDomains) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group role mapping role domains based on context it is used
func (m *GroupRoleMappingRoleDomains) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupRoleMappingRoleDomains) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupRoleMappingRoleDomains) UnmarshalBinary(b []byte) error {
	var res GroupRoleMappingRoleDomains
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
