// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTMetry r e s t metry
//
// swagger:model RESTMetry
type RESTMetry struct {

	// byte in
	// Example: 0
	// Required: true
	ByteIn *uint64 `json:"byte_in"`

	// byte out
	// Example: 0
	// Required: true
	ByteOut *uint64 `json:"byte_out"`

	// cpu
	// Example: 1
	// Required: true
	CPU *float64 `json:"cpu"`

	// cur session in
	// Example: 1
	CurSessionIn uint32 `json:"cur_session_in,omitempty"`

	// cur session out
	// Example: 1
	CurSessionOut uint32 `json:"cur_session_out,omitempty"`

	// memory
	// Example: 2089816064
	// Required: true
	Memory *uint64 `json:"memory"`

	// packet in
	// Example: 0
	// Required: true
	PacketIn *uint64 `json:"packet_in"`

	// packet out
	// Example: 0
	// Required: true
	PacketOut *uint64 `json:"packet_out"`

	// session in
	// Example: 0
	// Required: true
	SessionIn *uint32 `json:"session_in"`

	// session out
	// Example: 0
	// Required: true
	SessionOut *uint32 `json:"session_out"`
}

// Validate validates this r e s t metry
func (m *RESTMetry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByteIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByteOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacketIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacketOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionOut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTMetry) validateByteIn(formats strfmt.Registry) error {

	if err := validate.Required("byte_in", "body", m.ByteIn); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validateByteOut(formats strfmt.Registry) error {

	if err := validate.Required("byte_out", "body", m.ByteOut); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validatePacketIn(formats strfmt.Registry) error {

	if err := validate.Required("packet_in", "body", m.PacketIn); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validatePacketOut(formats strfmt.Registry) error {

	if err := validate.Required("packet_out", "body", m.PacketOut); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validateSessionIn(formats strfmt.Registry) error {

	if err := validate.Required("session_in", "body", m.SessionIn); err != nil {
		return err
	}

	return nil
}

func (m *RESTMetry) validateSessionOut(formats strfmt.Registry) error {

	if err := validate.Required("session_out", "body", m.SessionOut); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t metry based on context it is used
func (m *RESTMetry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTMetry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTMetry) UnmarshalBinary(b []byte) error {
	var res RESTMetry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
