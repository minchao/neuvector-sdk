// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmissionRule r e s t admission rule
//
// swagger:model RESTAdmissionRule
type RESTAdmissionRule struct {

	// category
	// Example: Kubernetes
	// Required: true
	Category *string `json:"category"`

	// cfg type
	// Required: true
	// Enum: [user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// comment
	// Example: Do not delete this exception rule
	// Required: true
	Comment *string `json:"comment"`

	// criteria
	// Required: true
	Criteria []*RESTAdmRuleCriterion `json:"criteria"`

	// critical
	// Example: false
	// Required: true
	Critical *bool `json:"critical"`

	// disable
	// Example: false
	// Required: true
	Disable *bool `json:"disable"`

	// id
	// Example: 2
	// Required: true
	ID *uint32 `json:"id"`

	// rule mode
	// Required: true
	// Enum: [ monitor protect]
	RuleMode *string `json:"rule_mode"`

	// rule type
	// Required: true
	// Enum: [exception deny]
	RuleType *string `json:"rule_type"`
}

// Validate validates this r e s t admission rule
func (m *RESTAdmissionRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRule) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleTypeCfgTypePropEnum = append(rESTAdmissionRuleTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleCfgTypeUserCreated captures enum value "user_created"
	RESTAdmissionRuleCfgTypeUserCreated string = "user_created"

	// RESTAdmissionRuleCfgTypeGround captures enum value "ground"
	RESTAdmissionRuleCfgTypeGround string = "ground"

	// RESTAdmissionRuleCfgTypeFederal captures enum value "federal"
	RESTAdmissionRuleCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTAdmissionRule) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRule) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRule) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRule) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTAdmissionRule) validateCritical(formats strfmt.Registry) error {

	if err := validate.Required("critical", "body", m.Critical); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRule) validateDisable(formats strfmt.Registry) error {

	if err := validate.Required("disable", "body", m.Disable); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleTypeRuleModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","monitor","protect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleTypeRuleModePropEnum = append(rESTAdmissionRuleTypeRuleModePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleRuleModeEmpty captures enum value ""
	RESTAdmissionRuleRuleModeEmpty string = ""

	// RESTAdmissionRuleRuleModeMonitor captures enum value "monitor"
	RESTAdmissionRuleRuleModeMonitor string = "monitor"

	// RESTAdmissionRuleRuleModeProtect captures enum value "protect"
	RESTAdmissionRuleRuleModeProtect string = "protect"
)

// prop value enum
func (m *RESTAdmissionRule) validateRuleModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleTypeRuleModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRule) validateRuleMode(formats strfmt.Registry) error {

	if err := validate.Required("rule_mode", "body", m.RuleMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateRuleModeEnum("rule_mode", "body", *m.RuleMode); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleTypeRuleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["exception","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleTypeRuleTypePropEnum = append(rESTAdmissionRuleTypeRuleTypePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleRuleTypeException captures enum value "exception"
	RESTAdmissionRuleRuleTypeException string = "exception"

	// RESTAdmissionRuleRuleTypeDeny captures enum value "deny"
	RESTAdmissionRuleRuleTypeDeny string = "deny"
)

// prop value enum
func (m *RESTAdmissionRule) validateRuleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleTypeRuleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRule) validateRuleType(formats strfmt.Registry) error {

	if err := validate.Required("rule_type", "body", m.RuleType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRuleTypeEnum("rule_type", "body", *m.RuleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t admission rule based on the context it is used
func (m *RESTAdmissionRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRule) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmissionRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmissionRule) UnmarshalBinary(b []byte) error {
	var res RESTAdmissionRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
