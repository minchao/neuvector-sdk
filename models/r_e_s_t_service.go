// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTService r e s t service
//
// swagger:model RESTService
type RESTService struct {

	// baseline profile
	// Required: true
	BaselineProfile *string `json:"baseline_profile"`

	// cap change mode
	// Example: false
	CapChangeMode bool `json:"cap_change_mode,omitempty"`

	// cap scorable
	// Example: false
	CapScorable bool `json:"cap_scorable,omitempty"`

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// egress exposure
	// Example: false
	// Required: true
	EgressExposure *bool `json:"egress_exposure"`

	// ingress exposure
	// Example: true
	// Required: true
	IngressExposure *bool `json:"ingress_exposure"`

	// members
	// Required: true
	Members []*RESTWorkloadBrief `json:"members"`

	// name
	// Example: iperfc
	// Required: true
	Name *string `json:"name"`

	// not scored
	// Example: false
	// Required: true
	NotScored *bool `json:"not_scored"`

	// platform role
	// Example: core
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// policy mode
	// Example: Learn
	// Required: true
	PolicyMode *string `json:"policy_mode"`

	// policy rules
	// Required: true
	PolicyRules []*RESTPolicyRule `json:"policy_rules"`

	// profile mode
	// Example: Learn
	// Required: true
	ProfileMode *string `json:"profile_mode"`

	// response rules
	// Required: true
	ResponseRules []*RESTResponseRule `json:"response_rules"`

	// service addr
	ServiceAddr *RESTIPPort `json:"service_addr,omitempty"`
}

// Validate validates this r e s t service
func (m *RESTService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaselineProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressExposure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressExposure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotScored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAddr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTService) validateBaselineProfile(formats strfmt.Registry) error {

	if err := validate.Required("baseline_profile", "body", m.BaselineProfile); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateEgressExposure(formats strfmt.Registry) error {

	if err := validate.Required("egress_exposure", "body", m.EgressExposure); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateIngressExposure(formats strfmt.Registry) error {

	if err := validate.Required("ingress_exposure", "body", m.IngressExposure); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateNotScored(formats strfmt.Registry) error {

	if err := validate.Required("not_scored", "body", m.NotScored); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validatePolicyMode(formats strfmt.Registry) error {

	if err := validate.Required("policy_mode", "body", m.PolicyMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validatePolicyRules(formats strfmt.Registry) error {

	if err := validate.Required("policy_rules", "body", m.PolicyRules); err != nil {
		return err
	}

	for i := 0; i < len(m.PolicyRules); i++ {
		if swag.IsZero(m.PolicyRules[i]) { // not required
			continue
		}

		if m.PolicyRules[i] != nil {
			if err := m.PolicyRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) validateProfileMode(formats strfmt.Registry) error {

	if err := validate.Required("profile_mode", "body", m.ProfileMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTService) validateResponseRules(formats strfmt.Registry) error {

	if err := validate.Required("response_rules", "body", m.ResponseRules); err != nil {
		return err
	}

	for i := 0; i < len(m.ResponseRules); i++ {
		if swag.IsZero(m.ResponseRules[i]) { // not required
			continue
		}

		if m.ResponseRules[i] != nil {
			if err := m.ResponseRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) validateServiceAddr(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceAddr) { // not required
		return nil
	}

	if m.ServiceAddr != nil {
		if err := m.ServiceAddr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_addr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_addr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t service based on the context it is used
func (m *RESTService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceAddr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTService) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {

			if swag.IsZero(m.Members[i]) { // not required
				return nil
			}

			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) contextValidatePolicyRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyRules); i++ {

		if m.PolicyRules[i] != nil {

			if swag.IsZero(m.PolicyRules[i]) { // not required
				return nil
			}

			if err := m.PolicyRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) contextValidateResponseRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResponseRules); i++ {

		if m.ResponseRules[i] != nil {

			if swag.IsZero(m.ResponseRules[i]) { // not required
				return nil
			}

			if err := m.ResponseRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTService) contextValidateServiceAddr(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceAddr != nil {

		if swag.IsZero(m.ServiceAddr) { // not required
			return nil
		}

		if err := m.ServiceAddr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_addr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_addr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTService) UnmarshalBinary(b []byte) error {
	var res RESTService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
