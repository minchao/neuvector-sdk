// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmissionRuleConfig r e s t admission rule config
//
// swagger:model RESTAdmissionRuleConfig
type RESTAdmissionRuleConfig struct {

	// actions
	Actions []string `json:"actions"`

	// category
	// Example: Kubernetes
	// Required: true
	Category *string `json:"category"`

	// cfg type
	// Required: true
	// Enum: [user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// comment
	// Example: comment
	Comment string `json:"comment,omitempty"`

	// criteria
	Criteria []*RESTAdmRuleCriterion `json:"criteria"`

	// disable
	// Example: true
	Disable bool `json:"disable,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *uint32 `json:"id"`

	// rule mode
	// Enum: [ monitor protect]
	RuleMode string `json:"rule_mode,omitempty"`

	// rule type
	// Required: true
	// Enum: [exception deny]
	RuleType *string `json:"rule_type"`
}

// Validate validates this r e s t admission rule config
func (m *RESTAdmissionRuleConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleConfig) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleConfigTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleConfigTypeCfgTypePropEnum = append(rESTAdmissionRuleConfigTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleConfigCfgTypeUserCreated captures enum value "user_created"
	RESTAdmissionRuleConfigCfgTypeUserCreated string = "user_created"

	// RESTAdmissionRuleConfigCfgTypeGround captures enum value "ground"
	RESTAdmissionRuleConfigCfgTypeGround string = "ground"

	// RESTAdmissionRuleConfigCfgTypeFederal captures enum value "federal"
	RESTAdmissionRuleConfigCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTAdmissionRuleConfig) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleConfigTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRuleConfig) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRuleConfig) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTAdmissionRuleConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleConfigTypeRuleModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","monitor","protect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleConfigTypeRuleModePropEnum = append(rESTAdmissionRuleConfigTypeRuleModePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleConfigRuleModeEmpty captures enum value ""
	RESTAdmissionRuleConfigRuleModeEmpty string = ""

	// RESTAdmissionRuleConfigRuleModeMonitor captures enum value "monitor"
	RESTAdmissionRuleConfigRuleModeMonitor string = "monitor"

	// RESTAdmissionRuleConfigRuleModeProtect captures enum value "protect"
	RESTAdmissionRuleConfigRuleModeProtect string = "protect"
)

// prop value enum
func (m *RESTAdmissionRuleConfig) validateRuleModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleConfigTypeRuleModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRuleConfig) validateRuleMode(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuleModeEnum("rule_mode", "body", m.RuleMode); err != nil {
		return err
	}

	return nil
}

var rESTAdmissionRuleConfigTypeRuleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["exception","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTAdmissionRuleConfigTypeRuleTypePropEnum = append(rESTAdmissionRuleConfigTypeRuleTypePropEnum, v)
	}
}

const (

	// RESTAdmissionRuleConfigRuleTypeException captures enum value "exception"
	RESTAdmissionRuleConfigRuleTypeException string = "exception"

	// RESTAdmissionRuleConfigRuleTypeDeny captures enum value "deny"
	RESTAdmissionRuleConfigRuleTypeDeny string = "deny"
)

// prop value enum
func (m *RESTAdmissionRuleConfig) validateRuleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTAdmissionRuleConfigTypeRuleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTAdmissionRuleConfig) validateRuleType(formats strfmt.Registry) error {

	if err := validate.Required("rule_type", "body", m.RuleType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRuleTypeEnum("rule_type", "body", *m.RuleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t admission rule config based on the context it is used
func (m *RESTAdmissionRuleConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleConfig) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmissionRuleConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmissionRuleConfig) UnmarshalBinary(b []byte) error {
	var res RESTAdmissionRuleConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
