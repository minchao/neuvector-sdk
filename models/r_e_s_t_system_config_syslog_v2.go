// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemConfigSyslogV2 r e s t system config syslog v2
//
// swagger:model RESTSystemConfigSyslogV2
type RESTSystemConfigSyslogV2 struct {

	// single cve per syslog
	// Example: false
	// Required: true
	SingleCvePerSyslog *bool `json:"single_cve_per_syslog"`

	// syslog categories
	// Example: ["event","violation","threat","incident"]
	// Required: true
	SyslogCategories []string `json:"syslog_categories"`

	// syslog cve in layers
	// Example: false
	// Required: true
	SyslogCveInLayers *bool `json:"syslog_cve_in_layers"`

	// syslog in json
	// Example: true
	// Required: true
	SyslogInJSON *bool `json:"syslog_in_json"`

	// syslog ip
	// Example: 10.1.0.14
	// Required: true
	SyslogIP *string `json:"syslog_ip"`

	// syslog ip proto
	// Example: 6
	// Required: true
	SyslogIPProto *uint8 `json:"syslog_ip_proto"`

	// syslog level
	// Example: INFO
	// Required: true
	SyslogLevel *string `json:"syslog_level"`

	// syslog port
	// Example: 514
	// Required: true
	SyslogPort *uint16 `json:"syslog_port"`

	// syslog server cert
	// Required: true
	SyslogServerCert *string `json:"syslog_server_cert"`

	// syslog status
	// Example: false
	// Required: true
	SyslogStatus *bool `json:"syslog_status"`
}

// Validate validates this r e s t system config syslog v2
func (m *RESTSystemConfigSyslogV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSingleCvePerSyslog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogCveInLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogInJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogIPProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogServerCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSingleCvePerSyslog(formats strfmt.Registry) error {

	if err := validate.Required("single_cve_per_syslog", "body", m.SingleCvePerSyslog); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogCategories(formats strfmt.Registry) error {

	if err := validate.Required("syslog_categories", "body", m.SyslogCategories); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogCveInLayers(formats strfmt.Registry) error {

	if err := validate.Required("syslog_cve_in_layers", "body", m.SyslogCveInLayers); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogInJSON(formats strfmt.Registry) error {

	if err := validate.Required("syslog_in_json", "body", m.SyslogInJSON); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogIP(formats strfmt.Registry) error {

	if err := validate.Required("syslog_ip", "body", m.SyslogIP); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogIPProto(formats strfmt.Registry) error {

	if err := validate.Required("syslog_ip_proto", "body", m.SyslogIPProto); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogLevel(formats strfmt.Registry) error {

	if err := validate.Required("syslog_level", "body", m.SyslogLevel); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogPort(formats strfmt.Registry) error {

	if err := validate.Required("syslog_port", "body", m.SyslogPort); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogServerCert(formats strfmt.Registry) error {

	if err := validate.Required("syslog_server_cert", "body", m.SyslogServerCert); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigSyslogV2) validateSyslogStatus(formats strfmt.Registry) error {

	if err := validate.Required("syslog_status", "body", m.SyslogStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t system config syslog v2 based on context it is used
func (m *RESTSystemConfigSyslogV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigSyslogV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigSyslogV2) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigSyslogV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
