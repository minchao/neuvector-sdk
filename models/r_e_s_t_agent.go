// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAgent r e s t agent
//
// swagger:model RESTAgent
type RESTAgent struct {

	// cluster ip
	// Example: 10.1.5.1
	// Required: true
	ClusterIP *string `json:"cluster_ip"`

	// connection state
	// Example: connected
	// Required: true
	ConnectionState *string `json:"connection_state"`

	// cpus
	// Required: true
	Cpus *string `json:"cpus"`

	// created at
	// Example: 2018-01-23T21:14:31Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// disconnected at
	// Required: true
	DisconnectedAt *string `json:"disconnected_at"`

	// display name
	// Example: allinone
	// Required: true
	DisplayName *string `json:"display_name"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// host id
	// Example: 2AU7:TIEN:O5KX:QK56:LFQP:IJSV:FXBN:QJV7
	// Required: true
	HostID *string `json:"host_id"`

	// host name
	// Example: ubuntu64
	// Required: true
	HostName *string `json:"host_name"`

	// id
	// Example: 924ccbbfcac6842e7370305bc51f4594764314f6
	// Required: true
	ID *string `json:"id"`

	// joined at
	// Example: 2018-01-23T21:14:55Z
	// Required: true
	// Format: date-time
	JoinedAt *strfmt.DateTime `json:"joined_at"`

	// map key is string type
	// Example: {"com.docker.compose.service":"allinone"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// memory limit
	// Example: 0
	// Required: true
	MemoryLimit *int64 `json:"memory_limit"`

	// name
	// Example: allinone
	// Required: true
	Name *string `json:"name"`

	// network mode
	// Example: host
	// Required: true
	NetworkMode *string `json:"network_mode"`

	// pid mode
	// Required: true
	PidMode *string `json:"pid_mode"`

	// started at
	// Example: 2018-01-23T21:14:31Z
	// Required: true
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at"`

	// version
	// Example: 0.1.0
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this r e s t agent
func (m *RESTAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePidMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAgent) validateClusterIP(formats strfmt.Registry) error {

	if err := validate.Required("cluster_ip", "body", m.ClusterIP); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateConnectionState(formats strfmt.Registry) error {

	if err := validate.Required("connection_state", "body", m.ConnectionState); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateCpus(formats strfmt.Registry) error {

	if err := validate.Required("cpus", "body", m.Cpus); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateDisconnectedAt(formats strfmt.Registry) error {

	if err := validate.Required("disconnected_at", "body", m.DisconnectedAt); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateJoinedAt(formats strfmt.Registry) error {

	if err := validate.Required("joined_at", "body", m.JoinedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("joined_at", "body", "date-time", m.JoinedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateMemoryLimit(formats strfmt.Registry) error {

	if err := validate.Required("memory_limit", "body", m.MemoryLimit); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateNetworkMode(formats strfmt.Registry) error {

	if err := validate.Required("network_mode", "body", m.NetworkMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validatePidMode(formats strfmt.Registry) error {

	if err := validate.Required("pid_mode", "body", m.PidMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("started_at", "body", m.StartedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTAgent) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t agent based on context it is used
func (m *RESTAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTAgent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAgent) UnmarshalBinary(b []byte) error {
	var res RESTAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
