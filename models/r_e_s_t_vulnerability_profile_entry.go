// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTVulnerabilityProfileEntry r e s t vulnerability profile entry
//
// swagger:model RESTVulnerabilityProfileEntry
type RESTVulnerabilityProfileEntry struct {

	// comment
	// Example: Accepted by admin at Dec 09, 2021 12:00:02 from Vulnerabilities page
	// Required: true
	Comment *string `json:"comment"`

	// days
	// Example: 0
	// Required: true
	Days *uint64 `json:"days"`

	// domains
	// Example: ["domain1","domain2"]
	// Required: true
	Domains []string `json:"domains"`

	// id
	// Example: 1003
	// Required: true
	ID *uint32 `json:"id"`

	// images
	// Example: []
	// Required: true
	Images []string `json:"images"`

	// name
	// Example: CVE-2020-29661
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this r e s t vulnerability profile entry
func (m *RESTVulnerabilityProfileEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateDays(formats strfmt.Registry) error {

	if err := validate.Required("days", "body", m.Days); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateDomains(formats strfmt.Registry) error {

	if err := validate.Required("domains", "body", m.Domains); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityProfileEntry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t vulnerability profile entry based on context it is used
func (m *RESTVulnerabilityProfileEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTVulnerabilityProfileEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTVulnerabilityProfileEntry) UnmarshalBinary(b []byte) error {
	var res RESTVulnerabilityProfileEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
