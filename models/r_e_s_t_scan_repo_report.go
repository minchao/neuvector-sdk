// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanRepoReport r e s t scan repo report
//
// swagger:model RESTScanRepoReport
type RESTScanRepoReport struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// base os
	// Example: ubuntu:16.04
	// Required: true
	BaseOs *string `json:"base_os"`

	// created at
	// Example: 2018-01-21T19:00:53Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// cvedb create time
	// Example: 2018-06-20T19:00:53Z
	// Required: true
	// Format: date-time
	CvedbCreateTime *strfmt.DateTime `json:"cvedb_create_time"`

	// cvedb version
	// Example: 1.00
	// Required: true
	CvedbVersion *string `json:"cvedb_version"`

	// digest
	// Example: bd8ffa77cf1c910b7a90935ca4828472e1c3e303e7cd5260f13d1e09995f173a
	// Required: true
	Digest *string `json:"digest"`

	// envs
	// Example: ["PATH=/usr/local/sbin","GOSU_VERSION=1.12","REDIS_VERSION=6.0.2"]
	// Required: true
	Envs []string `json:"envs"`

	// image id
	// Example: d572b7ee3511b21a2b78b8915bc03c5786ad01949704c1418624224c4cae2c5f
	// Required: true
	ImageID *string `json:"image_id"`

	// map key is string type
	// Example: {"label1":"value1","label2":"value2"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// layers
	// Required: true
	Layers []*RESTScanLayer `json:"layers"`

	// modules
	// Required: true
	Modules []*RESTScanModule `json:"modules"`

	// registry
	// Example: https://registry.hub.docker.com/
	// Required: true
	Registry *string `json:"registry"`

	// repository
	// Example: alpine
	// Required: true
	Repository *string `json:"repository"`

	// size
	// Example: 1
	// Required: true
	Size *int64 `json:"size"`

	// tag
	// Example: latest
	// Required: true
	Tag *string `json:"tag"`

	// verdict
	Verdict string `json:"verdict,omitempty"`

	// vulnerabilities
	// Required: true
	Vulnerabilities []*RESTVulnerability `json:"vulnerabilities"`
}

// Validate validates this r e s t scan repo report
func (m *RESTScanRepoReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanRepoReport) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateCvedbCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_create_time", "body", m.CvedbCreateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("cvedb_create_time", "body", "date-time", m.CvedbCreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateCvedbVersion(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_version", "body", m.CvedbVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateEnvs(formats strfmt.Registry) error {

	if err := validate.Required("envs", "body", m.Envs); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateLayers(formats strfmt.Registry) error {

	if err := validate.Required("layers", "body", m.Layers); err != nil {
		return err
	}

	for i := 0; i < len(m.Layers); i++ {
		if swag.IsZero(m.Layers[i]) { // not required
			continue
		}

		if m.Layers[i] != nil {
			if err := m.Layers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanRepoReport) validateModules(formats strfmt.Registry) error {

	if err := validate.Required("modules", "body", m.Modules); err != nil {
		return err
	}

	for i := 0; i < len(m.Modules); i++ {
		if swag.IsZero(m.Modules[i]) { // not required
			continue
		}

		if m.Modules[i] != nil {
			if err := m.Modules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanRepoReport) validateRegistry(formats strfmt.Registry) error {

	if err := validate.Required("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReport) validateVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities", "body", m.Vulnerabilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t scan repo report based on the context it is used
func (m *RESTScanRepoReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanRepoReport) contextValidateLayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Layers); i++ {

		if m.Layers[i] != nil {

			if swag.IsZero(m.Layers[i]) { // not required
				return nil
			}

			if err := m.Layers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanRepoReport) contextValidateModules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Modules); i++ {

		if m.Modules[i] != nil {

			if swag.IsZero(m.Modules[i]) { // not required
				return nil
			}

			if err := m.Modules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanRepoReport) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanRepoReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanRepoReport) UnmarshalBinary(b []byte) error {
	var res RESTScanRepoReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
