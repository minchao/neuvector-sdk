// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadDetailMiscV2 r e s t workload detail misc v2
//
// swagger:model RESTWorkloadDetailMiscV2
type RESTWorkloadDetailMiscV2 struct {

	// map key is string type
	// Example: {"TCP":"9999"}
	// Required: true
	AppPorts map[string]string `json:"app_ports"`

	// children
	// Required: true
	Children []*RESTWorkloadDetailV2 `json:"children"`

	// groups
	// Example: ["nv.iperfclient-pod","nv.pod"]
	// Required: true
	Groups []string `json:"groups"`
}

// Validate validates this r e s t workload detail misc v2
func (m *RESTWorkloadDetailMiscV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadDetailMiscV2) validateAppPorts(formats strfmt.Registry) error {

	if err := validate.Required("app_ports", "body", m.AppPorts); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailMiscV2) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkloadDetailMiscV2) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t workload detail misc v2 based on the context it is used
func (m *RESTWorkloadDetailMiscV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadDetailMiscV2) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {

			if swag.IsZero(m.Children[i]) { // not required
				return nil
			}

			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadDetailMiscV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadDetailMiscV2) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadDetailMiscV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
