// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTProcessInfo r e s t process info
//
// swagger:model RESTProcessInfo
type RESTProcessInfo struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// cmdline
	// Example: /sbin/runsvdir
	// Required: true
	Cmdline *string `json:"cmdline"`

	// group
	// Example: 2394
	// Required: true
	Group *uint32 `json:"group"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parent
	// Example: 2379
	// Required: true
	Parent *uint32 `json:"parent"`

	// pid
	// Example: 2394
	// Required: true
	Pid *uint32 `json:"pid"`

	// root
	// Example: true
	// Required: true
	Root *bool `json:"root"`

	// session
	// Example: 2394
	// Required: true
	Session *uint32 `json:"session"`

	// start timestamp
	// Example: 1516561258
	// Required: true
	StartTimestamp *int64 `json:"start_timestamp"`

	// status
	// Example: Sleeping
	// Required: true
	Status *string `json:"status"`

	// user
	// Example: root
	// Required: true
	User *string `json:"user"`
}

// Validate validates this r e s t process info
func (m *RESTProcessInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmdline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSession(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTProcessInfo) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateCmdline(formats strfmt.Registry) error {

	if err := validate.Required("cmdline", "body", m.Cmdline); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("parent", "body", m.Parent); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateRoot(formats strfmt.Registry) error {

	if err := validate.Required("root", "body", m.Root); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateSession(formats strfmt.Registry) error {

	if err := validate.Required("session", "body", m.Session); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessInfo) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t process info based on context it is used
func (m *RESTProcessInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTProcessInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTProcessInfo) UnmarshalBinary(b []byte) error {
	var res RESTProcessInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
