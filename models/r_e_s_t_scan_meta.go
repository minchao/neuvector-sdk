// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanMeta r e s t scan meta
//
// swagger:model RESTScanMeta
type RESTScanMeta struct {

	// function
	// Example: monitor
	// Required: true
	Function *string `json:"function"`

	// job
	// Example: scan
	// Required: true
	Job *string `json:"job"`

	// region
	// Example: West
	// Required: true
	Region *string `json:"region"`

	// source
	// Example: github
	// Required: true
	Source *string `json:"source"`

	// user
	// Example: user
	// Required: true
	User *string `json:"user"`

	// workspace
	// Example: /local
	// Required: true
	Workspace *string `json:"workspace"`
}

// Validate validates this r e s t scan meta
func (m *RESTScanMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanMeta) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanMeta) validateJob(formats strfmt.Registry) error {

	if err := validate.Required("job", "body", m.Job); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanMeta) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanMeta) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanMeta) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanMeta) validateWorkspace(formats strfmt.Registry) error {

	if err := validate.Required("workspace", "body", m.Workspace); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t scan meta based on context it is used
func (m *RESTScanMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanMeta) UnmarshalBinary(b []byte) error {
	var res RESTScanMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
