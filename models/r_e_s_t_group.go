// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTGroup r e s t group
//
// swagger:model RESTGroup
type RESTGroup struct {

	// cap change mode
	// Example: true
	// Required: true
	CapChangeMode *bool `json:"cap_change_mode"`

	// creater domains
	// Example: ["domain1","domain2"]
	// Required: true
	CreaterDomains []string `json:"creater_domains"`

	// criteria
	// Required: true
	Criteria []*RESTCriteriaEntry `json:"criteria"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// kind
	// Required: true
	Kind *string `json:"kind"`

	// learned
	// Example: true
	// Required: true
	Learned *bool `json:"learned"`

	// members
	// Required: true
	Members []*RESTWorkloadBrief `json:"members"`

	// name
	// Example: kafkadocker_kafka
	// Required: true
	Name *string `json:"name"`

	// platform role
	// Example: core
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// policy mode
	// Example: Discover
	PolicyMode string `json:"policy_mode,omitempty"`

	// policy rules
	// Required: true
	PolicyRules []uint32 `json:"policy_rules"`

	// reserved
	// Example: false
	// Required: true
	Reserved *bool `json:"reserved"`

	// response rules
	// Required: true
	ResponseRules []uint32 `json:"response_rules"`
}

// Validate validates this r e s t group
func (m *RESTGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreaterDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLearned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTGroup) validateCapChangeMode(formats strfmt.Registry) error {

	if err := validate.Required("cap_change_mode", "body", m.CapChangeMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateCreaterDomains(formats strfmt.Registry) error {

	if err := validate.Required("creater_domains", "body", m.CreaterDomains); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroup) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateLearned(formats strfmt.Registry) error {

	if err := validate.Required("learned", "body", m.Learned); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validatePolicyRules(formats strfmt.Registry) error {

	if err := validate.Required("policy_rules", "body", m.PolicyRules); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateReserved(formats strfmt.Registry) error {

	if err := validate.Required("reserved", "body", m.Reserved); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroup) validateResponseRules(formats strfmt.Registry) error {

	if err := validate.Required("response_rules", "body", m.ResponseRules); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t group based on the context it is used
func (m *RESTGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTGroup) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroup) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {

			if swag.IsZero(m.Members[i]) { // not required
				return nil
			}

			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTGroup) UnmarshalBinary(b []byte) error {
	var res RESTGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
