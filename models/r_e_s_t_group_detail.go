// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTGroupDetail r e s t group detail
//
// swagger:model RESTGroupDetail
type RESTGroupDetail struct {

	// cap change mode
	// Example: false
	// Required: true
	CapChangeMode *bool `json:"cap_change_mode"`

	// cfg type
	// Required: true
	// Enum: [learned user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// creater domains
	// Example: ["domain1","domain2"]
	// Required: true
	CreaterDomains []string `json:"creater_domains"`

	// criteria
	// Required: true
	Criteria []*RESTCriteriaEntry `json:"criteria"`

	// domain
	// Example: external
	// Required: true
	Domain *string `json:"domain"`

	// kind
	// Required: true
	Kind *string `json:"kind"`

	// learned
	// Example: true
	// Required: true
	Learned *bool `json:"learned"`

	// members
	// Required: true
	Members []*RESTWorkloadBrief `json:"members"`

	// name
	// Example: containers
	// Required: true
	Name *string `json:"name"`

	// platform role
	// Example: admin
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// policy mode
	PolicyMode string `json:"policy_mode,omitempty"`

	// policy rules
	// Required: true
	PolicyRules []*RESTPolicyRule `json:"policy_rules"`

	// reserved
	// Example: false
	// Required: true
	Reserved *bool `json:"reserved"`

	// response rules
	// Required: true
	ResponseRules []*RESTResponseRule `json:"response_rules"`
}

// Validate validates this r e s t group detail
func (m *RESTGroupDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreaterDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLearned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTGroupDetail) validateCapChangeMode(formats strfmt.Registry) error {

	if err := validate.Required("cap_change_mode", "body", m.CapChangeMode); err != nil {
		return err
	}

	return nil
}

var rESTGroupDetailTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["learned","user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTGroupDetailTypeCfgTypePropEnum = append(rESTGroupDetailTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTGroupDetailCfgTypeLearned captures enum value "learned"
	RESTGroupDetailCfgTypeLearned string = "learned"

	// RESTGroupDetailCfgTypeUserCreated captures enum value "user_created"
	RESTGroupDetailCfgTypeUserCreated string = "user_created"

	// RESTGroupDetailCfgTypeGround captures enum value "ground"
	RESTGroupDetailCfgTypeGround string = "ground"

	// RESTGroupDetailCfgTypeFederal captures enum value "federal"
	RESTGroupDetailCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTGroupDetail) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTGroupDetailTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTGroupDetail) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateCreaterDomains(formats strfmt.Registry) error {

	if err := validate.Required("creater_domains", "body", m.CreaterDomains); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateLearned(formats strfmt.Registry) error {

	if err := validate.Required("learned", "body", m.Learned); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validatePolicyRules(formats strfmt.Registry) error {

	if err := validate.Required("policy_rules", "body", m.PolicyRules); err != nil {
		return err
	}

	for i := 0; i < len(m.PolicyRules); i++ {
		if swag.IsZero(m.PolicyRules[i]) { // not required
			continue
		}

		if m.PolicyRules[i] != nil {
			if err := m.PolicyRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) validateReserved(formats strfmt.Registry) error {

	if err := validate.Required("reserved", "body", m.Reserved); err != nil {
		return err
	}

	return nil
}

func (m *RESTGroupDetail) validateResponseRules(formats strfmt.Registry) error {

	if err := validate.Required("response_rules", "body", m.ResponseRules); err != nil {
		return err
	}

	for i := 0; i < len(m.ResponseRules); i++ {
		if swag.IsZero(m.ResponseRules[i]) { // not required
			continue
		}

		if m.ResponseRules[i] != nil {
			if err := m.ResponseRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t group detail based on the context it is used
func (m *RESTGroupDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTGroupDetail) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {

			if swag.IsZero(m.Members[i]) { // not required
				return nil
			}

			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) contextValidatePolicyRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyRules); i++ {

		if m.PolicyRules[i] != nil {

			if swag.IsZero(m.PolicyRules[i]) { // not required
				return nil
			}

			if err := m.PolicyRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTGroupDetail) contextValidateResponseRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResponseRules); i++ {

		if m.ResponseRules[i] != nil {

			if swag.IsZero(m.ResponseRules[i]) { // not required
				return nil
			}

			if err := m.ResponseRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTGroupDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTGroupDetail) UnmarshalBinary(b []byte) error {
	var res RESTGroupDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
