// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSnifferInfo r e s t sniffer info
//
// swagger:model RESTSnifferInfo
type RESTSnifferInfo struct {

	// args
	// Example: -C 10 -w /var/cm/pcap/3ccad_ -W 10 ether host 6f:61:35:50:10:0c
	// Required: true
	Args *string `json:"args"`

	// container id
	// Example: 79e82a60d019dba04e8993534c99d1c5b6286247f58
	// Required: true
	ContainerID *string `json:"container_id"`

	// enforcer id
	// Example: 479e272bb78b8bbb0765156c9c6cda7b8941692fc
	// Required: true
	EnforcerID *string `json:"enforcer_id"`

	// file number
	// Example: 1
	// Required: true
	FileNumber *uint32 `json:"file_number"`

	// id
	// Example: e272b888bbb0765d3c172ab8477b78b
	// Required: true
	ID *string `json:"id"`

	// size
	// Example: 60273
	// Required: true
	Size *int64 `json:"size"`

	// start time
	// Example: 1509410381
	// Required: true
	StartTime *int64 `json:"start_time"`

	// status
	// Example: running
	// Required: true
	Status *string `json:"status"`

	// stop time
	// Example: 1509432360
	// Required: true
	StopTime *int64 `json:"stop_time"`
}

// Validate validates this r e s t sniffer info
func (m *RESTSnifferInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSnifferInfo) validateArgs(formats strfmt.Registry) error {

	if err := validate.Required("args", "body", m.Args); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("container_id", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateEnforcerID(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_id", "body", m.EnforcerID); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateFileNumber(formats strfmt.Registry) error {

	if err := validate.Required("file_number", "body", m.FileNumber); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RESTSnifferInfo) validateStopTime(formats strfmt.Registry) error {

	if err := validate.Required("stop_time", "body", m.StopTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t sniffer info based on context it is used
func (m *RESTSnifferInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTSnifferInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSnifferInfo) UnmarshalBinary(b []byte) error {
	var res RESTSnifferInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
