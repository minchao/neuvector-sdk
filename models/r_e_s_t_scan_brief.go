// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanBrief r e s t scan brief
//
// swagger:model RESTScanBrief
type RESTScanBrief struct {

	// base os
	// Example: ubuntu:16.04
	// Required: true
	BaseOs *string `json:"base_os"`

	// cvedb create time
	// Example: 2018-06-20T19:00:53Z
	// Required: true
	// Format: date-time
	CvedbCreateTime *strfmt.DateTime `json:"cvedb_create_time"`

	// high
	// Example: 0
	// Required: true
	High *int64 `json:"high"`

	// medium
	// Example: 0
	// Required: true
	Medium *int64 `json:"medium"`

	// result
	// Example: success
	// Required: true
	Result *string `json:"result"`

	// scanned at
	// Example: 2018-01-21T19:00:53Z
	// Required: true
	// Format: date-time
	ScannedAt *strfmt.DateTime `json:"scanned_at"`

	// scanned timestamp
	// Example: 1516561253
	// Required: true
	ScannedTimestamp *int64 `json:"scanned_timestamp"`

	// scanner version
	// Example: 1.011
	// Required: true
	ScannerVersion *string `json:"scanner_version"`

	// status
	// Example: scheduled
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this r e s t scan brief
func (m *RESTScanBrief) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanBrief) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateCvedbCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_create_time", "body", m.CvedbCreateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("cvedb_create_time", "body", "date-time", m.CvedbCreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateMedium(formats strfmt.Registry) error {

	if err := validate.Required("medium", "body", m.Medium); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateScannedAt(formats strfmt.Registry) error {

	if err := validate.Required("scanned_at", "body", m.ScannedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("scanned_at", "body", "date-time", m.ScannedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateScannedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("scanned_timestamp", "body", m.ScannedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateScannerVersion(formats strfmt.Registry) error {

	if err := validate.Required("scanner_version", "body", m.ScannerVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanBrief) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t scan brief based on context it is used
func (m *RESTScanBrief) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanBrief) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanBrief) UnmarshalBinary(b []byte) error {
	var res RESTScanBrief
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
