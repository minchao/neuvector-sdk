// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTStats r e s t stats
//
// swagger:model RESTStats
type RESTStats struct {

	// interval
	// Example: 5
	// Required: true
	Interval *uint32 `json:"interval"`

	// span 1
	// Required: true
	Span1 *RESTMetry `json:"span_1"`

	// span 12
	// Required: true
	Span12 *RESTMetry `json:"span_12"`

	// span 60
	// Required: true
	Span60 *RESTMetry `json:"span_60"`

	// total
	// Required: true
	Total *RESTMetry `json:"total"`
}

// Validate validates this r e s t stats
func (m *RESTStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpan1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpan12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpan60(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTStats) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *RESTStats) validateSpan1(formats strfmt.Registry) error {

	if err := validate.Required("span_1", "body", m.Span1); err != nil {
		return err
	}

	if m.Span1 != nil {
		if err := m.Span1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_1")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) validateSpan12(formats strfmt.Registry) error {

	if err := validate.Required("span_12", "body", m.Span12); err != nil {
		return err
	}

	if m.Span12 != nil {
		if err := m.Span12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_12")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) validateSpan60(formats strfmt.Registry) error {

	if err := validate.Required("span_60", "body", m.Span60); err != nil {
		return err
	}

	if m.Span60 != nil {
		if err := m.Span60.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_60")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_60")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	if m.Total != nil {
		if err := m.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t stats based on the context it is used
func (m *RESTStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpan1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpan12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpan60(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTStats) contextValidateSpan1(ctx context.Context, formats strfmt.Registry) error {

	if m.Span1 != nil {

		if err := m.Span1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_1")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) contextValidateSpan12(ctx context.Context, formats strfmt.Registry) error {

	if m.Span12 != nil {

		if err := m.Span12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_12")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) contextValidateSpan60(ctx context.Context, formats strfmt.Registry) error {

	if m.Span60 != nil {

		if err := m.Span60.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("span_60")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("span_60")
			}
			return err
		}
	}

	return nil
}

func (m *RESTStats) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if m.Total != nil {

		if err := m.Total.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTStats) UnmarshalBinary(b []byte) error {
	var res RESTStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
