// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Violation violation
//
// swagger:model Violation
type Violation struct {

	// applications
	// Required: true
	Applications []string `json:"applications"`

	// client domain
	ClientDomain string `json:"client_domain,omitempty"`

	// client id
	// Example: 25f773945fff1d8880b9eb67d26be22f5321d
	// Required: true
	ClientID *string `json:"client_id"`

	// client image
	ClientImage string `json:"client_image,omitempty"`

	// client ip
	// Example: 172.17.0.4
	// Required: true
	ClientIP *string `json:"client_ip"`

	// client name
	// Example: iperfclient
	// Required: true
	ClientName *string `json:"client_name"`

	// client service
	ClientService string `json:"client_service,omitempty"`

	// cluster name
	// Example: cluster1
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// enforcer id
	// Example: bced57295eefbd3f3bd0cf798b6184fa789
	// Required: true
	EnforcerID *string `json:"enforcer_id"`

	// enforcer name
	// Example: allinone
	// Required: true
	EnforcerName *string `json:"enforcer_name"`

	// fqdn
	// Example: www.suse.com
	// Required: true
	Fqdn *string `json:"fqdn"`

	// host id
	// Example: 2AU7:TIEN:O5KX:QK56:LFQP:IJSV:FXBN:QJV7
	// Required: true
	HostID *string `json:"host_id"`

	// host name
	// Example: ubuntu64
	// Required: true
	HostName *string `json:"host_name"`

	// id
	// Example: e6e19591-75a0-43e9-bebb-145d588e6718
	// Required: true
	ID *string `json:"id"`

	// ip proto
	// Example: 6
	// Required: true
	IPProto *uint8 `json:"ip_proto"`

	// level
	// Example: WARNING
	// Required: true
	Level *string `json:"level"`

	// name
	Name string `json:"name,omitempty"`

	// policy action
	// Example: violate
	// Required: true
	PolicyAction *string `json:"policy_action"`

	// policy id
	// Example: 9999
	// Required: true
	PolicyID *uint32 `json:"policy_id"`

	// reported at
	// Example: 2018-01-17T03:36:59Z
	// Required: true
	// Format: date-time
	ReportedAt *strfmt.DateTime `json:"reported_at"`

	// reported timestamp
	// Example: 1516160219
	// Required: true
	ReportedTimestamp *int64 `json:"reported_timestamp"`

	// response rule id
	// Example: 10008
	ResponseRuleID int64 `json:"response_rule_id,omitempty"`

	// server domain
	ServerDomain string `json:"server_domain,omitempty"`

	// server id
	// Example: 0350077d87164505597268494acbc8a25109e3
	// Required: true
	ServerID *string `json:"server_id"`

	// server image
	ServerImage string `json:"server_image,omitempty"`

	// server ip
	// Example: 172.17.0.3
	// Required: true
	ServerIP *string `json:"server_ip"`

	// server name
	// Example: iperfserver
	// Required: true
	ServerName *string `json:"server_name"`

	// server port
	// Example: 5000
	// Required: true
	ServerPort *uint16 `json:"server_port"`

	// server service
	ServerService string `json:"server_service,omitempty"`

	// servers
	// Example: ["server1","server2"]
	// Required: true
	Servers []string `json:"servers"`

	// sessions
	// Example: 0
	// Required: true
	Sessions *uint32 `json:"sessions"`
}

// Validate validates this violation
func (m *Violation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Violation) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateClientIP(formats strfmt.Registry) error {

	if err := validate.Required("client_ip", "body", m.ClientIP); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateClientName(formats strfmt.Registry) error {

	if err := validate.Required("client_name", "body", m.ClientName); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateEnforcerID(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_id", "body", m.EnforcerID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateEnforcerName(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_name", "body", m.EnforcerName); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateFqdn(formats strfmt.Registry) error {

	if err := validate.Required("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateIPProto(formats strfmt.Registry) error {

	if err := validate.Required("ip_proto", "body", m.IPProto); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validatePolicyAction(formats strfmt.Registry) error {

	if err := validate.Required("policy_action", "body", m.PolicyAction); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validatePolicyID(formats strfmt.Registry) error {

	if err := validate.Required("policy_id", "body", m.PolicyID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateReportedAt(formats strfmt.Registry) error {

	if err := validate.Required("reported_at", "body", m.ReportedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("reported_at", "body", "date-time", m.ReportedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateReportedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("reported_timestamp", "body", m.ReportedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("server_id", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateServerIP(formats strfmt.Registry) error {

	if err := validate.Required("server_ip", "body", m.ServerIP); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("server_name", "body", m.ServerName); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateServerPort(formats strfmt.Registry) error {

	if err := validate.Required("server_port", "body", m.ServerPort); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateServers(formats strfmt.Registry) error {

	if err := validate.Required("servers", "body", m.Servers); err != nil {
		return err
	}

	return nil
}

func (m *Violation) validateSessions(formats strfmt.Registry) error {

	if err := validate.Required("sessions", "body", m.Sessions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this violation based on context it is used
func (m *Violation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Violation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Violation) UnmarshalBinary(b []byte) error {
	var res Violation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
