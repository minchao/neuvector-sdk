// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTUser r e s t user
//
// swagger:model RESTUser
type RESTUser struct {

	// blocked for failed login
	// Example: false
	// Required: true
	BlockedForFailedLogin *bool `json:"blocked_for_failed_login"`

	// blocked for password expired
	// Example: false
	// Required: true
	BlockedForPasswordExpired *bool `json:"blocked_for_password_expired"`

	// If the user is using default password
	// Required: true
	DefaultPassword *bool `json:"default_password"`

	// email
	// Example: user@mail.com
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// fullname
	// Example: admin
	// Required: true
	Fullname *string `json:"fullname"`

	// last login at
	// Required: true
	LastLoginAt *string `json:"last_login_at"`

	// last login timestamp
	// Example: 1505755716
	// Required: true
	LastLoginTimestamp *int64 `json:"last_login_timestamp"`

	// locale
	// Example: en
	// Required: true
	Locale *string `json:"locale"`

	// login count
	// Example: 1
	// Required: true
	LoginCount *uint32 `json:"login_count"`

	// If the password should be modified
	// Required: true
	ModifyPassword bool `json:"modify_password"`

	// password
	// Example: mypassword
	// Format: password
	Password strfmt.Password `json:"password,omitempty"`

	// role
	// Example: admin
	// Required: true
	Role *string `json:"role"`

	// role domains
	RoleDomains *RESTUserRoleDomains `json:"role_domains,omitempty"`

	// server
	// Example: server1
	// Required: true
	Server *string `json:"server"`

	// timeout
	// Example: 300
	// Required: true
	Timeout *uint32 `json:"timeout"`

	// username
	// Example: admin
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this r e s t user
func (m *RESTUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockedForFailedLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockedForPasswordExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTUser) validateBlockedForFailedLogin(formats strfmt.Registry) error {

	if err := validate.Required("blocked_for_failed_login", "body", m.BlockedForFailedLogin); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateBlockedForPasswordExpired(formats strfmt.Registry) error {

	if err := validate.Required("blocked_for_password_expired", "body", m.BlockedForPasswordExpired); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateDefaultPassword(formats strfmt.Registry) error {

	if err := validate.Required("default_password", "body", m.DefaultPassword); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateFullname(formats strfmt.Registry) error {

	if err := validate.Required("fullname", "body", m.Fullname); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateLastLoginAt(formats strfmt.Registry) error {

	if err := validate.Required("last_login_at", "body", m.LastLoginAt); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateLastLoginTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_login_timestamp", "body", m.LastLoginTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateLoginCount(formats strfmt.Registry) error {

	if err := validate.Required("login_count", "body", m.LoginCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateModifyPassword(formats strfmt.Registry) error {

	if err := validate.Required("modify_password", "body", bool(m.ModifyPassword)); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateRoleDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleDomains) { // not required
		return nil
	}

	if m.RoleDomains != nil {
		if err := m.RoleDomains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

func (m *RESTUser) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateTimeout(formats strfmt.Registry) error {

	if err := validate.Required("timeout", "body", m.Timeout); err != nil {
		return err
	}

	return nil
}

func (m *RESTUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t user based on the context it is used
func (m *RESTUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTUser) contextValidateRoleDomains(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleDomains != nil {

		if swag.IsZero(m.RoleDomains) { // not required
			return nil
		}

		if err := m.RoleDomains.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTUser) UnmarshalBinary(b []byte) error {
	var res RESTUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTUserRoleDomains r e s t user role domains
//
// swagger:model RESTUserRoleDomains
type RESTUserRoleDomains struct {

	// domains
	// Example: ["domain1","domain2"]
	Domains []string `json:"domains"`

	// role
	// Example: admin
	Role string `json:"role,omitempty"`
}

// Validate validates this r e s t user role domains
func (m *RESTUserRoleDomains) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this r e s t user role domains based on context it is used
func (m *RESTUserRoleDomains) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTUserRoleDomains) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTUserRoleDomains) UnmarshalBinary(b []byte) error {
	var res RESTUserRoleDomains
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
