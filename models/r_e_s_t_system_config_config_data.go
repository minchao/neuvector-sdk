// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RESTSystemConfigConfigData r e s t system config config data
//
// swagger:model RESTSystemConfigConfigData
type RESTSystemConfigConfigData struct {

	// atmo config
	AtmoConfig *RESTSysAtmoConfigConfig `json:"atmo_config,omitempty"`

	// config
	Config *RESTSystemConfigConfig `json:"config,omitempty"`

	// config v2
	ConfigV2 *RESTSystemConfigConfigV2 `json:"config_v2,omitempty"`

	// fed config
	FedConfig *RESTFedSystemConfigConfig `json:"fed_config,omitempty"`

	// net config
	NetConfig *RESTSysNetConfigConfig `json:"net_config,omitempty"`
}

// Validate validates this r e s t system config config data
func (m *RESTSystemConfigConfigData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtmoConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFedConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfigData) validateAtmoConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AtmoConfig) { // not required
		return nil
	}

	if m.AtmoConfig != nil {
		if err := m.AtmoConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atmo_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atmo_config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) validateConfigV2(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigV2) { // not required
		return nil
	}

	if m.ConfigV2 != nil {
		if err := m.ConfigV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config_v2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config_v2")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) validateFedConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.FedConfig) { // not required
		return nil
	}

	if m.FedConfig != nil {
		if err := m.FedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fed_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fed_config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) validateNetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NetConfig) { // not required
		return nil
	}

	if m.NetConfig != nil {
		if err := m.NetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("net_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("net_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t system config config data based on the context it is used
func (m *RESTSystemConfigConfigData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAtmoConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFedConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfigData) contextValidateAtmoConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AtmoConfig != nil {

		if swag.IsZero(m.AtmoConfig) { // not required
			return nil
		}

		if err := m.AtmoConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atmo_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("atmo_config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) contextValidateConfigV2(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigV2 != nil {

		if swag.IsZero(m.ConfigV2) { // not required
			return nil
		}

		if err := m.ConfigV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config_v2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config_v2")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) contextValidateFedConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.FedConfig != nil {

		if swag.IsZero(m.FedConfig) { // not required
			return nil
		}

		if err := m.FedConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fed_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fed_config")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigData) contextValidateNetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetConfig != nil {

		if swag.IsZero(m.NetConfig) { // not required
			return nil
		}

		if err := m.NetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("net_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("net_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigConfigData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigConfigData) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigConfigData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
