// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanPlatformSummary r e s t scan platform summary
//
// swagger:model RESTScanPlatformSummary
type RESTScanPlatformSummary struct {

	// base os
	// Required: true
	BaseOs *string `json:"base_os"`

	// cvedb create time
	// Example: 2020-06-19T10:32:18Z
	// Required: true
	CvedbCreateTime *string `json:"cvedb_create_time"`

	// high
	// Example: 3
	// Required: true
	High *int64 `json:"high"`

	// kube version
	// Example: 1.19.2
	// Required: true
	KubeVersion *string `json:"kube_version"`

	// medium
	// Example: 1
	// Required: true
	Medium *int64 `json:"medium"`

	// openshift version
	// Required: true
	OpenshiftVersion *string `json:"openshift_version"`

	// platform
	// Example: Kubernetes
	// Required: true
	Platform *string `json:"platform"`

	// result
	// Example: succeeded
	// Required: true
	Result *string `json:"result"`

	// scanned at
	// Example: 2020-06-27T00:20:23Z
	// Required: true
	ScannedAt *string `json:"scanned_at"`

	// scanned timestamp
	// Example: 1593217223
	// Required: true
	ScannedTimestamp *int64 `json:"scanned_timestamp"`

	// scanner version
	// Example: 1.932
	// Required: true
	ScannerVersion *string `json:"scanner_version"`

	// status
	// Example: finished
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this r e s t scan platform summary
func (m *RESTScanPlatformSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenshiftVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanPlatformSummary) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateCvedbCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_create_time", "body", m.CvedbCreateTime); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateKubeVersion(formats strfmt.Registry) error {

	if err := validate.Required("kube_version", "body", m.KubeVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateMedium(formats strfmt.Registry) error {

	if err := validate.Required("medium", "body", m.Medium); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateOpenshiftVersion(formats strfmt.Registry) error {

	if err := validate.Required("openshift_version", "body", m.OpenshiftVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateScannedAt(formats strfmt.Registry) error {

	if err := validate.Required("scanned_at", "body", m.ScannedAt); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateScannedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("scanned_timestamp", "body", m.ScannedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateScannerVersion(formats strfmt.Registry) error {

	if err := validate.Required("scanner_version", "body", m.ScannerVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPlatformSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t scan platform summary based on context it is used
func (m *RESTScanPlatformSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanPlatformSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanPlatformSummary) UnmarshalBinary(b []byte) error {
	var res RESTScanPlatformSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
