// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTPolicyRule r e s t policy rule
//
// swagger:model RESTPolicyRule
type RESTPolicyRule struct {

	// action
	// Example: allow
	// Required: true
	Action *string `json:"action"`

	// applications
	// Required: true
	Applications []string `json:"applications"`

	// cfg type
	// Required: true
	// Enum: [learned user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// comment
	// Example: a rule
	// Required: true
	Comment *string `json:"comment"`

	// created timestamp
	// Example: 1516563263
	// Required: true
	CreatedTimestamp *int64 `json:"created_timestamp"`

	// disable
	// Example: false
	// Required: true
	Disable *bool `json:"disable"`

	// group name
	// Example: nv.iperfc
	// Required: true
	From *string `json:"from"`

	// id
	// Example: 10002
	// Required: true
	ID *uint32 `json:"id"`

	// last modified timestamp
	// Example: 1516573243
	// Required: true
	LastModifiedTimestamp *int64 `json:"last_modified_timestamp"`

	// learned
	// Example: true
	// Required: true
	Learned *bool `json:"learned"`

	// free-style port list
	// Example: any
	// Required: true
	Ports *string `json:"ports"`

	// priority
	// Example: 0
	// Required: true
	Priority *uint32 `json:"priority"`

	// group name
	// Example: Host:10.2.127.3
	// Required: true
	To *string `json:"to"`
}

// Validate validates this r e s t policy rule
func (m *RESTPolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLearned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTPolicyRule) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

var rESTPolicyRuleTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["learned","user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTPolicyRuleTypeCfgTypePropEnum = append(rESTPolicyRuleTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTPolicyRuleCfgTypeLearned captures enum value "learned"
	RESTPolicyRuleCfgTypeLearned string = "learned"

	// RESTPolicyRuleCfgTypeUserCreated captures enum value "user_created"
	RESTPolicyRuleCfgTypeUserCreated string = "user_created"

	// RESTPolicyRuleCfgTypeGround captures enum value "ground"
	RESTPolicyRuleCfgTypeGround string = "ground"

	// RESTPolicyRuleCfgTypeFederal captures enum value "federal"
	RESTPolicyRuleCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTPolicyRule) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTPolicyRuleTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTPolicyRule) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateDisable(formats strfmt.Registry) error {

	if err := validate.Required("disable", "body", m.Disable); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_timestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateLearned(formats strfmt.Registry) error {

	if err := validate.Required("learned", "body", m.Learned); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *RESTPolicyRule) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t policy rule based on context it is used
func (m *RESTPolicyRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTPolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTPolicyRule) UnmarshalBinary(b []byte) error {
	var res RESTPolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
