// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTProcessProfile r e s t process profile
//
// swagger:model RESTProcessProfile
type RESTProcessProfile struct {

	// alert disabled
	// Example: false
	AlertDisabled bool `json:"alert_disabled,omitempty"`

	// group
	// Example: admin
	// Required: true
	Group *string `json:"group"`

	// hash enabled
	// Example: true
	HashEnabled bool `json:"hash_enabled,omitempty"`

	// mode
	// Required: true
	Mode *string `json:"mode"`

	// process list
	// Required: true
	ProcessList []*RESTProcessProfileEntry `json:"process_list"`
}

// Validate validates this r e s t process profile
func (m *RESTProcessProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTProcessProfile) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessProfile) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessProfile) validateProcessList(formats strfmt.Registry) error {

	if err := validate.Required("process_list", "body", m.ProcessList); err != nil {
		return err
	}

	for i := 0; i < len(m.ProcessList); i++ {
		if swag.IsZero(m.ProcessList[i]) { // not required
			continue
		}

		if m.ProcessList[i] != nil {
			if err := m.ProcessList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t process profile based on the context it is used
func (m *RESTProcessProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProcessList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTProcessProfile) contextValidateProcessList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessList); i++ {

		if m.ProcessList[i] != nil {

			if swag.IsZero(m.ProcessList[i]) { // not required
				return nil
			}

			if err := m.ProcessList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTProcessProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTProcessProfile) UnmarshalBinary(b []byte) error {
	var res RESTProcessProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
