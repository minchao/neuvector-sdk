// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemConfigMiscV2 r e s t system config misc v2
//
// swagger:model RESTSystemConfigMiscV2
type RESTSystemConfigMiscV2 struct {

	// cfg type
	// Required: true
	// Enum: [user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// cluster name
	// Example: cluster1
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// configured internal subnets
	// Example: ["69.89.0.0/16","172.217.5.0/23"]
	ConfiguredInternalSubnets []string `json:"configured_internal_subnets"`

	// controller debug
	// Example: ["scan","k8s_monitor"]
	// Required: true
	ControllerDebug []string `json:"controller_debug"`

	// csp type
	// Example: aws
	CspType string `json:"csp_type,omitempty"`

	// monitor service mesh
	// Example: true
	// Required: true
	MonitorServiceMesh *bool `json:"monitor_service_mesh"`

	// no telemetry report
	// Example: false
	// Required: true
	NoTelemetryReport *bool `json:"no_telemetry_report"`

	// unused group aging
	// Example: 123
	// Required: true
	UnusedGroupAging *uint8 `json:"unused_group_aging"`

	// xff enabled
	// Example: false
	// Required: true
	XffEnabled *bool `json:"xff_enabled"`
}

// Validate validates this r e s t system config misc v2
func (m *RESTSystemConfigMiscV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorServiceMesh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoTelemetryReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnusedGroupAging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXffEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rESTSystemConfigMiscV2TypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTSystemConfigMiscV2TypeCfgTypePropEnum = append(rESTSystemConfigMiscV2TypeCfgTypePropEnum, v)
	}
}

const (

	// RESTSystemConfigMiscV2CfgTypeUserCreated captures enum value "user_created"
	RESTSystemConfigMiscV2CfgTypeUserCreated string = "user_created"

	// RESTSystemConfigMiscV2CfgTypeGround captures enum value "ground"
	RESTSystemConfigMiscV2CfgTypeGround string = "ground"

	// RESTSystemConfigMiscV2CfgTypeFederal captures enum value "federal"
	RESTSystemConfigMiscV2CfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTSystemConfigMiscV2) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTSystemConfigMiscV2TypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTSystemConfigMiscV2) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigMiscV2) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

var rESTSystemConfigMiscV2ControllerDebugItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cpath","conn","mutex","scan","cluster","k8s_monitor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTSystemConfigMiscV2ControllerDebugItemsEnum = append(rESTSystemConfigMiscV2ControllerDebugItemsEnum, v)
	}
}

func (m *RESTSystemConfigMiscV2) validateControllerDebugItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTSystemConfigMiscV2ControllerDebugItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTSystemConfigMiscV2) validateControllerDebug(formats strfmt.Registry) error {

	if err := validate.Required("controller_debug", "body", m.ControllerDebug); err != nil {
		return err
	}

	for i := 0; i < len(m.ControllerDebug); i++ {

		// value enum
		if err := m.validateControllerDebugItemsEnum("controller_debug"+"."+strconv.Itoa(i), "body", m.ControllerDebug[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RESTSystemConfigMiscV2) validateMonitorServiceMesh(formats strfmt.Registry) error {

	if err := validate.Required("monitor_service_mesh", "body", m.MonitorServiceMesh); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigMiscV2) validateNoTelemetryReport(formats strfmt.Registry) error {

	if err := validate.Required("no_telemetry_report", "body", m.NoTelemetryReport); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigMiscV2) validateUnusedGroupAging(formats strfmt.Registry) error {

	if err := validate.Required("unused_group_aging", "body", m.UnusedGroupAging); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigMiscV2) validateXffEnabled(formats strfmt.Registry) error {

	if err := validate.Required("xff_enabled", "body", m.XffEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t system config misc v2 based on context it is used
func (m *RESTSystemConfigMiscV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigMiscV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigMiscV2) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigMiscV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
