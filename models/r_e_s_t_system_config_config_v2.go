// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RESTSystemConfigConfigV2 only for POST(v2/system/config)
//
// swagger:model RESTSystemConfigConfigV2
type RESTSystemConfigConfigV2 struct {

	// auth cfg
	AuthCfg *RESTSystemConfigAuthCfgV2 `json:"auth_cfg,omitempty"`

	// ibmsa cfg
	IbmsaCfg *RESTSystemConfigIBMSAVCfg2 `json:"ibmsa_cfg,omitempty"`

	// misc cfg
	MiscCfg *RESTSystemConfigMiscCfgV2 `json:"misc_cfg,omitempty"`

	// proxy cfg
	ProxyCfg *RESTSystemConfigProxyCfgV2 `json:"proxy_cfg,omitempty"`

	// scanner autoscale cfg
	ScannerAutoscaleCfg *RESTSystemConfigAutoscaleConfig `json:"scanner_autoscale_cfg,omitempty"`

	// svc cfg
	SvcCfg *RESTSystemConfigSvcCfgV2 `json:"svc_cfg,omitempty"`

	// svslog cfg
	SvslogCfg *RESTSystemConfigSyslogCfgV2 `json:"svslog_cfg,omitempty"`

	// webhooks
	Webhooks []*RESTWebhook `json:"webhooks"`
}

// Validate validates this r e s t system config config v2
func (m *RESTSystemConfigConfigV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmsaCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerAutoscaleCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvslogCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhooks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfigV2) validateAuthCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthCfg) { // not required
		return nil
	}

	if m.AuthCfg != nil {
		if err := m.AuthCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateIbmsaCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmsaCfg) { // not required
		return nil
	}

	if m.IbmsaCfg != nil {
		if err := m.IbmsaCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmsa_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmsa_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateMiscCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.MiscCfg) { // not required
		return nil
	}

	if m.MiscCfg != nil {
		if err := m.MiscCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("misc_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("misc_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateProxyCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyCfg) { // not required
		return nil
	}

	if m.ProxyCfg != nil {
		if err := m.ProxyCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateScannerAutoscaleCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.ScannerAutoscaleCfg) { // not required
		return nil
	}

	if m.ScannerAutoscaleCfg != nil {
		if err := m.ScannerAutoscaleCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner_autoscale_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner_autoscale_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateSvcCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.SvcCfg) { // not required
		return nil
	}

	if m.SvcCfg != nil {
		if err := m.SvcCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svc_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svc_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateSvslogCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.SvslogCfg) { // not required
		return nil
	}

	if m.SvslogCfg != nil {
		if err := m.SvslogCfg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svslog_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svslog_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) validateWebhooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Webhooks) { // not required
		return nil
	}

	for i := 0; i < len(m.Webhooks); i++ {
		if swag.IsZero(m.Webhooks[i]) { // not required
			continue
		}

		if m.Webhooks[i] != nil {
			if err := m.Webhooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t system config config v2 based on the context it is used
func (m *RESTSystemConfigConfigV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbmsaCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMiscCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScannerAutoscaleCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvcCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvslogCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateAuthCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthCfg != nil {

		if swag.IsZero(m.AuthCfg) { // not required
			return nil
		}

		if err := m.AuthCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateIbmsaCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.IbmsaCfg != nil {

		if swag.IsZero(m.IbmsaCfg) { // not required
			return nil
		}

		if err := m.IbmsaCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmsa_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmsa_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateMiscCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.MiscCfg != nil {

		if swag.IsZero(m.MiscCfg) { // not required
			return nil
		}

		if err := m.MiscCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("misc_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("misc_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateProxyCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyCfg != nil {

		if swag.IsZero(m.ProxyCfg) { // not required
			return nil
		}

		if err := m.ProxyCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateScannerAutoscaleCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.ScannerAutoscaleCfg != nil {

		if swag.IsZero(m.ScannerAutoscaleCfg) { // not required
			return nil
		}

		if err := m.ScannerAutoscaleCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner_autoscale_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner_autoscale_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateSvcCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.SvcCfg != nil {

		if swag.IsZero(m.SvcCfg) { // not required
			return nil
		}

		if err := m.SvcCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svc_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svc_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateSvslogCfg(ctx context.Context, formats strfmt.Registry) error {

	if m.SvslogCfg != nil {

		if swag.IsZero(m.SvslogCfg) { // not required
			return nil
		}

		if err := m.SvslogCfg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svslog_cfg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svslog_cfg")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfigV2) contextValidateWebhooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Webhooks); i++ {

		if m.Webhooks[i] != nil {

			if swag.IsZero(m.Webhooks[i]) { // not required
				return nil
			}

			if err := m.Webhooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigConfigV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigConfigV2) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigConfigV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
