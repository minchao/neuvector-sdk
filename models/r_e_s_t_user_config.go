// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTUserConfig r e s t user config
//
// swagger:model RESTUserConfig
type RESTUserConfig struct {

	// email
	// Example: user@mail.com
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// fullname
	// Example: name
	// Required: true
	Fullname *string `json:"fullname"`

	// locale
	// Example: en
	Locale string `json:"locale,omitempty"`

	// new password
	// Example: newpassword
	NewPassword string `json:"new_password,omitempty"`

	// password
	// Example: mypassword
	// Format: password
	Password strfmt.Password `json:"password,omitempty"`

	// pwd profile
	// Required: true
	PwdProfile *string `json:"pwd_profile"`

	// role
	// Example: admin
	Role string `json:"role,omitempty"`

	// role domains
	RoleDomains *RESTUserConfigRoleDomains `json:"role_domains,omitempty"`

	// timeout
	// Example: 300
	Timeout uint32 `json:"timeout,omitempty"`
}

// Validate validates this r e s t user config
func (m *RESTUserConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePwdProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTUserConfig) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTUserConfig) validateFullname(formats strfmt.Registry) error {

	if err := validate.Required("fullname", "body", m.Fullname); err != nil {
		return err
	}

	return nil
}

func (m *RESTUserConfig) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTUserConfig) validatePwdProfile(formats strfmt.Registry) error {

	if err := validate.Required("pwd_profile", "body", m.PwdProfile); err != nil {
		return err
	}

	return nil
}

func (m *RESTUserConfig) validateRoleDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleDomains) { // not required
		return nil
	}

	if m.RoleDomains != nil {
		if err := m.RoleDomains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t user config based on the context it is used
func (m *RESTUserConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTUserConfig) contextValidateRoleDomains(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleDomains != nil {

		if swag.IsZero(m.RoleDomains) { // not required
			return nil
		}

		if err := m.RoleDomains.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_domains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_domains")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTUserConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTUserConfig) UnmarshalBinary(b []byte) error {
	var res RESTUserConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTUserConfigRoleDomains r e s t user config role domains
//
// swagger:model RESTUserConfigRoleDomains
type RESTUserConfigRoleDomains struct {

	// domains
	// Example: ["domain1","domain2"]
	Domains []string `json:"domains"`

	// role
	// Example: admin
	Role string `json:"role,omitempty"`
}

// Validate validates this r e s t user config role domains
func (m *RESTUserConfigRoleDomains) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this r e s t user config role domains based on context it is used
func (m *RESTUserConfigRoleDomains) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTUserConfigRoleDomains) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTUserConfigRoleDomains) UnmarshalBinary(b []byte) error {
	var res RESTUserConfigRoleDomains
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
