// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWafGroupConfig r e s t waf group config
//
// swagger:model RESTWafGroupConfig
type RESTWafGroupConfig struct {

	// delete
	Delete []string `json:"delete"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replace
	Replace []*RESTWafConfig `json:"replace"`

	// sensors
	Sensors []*RESTWafConfig `json:"sensors"`

	// status
	// Example: false
	Status bool `json:"status,omitempty"`
}

// Validate validates this r e s t waf group config
func (m *RESTWafGroupConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafGroupConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafGroupConfig) validateReplace(formats strfmt.Registry) error {
	if swag.IsZero(m.Replace) { // not required
		return nil
	}

	for i := 0; i < len(m.Replace); i++ {
		if swag.IsZero(m.Replace[i]) { // not required
			continue
		}

		if m.Replace[i] != nil {
			if err := m.Replace[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafGroupConfig) validateSensors(formats strfmt.Registry) error {
	if swag.IsZero(m.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(m.Sensors); i++ {
		if swag.IsZero(m.Sensors[i]) { // not required
			continue
		}

		if m.Sensors[i] != nil {
			if err := m.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sensors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t waf group config based on the context it is used
func (m *RESTWafGroupConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSensors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafGroupConfig) contextValidateReplace(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replace); i++ {

		if m.Replace[i] != nil {

			if swag.IsZero(m.Replace[i]) { // not required
				return nil
			}

			if err := m.Replace[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafGroupConfig) contextValidateSensors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sensors); i++ {

		if m.Sensors[i] != nil {

			if swag.IsZero(m.Sensors[i]) { // not required
				return nil
			}

			if err := m.Sensors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sensors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWafGroupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWafGroupConfig) UnmarshalBinary(b []byte) error {
	var res RESTWafGroupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
