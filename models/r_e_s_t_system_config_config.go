// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemConfigConfig only for POST(v1/system/config)
//
// swagger:model RESTSystemConfigConfig
type RESTSystemConfigConfig struct {

	// auth by platform
	// Example: true
	AuthByPlatform bool `json:"auth_by_platform,omitempty"`

	// auth order
	AuthOrder []string `json:"auth_order"`

	// cluster name
	// Example: cluster1
	ClusterName string `json:"cluster_name,omitempty"`

	// controller debug
	// Example: ["cpath","scan","k8s_monitor"]
	ControllerDebug []string `json:"controller_debug"`

	// ibmsa ep dashboard url
	IbmsaEpDashboardURL string `json:"ibmsa_ep_dashboard_url,omitempty"`

	// ibmsa ep enabled
	// Example: false
	IbmsaEpEnabled bool `json:"ibmsa_ep_enabled,omitempty"`

	// monitor service mesh
	// Example: true
	MonitorServiceMesh bool `json:"monitor_service_mesh,omitempty"`

	// new service policy mode
	// Example: Discover
	NewServicePolicyMode string `json:"new_service_policy_mode,omitempty"`

	// new service profile baseline
	// Example: zero-drift
	NewServiceProfileBaseline string `json:"new_service_profile_baseline,omitempty"`

	// no telemetry report
	// Example: false
	NoTelemetryReport bool `json:"no_telemetry_report,omitempty"`

	// rancher ep
	RancherEp string `json:"rancher_ep,omitempty"`

	// registry http proxy
	RegistryHTTPProxy *RESTProxy `json:"registry_http_proxy,omitempty"`

	// registry http proxy status
	// Example: true
	RegistryHTTPProxyStatus bool `json:"registry_http_proxy_status,omitempty"`

	// registry https proxy
	RegistryHTTPSProxy *RESTProxy `json:"registry_https_proxy,omitempty"`

	// registry https proxy status
	// Example: false
	RegistryHTTPSProxyStatus bool `json:"registry_https_proxy_status,omitempty"`

	// scanner autoscale
	ScannerAutoscale *RESTSystemConfigAutoscale `json:"scanner_autoscale,omitempty"`

	// single cve per syslog
	// Example: true
	SingleCvePerSyslog bool `json:"single_cve_per_syslog,omitempty"`

	// syslog categories
	// Example: ["event","violation","threat","incident"]
	SyslogCategories []string `json:"syslog_categories"`

	// syslog cve in layers
	// Example: true
	SyslogCveInLayers bool `json:"syslog_cve_in_layers,omitempty"`

	// syslog in json
	// Example: true
	SyslogInJSON bool `json:"syslog_in_json,omitempty"`

	// syslog ip
	SyslogIP string `json:"syslog_ip,omitempty"`

	// syslog ip proto
	// Example: 6
	SyslogIPProto uint8 `json:"syslog_ip_proto,omitempty"`

	// syslog level
	// Example: INFO
	SyslogLevel string `json:"syslog_level,omitempty"`

	// syslog port
	// Example: 514
	SyslogPort uint16 `json:"syslog_port,omitempty"`

	// syslog server cert
	// Example: E7B0OS/N3KMVCL6KNMZ2+LOV90S7854NSD84P0BF
	SyslogServerCert string `json:"syslog_server_cert,omitempty"`

	// syslog status
	// Example: false
	SyslogStatus bool `json:"syslog_status,omitempty"`

	// unused group aging
	// Example: 123
	UnusedGroupAging uint8 `json:"unused_group_aging,omitempty"`

	// webhooks
	Webhooks []*RESTWebhook `json:"webhooks"`

	// xff enabled
	// Example: false
	XffEnabled bool `json:"xff_enabled,omitempty"`
}

// Validate validates this r e s t system config config
func (m *RESTSystemConfigConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPSProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerAutoscale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhooks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rESTSystemConfigConfigControllerDebugItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cpath","conn","mutex","scan","cluster","k8s_monitor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTSystemConfigConfigControllerDebugItemsEnum = append(rESTSystemConfigConfigControllerDebugItemsEnum, v)
	}
}

func (m *RESTSystemConfigConfig) validateControllerDebugItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTSystemConfigConfigControllerDebugItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTSystemConfigConfig) validateControllerDebug(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerDebug) { // not required
		return nil
	}

	for i := 0; i < len(m.ControllerDebug); i++ {

		// value enum
		if err := m.validateControllerDebugItemsEnum("controller_debug"+"."+strconv.Itoa(i), "body", m.ControllerDebug[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RESTSystemConfigConfig) validateRegistryHTTPProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryHTTPProxy) { // not required
		return nil
	}

	if m.RegistryHTTPProxy != nil {
		if err := m.RegistryHTTPProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_http_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry_http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) validateRegistryHTTPSProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryHTTPSProxy) { // not required
		return nil
	}

	if m.RegistryHTTPSProxy != nil {
		if err := m.RegistryHTTPSProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_https_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry_https_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) validateScannerAutoscale(formats strfmt.Registry) error {
	if swag.IsZero(m.ScannerAutoscale) { // not required
		return nil
	}

	if m.ScannerAutoscale != nil {
		if err := m.ScannerAutoscale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner_autoscale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner_autoscale")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) validateWebhooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Webhooks) { // not required
		return nil
	}

	for i := 0; i < len(m.Webhooks); i++ {
		if swag.IsZero(m.Webhooks[i]) { // not required
			continue
		}

		if m.Webhooks[i] != nil {
			if err := m.Webhooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t system config config based on the context it is used
func (m *RESTSystemConfigConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegistryHTTPProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryHTTPSProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScannerAutoscale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfig) contextValidateRegistryHTTPProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistryHTTPProxy != nil {

		if swag.IsZero(m.RegistryHTTPProxy) { // not required
			return nil
		}

		if err := m.RegistryHTTPProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_http_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry_http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) contextValidateRegistryHTTPSProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistryHTTPSProxy != nil {

		if swag.IsZero(m.RegistryHTTPSProxy) { // not required
			return nil
		}

		if err := m.RegistryHTTPSProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_https_proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry_https_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) contextValidateScannerAutoscale(ctx context.Context, formats strfmt.Registry) error {

	if m.ScannerAutoscale != nil {

		if swag.IsZero(m.ScannerAutoscale) { // not required
			return nil
		}

		if err := m.ScannerAutoscale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner_autoscale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner_autoscale")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) contextValidateWebhooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Webhooks); i++ {

		if m.Webhooks[i] != nil {

			if swag.IsZero(m.Webhooks[i]) { // not required
				return nil
			}

			if err := m.Webhooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigConfig) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
