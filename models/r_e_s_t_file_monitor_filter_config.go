// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTFileMonitorFilterConfig r e s t file monitor filter config
//
// swagger:model RESTFileMonitorFilterConfig
type RESTFileMonitorFilterConfig struct {

	// applications
	// Required: true
	Applications []string `json:"applications"`

	// behavior
	// Required: true
	Behavior *string `json:"behavior"`

	// filter
	// Required: true
	Filter *string `json:"filter"`

	// group
	// Required: true
	Group *string `json:"group"`

	// recursive
	// Example: false
	// Required: true
	Recursive *bool `json:"recursive"`
}

// Validate validates this r e s t file monitor filter config
func (m *RESTFileMonitorFilterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecursive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTFileMonitorFilterConfig) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFilterConfig) validateBehavior(formats strfmt.Registry) error {

	if err := validate.Required("behavior", "body", m.Behavior); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFilterConfig) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFilterConfig) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFilterConfig) validateRecursive(formats strfmt.Registry) error {

	if err := validate.Required("recursive", "body", m.Recursive); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t file monitor filter config based on context it is used
func (m *RESTFileMonitorFilterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTFileMonitorFilterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTFileMonitorFilterConfig) UnmarshalBinary(b []byte) error {
	var res RESTFileMonitorFilterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
