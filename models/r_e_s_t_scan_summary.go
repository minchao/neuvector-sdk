// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanSummary r e s t scan summary
//
// swagger:model RESTScanSummary
type RESTScanSummary struct {

	// base os
	// Example: ubuntu:16.04
	// Required: true
	BaseOs *string `json:"base_os"`

	// cap change mode
	// Example: true
	// Required: true
	CapChangeMode *bool `json:"cap_change_mode"`

	// cap quarantine
	// Example: true
	// Required: true
	CapQuarantine *bool `json:"cap_quarantine"`

	// cap sniff
	// Example: true
	// Required: true
	CapSniff *bool `json:"cap_sniff"`

	// children
	// Required: true
	Children []*RESTScanSummary `json:"children"`

	// display name
	// Example: calico-node-mzhtk
	// Required: true
	DisplayName *string `json:"display_name"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// high
	// Example: 15
	// Required: true
	High *int64 `json:"high"`

	// host
	// Example: couchbase-s
	// Required: true
	Host *string `json:"host"`

	// id
	// Example: 7304e72fd093155c4cbcd65d07375329b2db82cc679
	// Required: true
	ID *string `json:"id"`

	// image
	// Example: calico
	// Required: true
	Image *string `json:"image"`

	// medium
	// Example: 127
	// Required: true
	Medium *int64 `json:"medium"`

	// name
	// Example: k8s_POD.d86c_calico-node-mzhtk_kube-system_0050565a_365c13d
	// Required: true
	Name *string `json:"name"`

	// platform role
	// Example: core
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// policy mode
	// Example: Discover
	PolicyMode string `json:"policy_mode,omitempty"`

	// privileged
	// Example: false
	// Required: true
	Privileged *bool `json:"privileged"`

	// quarantine reason
	// Example: violation
	QuarantineReason string `json:"quarantine_reason,omitempty"`

	// result
	// Example: success
	// Required: true
	Result *string `json:"result"`

	// run as root
	// Example: true
	// Required: true
	RunAsRoot *bool `json:"run_as_root"`

	// scan summary
	// Required: true
	ScanSummary *RESTScanBrief `json:"scan_summary"`

	// scanned at
	// Example: 2018-01-21T19:00:53Z
	// Required: true
	// Format: date-time
	ScannedAt *strfmt.DateTime `json:"scanned_at"`

	// scanned timestamp
	// Example: 1516561253
	// Required: true
	ScannedTimestamp *int64 `json:"scanned_timestamp"`

	// scanner version
	// Example: 1.011
	// Required: true
	ScannerVersion *string `json:"scanner_version"`

	// service
	// Example: kafkazookeeper
	// Required: true
	Service *string `json:"service"`

	// service group
	// Example: nv.calico
	// Required: true
	ServiceGroup *string `json:"service_group"`

	// service mesh
	// Example: true
	// Required: true
	ServiceMesh *bool `json:"service_mesh"`

	// service mesh sidecar
	// Example: true
	// Required: true
	ServiceMeshSidecar *bool `json:"service_mesh_sidecar"`

	// share ns with
	// Example: cc0709d522749203042e89dba28bf6924a4b0d360648
	ShareNsWith string `json:"share_ns_with,omitempty"`

	// state
	// Example: exit
	// Required: true
	State *string `json:"state"`

	// status
	// Example: finished
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this r e s t scan summary
func (m *RESTScanSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapQuarantine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapSniff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMesh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMeshSidecar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanSummary) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateCapChangeMode(formats strfmt.Registry) error {

	if err := validate.Required("cap_change_mode", "body", m.CapChangeMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateCapQuarantine(formats strfmt.Registry) error {

	if err := validate.Required("cap_quarantine", "body", m.CapQuarantine); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateCapSniff(formats strfmt.Registry) error {

	if err := validate.Required("cap_sniff", "body", m.CapSniff); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanSummary) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateMedium(formats strfmt.Registry) error {

	if err := validate.Required("medium", "body", m.Medium); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validatePrivileged(formats strfmt.Registry) error {

	if err := validate.Required("privileged", "body", m.Privileged); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateRunAsRoot(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root", "body", m.RunAsRoot); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateScanSummary(formats strfmt.Registry) error {

	if err := validate.Required("scan_summary", "body", m.ScanSummary); err != nil {
		return err
	}

	if m.ScanSummary != nil {
		if err := m.ScanSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanSummary) validateScannedAt(formats strfmt.Registry) error {

	if err := validate.Required("scanned_at", "body", m.ScannedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("scanned_at", "body", "date-time", m.ScannedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateScannedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("scanned_timestamp", "body", m.ScannedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateScannerVersion(formats strfmt.Registry) error {

	if err := validate.Required("scanner_version", "body", m.ScannerVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateServiceGroup(formats strfmt.Registry) error {

	if err := validate.Required("service_group", "body", m.ServiceGroup); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateServiceMesh(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh", "body", m.ServiceMesh); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateServiceMeshSidecar(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh_sidecar", "body", m.ServiceMeshSidecar); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t scan summary based on the context it is used
func (m *RESTScanSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanSummary) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {

			if swag.IsZero(m.Children[i]) { // not required
				return nil
			}

			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanSummary) contextValidateScanSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanSummary != nil {

		if err := m.ScanSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanSummary) UnmarshalBinary(b []byte) error {
	var res RESTScanSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
