// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTToken r e s t token
//
// swagger:model RESTToken
type RESTToken struct {

	// default password
	// Required: true
	DefaultPassword *bool `json:"default_password"`

	// email
	// Example: user@email.com
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// fullname
	// Example: admin
	// Required: true
	Fullname *string `json:"fullname"`

	// last login at
	// Required: true
	LastLoginAt *string `json:"last_login_at"`

	// last login timestamp
	// Example: 1505755716
	// Required: true
	LastLoginTimestamp *int64 `json:"last_login_timestamp"`

	// locale
	// Example: en
	// Required: true
	Locale *string `json:"locale"`

	// login count
	// Example: 1
	// Required: true
	LoginCount *uint32 `json:"login_count"`

	// modify password
	// Required: true
	ModifyPassword bool `json:"modify_password"`

	// password
	// Required: true
	Password *string `json:"password"`

	// role
	// Example: admin
	// Required: true
	Role *string `json:"role"`

	// Object key is role and value is array of domains
	RoleDomains map[string][]string `json:"role_domains,omitempty"`

	// server
	// Example: server1
	// Required: true
	Server *string `json:"server"`

	// timeout
	// Example: 300
	// Required: true
	Timeout *uint32 `json:"timeout"`

	// token
	// Example: 1d3123585728afee5c37d410a2fbad43
	// Required: true
	Token *string `json:"token"`

	// username
	// Example: admin
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this r e s t token
func (m *RESTToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTToken) validateDefaultPassword(formats strfmt.Registry) error {

	if err := validate.Required("default_password", "body", m.DefaultPassword); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateFullname(formats strfmt.Registry) error {

	if err := validate.Required("fullname", "body", m.Fullname); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateLastLoginAt(formats strfmt.Registry) error {

	if err := validate.Required("last_login_at", "body", m.LastLoginAt); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateLastLoginTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_login_timestamp", "body", m.LastLoginTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateLoginCount(formats strfmt.Registry) error {

	if err := validate.Required("login_count", "body", m.LoginCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateModifyPassword(formats strfmt.Registry) error {

	if err := validate.Required("modify_password", "body", bool(m.ModifyPassword)); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateTimeout(formats strfmt.Registry) error {

	if err := validate.Required("timeout", "body", m.Timeout); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *RESTToken) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t token based on context it is used
func (m *RESTToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTToken) UnmarshalBinary(b []byte) error {
	var res RESTToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
