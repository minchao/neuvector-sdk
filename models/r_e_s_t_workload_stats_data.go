// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadStatsData r e s t workload stats data
//
// swagger:model RESTWorkloadStatsData
type RESTWorkloadStatsData struct {

	// id
	// Example: 0fdf601ddc3ab541386aa8e36fe113593c
	// Required: true
	ID *string `json:"id"`

	// read at
	// Example: 2018-01-21T06:25:15Z
	// Required: true
	// Format: date-time
	ReadAt *strfmt.DateTime `json:"read_at"`

	// stats
	// Required: true
	Stats *RESTStats `json:"stats"`
}

// Validate validates this r e s t workload stats data
func (m *RESTWorkloadStatsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadStatsData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadStatsData) validateReadAt(formats strfmt.Registry) error {

	if err := validate.Required("read_at", "body", m.ReadAt); err != nil {
		return err
	}

	if err := validate.FormatOf("read_at", "body", "date-time", m.ReadAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadStatsData) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t workload stats data based on the context it is used
func (m *RESTWorkloadStatsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadStatsData) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadStatsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadStatsData) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadStatsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
