// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTRegistryImageSummary r e s t registry image summary
//
// swagger:model RESTRegistryImageSummary
type RESTRegistryImageSummary struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// base os
	// Example: ubuntu:16.04
	// Required: true
	BaseOs *string `json:"base_os"`

	// cvedb create time
	// Example: 2018-06-20T19:00:53Z
	// Format: date-time
	CvedbCreateTime strfmt.DateTime `json:"cvedb_create_time,omitempty"`

	// digest
	// Example: bd8ffa77cf1c910b7a90935ca4828472e1c3e303e7cd5260f13d1e09995f173a
	// Required: true
	Digest *string `json:"digest"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// envs
	// Example: ["PATH=/usr/local/sbin","GOSU_VERSION=1.12","REDIS_VERSION=6.0.2"]
	// Required: true
	Envs []string `json:"envs"`

	// high
	// Example: 0
	// Required: true
	High *int64 `json:"high"`

	// image id
	// Example: d572b7ee3511b21a2b78b8915bc03c5786ad01949704c1418624224c4cae2c5f
	// Required: true
	ImageID *string `json:"image_id"`

	// map key is string type
	// Example: {"label1":"value1","label2":"value2"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// layers
	// Example: ["layer_1","layer_2"]
	// Required: true
	Layers []string `json:"layers"`

	// medium
	// Example: 0
	// Required: true
	Medium *int64 `json:"medium"`

	// repository
	// Example: alpine
	// Required: true
	Repository *string `json:"repository"`

	// result
	// Example: success
	// Required: true
	Result *string `json:"result"`

	// run as root
	// Example: true
	// Required: true
	RunAsRoot *bool `json:"run_as_root"`

	// scanned at
	// Example: 2018-01-21T19:00:53Z
	// Required: true
	// Format: date-time
	ScannedAt *strfmt.DateTime `json:"scanned_at"`

	// scanned timestamp
	// Example: 1516561253
	// Required: true
	ScannedTimestamp *int64 `json:"scanned_timestamp"`

	// scanner version
	// Example: 1.011
	// Required: true
	ScannerVersion *string `json:"scanner_version"`

	// size
	// Example: 1
	// Required: true
	Size *int64 `json:"size"`

	// status
	// Example: scheduled
	// Required: true
	Status *string `json:"status"`

	// tag
	// Example: latest
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this r e s t registry image summary
func (m *RESTRegistryImageSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTRegistryImageSummary) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateCvedbCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CvedbCreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("cvedb_create_time", "body", "date-time", m.CvedbCreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateEnvs(formats strfmt.Registry) error {

	if err := validate.Required("envs", "body", m.Envs); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateLayers(formats strfmt.Registry) error {

	if err := validate.Required("layers", "body", m.Layers); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateMedium(formats strfmt.Registry) error {

	if err := validate.Required("medium", "body", m.Medium); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateRunAsRoot(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root", "body", m.RunAsRoot); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateScannedAt(formats strfmt.Registry) error {

	if err := validate.Required("scanned_at", "body", m.ScannedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("scanned_at", "body", "date-time", m.ScannedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateScannedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("scanned_timestamp", "body", m.ScannedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateScannerVersion(formats strfmt.Registry) error {

	if err := validate.Required("scanner_version", "body", m.ScannerVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryImageSummary) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t registry image summary based on context it is used
func (m *RESTRegistryImageSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTRegistryImageSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTRegistryImageSummary) UnmarshalBinary(b []byte) error {
	var res RESTRegistryImageSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
