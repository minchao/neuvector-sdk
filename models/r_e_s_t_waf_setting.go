// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWafSetting r e s t waf setting
//
// swagger:model RESTWafSetting
type RESTWafSetting struct {

	// action
	// Example: deny
	// Required: true
	Action *string `json:"action"`

	// cfg type
	// Required: true
	// Enum: [user_created ground]
	CfgType *string `json:"cfg_type"`

	// comment
	Comment string `json:"comment,omitempty"`

	// exist
	// Example: true
	// Required: true
	Exist *bool `json:"exist"`

	// name
	// Example: test
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this r e s t waf setting
func (m *RESTWafSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafSetting) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var rESTWafSettingTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTWafSettingTypeCfgTypePropEnum = append(rESTWafSettingTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTWafSettingCfgTypeUserCreated captures enum value "user_created"
	RESTWafSettingCfgTypeUserCreated string = "user_created"

	// RESTWafSettingCfgTypeGround captures enum value "ground"
	RESTWafSettingCfgTypeGround string = "ground"
)

// prop value enum
func (m *RESTWafSetting) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTWafSettingTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTWafSetting) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSetting) validateExist(formats strfmt.Registry) error {

	if err := validate.Required("exist", "body", m.Exist); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSetting) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t waf setting based on context it is used
func (m *RESTWafSetting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTWafSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWafSetting) UnmarshalBinary(b []byte) error {
	var res RESTWafSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
