// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAwsResDetail r e s t aws res detail
//
// swagger:model RESTAwsResDetail
type RESTAwsResDetail struct {

	// permission level
	// Example: Low
	// Required: true
	PermissionLevel *string `json:"permission_level"`

	// permission state
	// Required: true
	PermissionState *string `json:"permission_state"`

	// resource
	// Example: DescribeChangeSet
	// Required: true
	Resource *string `json:"resource"`
}

// Validate validates this r e s t aws res detail
func (m *RESTAwsResDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissionLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAwsResDetail) validatePermissionLevel(formats strfmt.Registry) error {

	if err := validate.Required("permission_level", "body", m.PermissionLevel); err != nil {
		return err
	}

	return nil
}

func (m *RESTAwsResDetail) validatePermissionState(formats strfmt.Registry) error {

	if err := validate.Required("permission_state", "body", m.PermissionState); err != nil {
		return err
	}

	return nil
}

func (m *RESTAwsResDetail) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t aws res detail based on context it is used
func (m *RESTAwsResDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTAwsResDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAwsResDetail) UnmarshalBinary(b []byte) error {
	var res RESTAwsResDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
