// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTHost r e s t host
//
// swagger:model RESTHost
type RESTHost struct {

	// map key is string type
	// Example: {"kubeadm.alpha.kubernetes.io/cri-socket":"/var/run/dockershim.sock"}
	// Required: true
	Annotations map[string]string `json:"annotations"`

	// cap docker bench
	// Example: true
	// Required: true
	CapDockerBench *bool `json:"cap_docker_bench"`

	// cap kube bench
	// Example: true
	// Required: true
	CapKubeBench *bool `json:"cap_kube_bench"`

	// cgroup version
	// Example: 1
	// Required: true
	CgroupVersion *int64 `json:"cgroup_version"`

	// containers
	// Example: 107
	// Required: true
	Containers *int64 `json:"containers"`

	// cpus
	// Example: 1
	// Required: true
	Cpus *int64 `json:"cpus"`

	// docker bench status
	// Example: running
	DockerBenchStatus string `json:"docker_bench_status,omitempty"`

	// id
	// Example: 2AU7:TIEN:O5KX:QK56:LFQP:IJSV:FXBN:QJV7:XPAH
	// Required: true
	ID *string `json:"id"`

	// map key is string type like "eth0"
	// Required: true
	Interfaces map[string][]RESTIPAddr `json:"interfaces"`

	// kernel
	// Example: 3.19.0-25-generic
	// Required: true
	Kernel *string `json:"kernel"`

	// kube bench status
	// Example: scheduled
	KubeBenchStatus string `json:"kube_bench_status,omitempty"`

	// map key is string type
	// Example: {"beta.kubernetes.io/os":"linux"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// memory
	// Example: 2089816064
	// Required: true
	Memory *int64 `json:"memory"`

	// name
	// Example: ubuntu64
	// Required: true
	Name *string `json:"name"`

	// os
	// Example: Ubuntu 14.04.3 LTS
	// Required: true
	Os *string `json:"os"`

	// platform
	// Example: Docker
	// Required: true
	Platform *string `json:"platform"`

	// policy mode
	// Example: Discover
	// Required: true
	PolicyMode *string `json:"policy_mode"`

	// profile mode
	// Example: Discover
	// Required: true
	ProfileMode *string `json:"profile_mode"`

	// runtime
	// Example: docker
	// Required: true
	Runtime *string `json:"runtime"`

	// runtime api version
	// Example: 1.22
	// Required: true
	RuntimeAPIVersion *string `json:"runtime_api_version"`

	// runtime version
	// Example: 1.10.2
	// Required: true
	RuntimeVersion *string `json:"runtime_version"`

	// scan summary
	// Required: true
	ScanSummary *RESTScanBrief `json:"scan_summary"`

	// state
	// Required: true
	State *string `json:"state"`

	// storage driver
	// Example: aufs
	// Required: true
	StorageDriver *string `json:"storage_driver"`
}

// Validate validates this r e s t host
func (m *RESTHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapDockerBench(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapKubeBench(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCgroupVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKernel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageDriver(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTHost) validateAnnotations(formats strfmt.Registry) error {

	if err := validate.Required("annotations", "body", m.Annotations); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateCapDockerBench(formats strfmt.Registry) error {

	if err := validate.Required("cap_docker_bench", "body", m.CapDockerBench); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateCapKubeBench(formats strfmt.Registry) error {

	if err := validate.Required("cap_kube_bench", "body", m.CapKubeBench); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateCgroupVersion(formats strfmt.Registry) error {

	if err := validate.Required("cgroup_version", "body", m.CgroupVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateContainers(formats strfmt.Registry) error {

	if err := validate.Required("containers", "body", m.Containers); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateCpus(formats strfmt.Registry) error {

	if err := validate.Required("cpus", "body", m.Cpus); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		if err := validate.Required("interfaces"+"."+k, "body", m.Interfaces[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if err := m.Interfaces[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTHost) validateKernel(formats strfmt.Registry) error {

	if err := validate.Required("kernel", "body", m.Kernel); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validatePolicyMode(formats strfmt.Registry) error {

	if err := validate.Required("policy_mode", "body", m.PolicyMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateProfileMode(formats strfmt.Registry) error {

	if err := validate.Required("profile_mode", "body", m.ProfileMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateRuntime(formats strfmt.Registry) error {

	if err := validate.Required("runtime", "body", m.Runtime); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateRuntimeAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("runtime_api_version", "body", m.RuntimeAPIVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateRuntimeVersion(formats strfmt.Registry) error {

	if err := validate.Required("runtime_version", "body", m.RuntimeVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateScanSummary(formats strfmt.Registry) error {

	if err := validate.Required("scan_summary", "body", m.ScanSummary); err != nil {
		return err
	}

	if m.ScanSummary != nil {
		if err := m.ScanSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

func (m *RESTHost) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *RESTHost) validateStorageDriver(formats strfmt.Registry) error {

	if err := validate.Required("storage_driver", "body", m.StorageDriver); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t host based on the context it is used
func (m *RESTHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTHost) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if swag.IsZero(m.Interfaces[k][i]) { // not required
				return nil
			}

			if err := m.Interfaces[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTHost) contextValidateScanSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanSummary != nil {

		if err := m.ScanSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTHost) UnmarshalBinary(b []byte) error {
	var res RESTHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
