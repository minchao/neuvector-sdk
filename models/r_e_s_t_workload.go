// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkload r e s t workload
//
// swagger:model RESTWorkload
type RESTWorkload struct {

	// applications
	// Required: true
	Applications []string `json:"applications"`

	// author
	// Required: true
	Author *string `json:"author"`

	// cap change mode
	// Example: true
	// Required: true
	CapChangeMode *bool `json:"cap_change_mode"`

	// cap quarantine
	// Example: false
	// Required: true
	CapQuarantine *bool `json:"cap_quarantine"`

	// cap sniff
	// Example: true
	// Required: true
	CapSniff *bool `json:"cap_sniff"`

	// children
	// Required: true
	Children []*RESTWorkload `json:"children"`

	// cpus
	// Required: true
	Cpus *string `json:"cpus"`

	// created at
	// Example: 2018-01-18T00:44:02Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// display name
	// Example: calico-node-mzhtk
	// Required: true
	DisplayName *string `json:"display_name"`

	// domain
	// Example: istio-system
	// Required: true
	Domain *string `json:"domain"`

	// enforcer id
	// Example: 002a4f71d9dbdb40db81c31484ac25564fe80574dfbe
	// Required: true
	EnforcerID *string `json:"enforcer_id"`

	// enforcer name
	// Example: allinone
	// Required: true
	EnforcerName *string `json:"enforcer_name"`

	// exit code
	// Example: 0
	// Required: true
	ExitCode *int64 `json:"exit_code"`

	// finished at
	// Example: 2018-01-18T01:20:02Z
	// Required: true
	// Format: date-time
	FinishedAt *strfmt.DateTime `json:"finished_at"`

	// host id
	// Example: GRSW:3RCY:YL6O:TIGT:666B:OW22:XYQF:YHGI:JB3L
	// Required: true
	HostID *string `json:"host_id"`

	// host name
	// Example: ubuntu1604-k8worker1-calico
	// Required: true
	HostName *string `json:"host_name"`

	// id
	// Example: 7304e72fd093155c4cbcd65d07375329b2db82cc679
	// Required: true
	ID *string `json:"id"`

	// image
	// Example: istio/mixer:1.4.3
	// Required: true
	Image *string `json:"image"`

	// image id
	// Example: 5b7b52f8e75898efe2b7b258322e623c280d856b9f5a527fbbdc25689adf6e95
	// Required: true
	ImageID *string `json:"image_id"`

	// map key is string type like "eth0"
	// Required: true
	Interfaces map[string][]RESTIPAddr `json:"interfaces"`

	// map key is string type
	// Example: {"io.kubernetes.pod.name":"calico-node-mzhtk"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// memory limit
	// Example: 0
	// Required: true
	MemoryLimit *int64 `json:"memory_limit"`

	// name
	// Example: k8s_POD.d86c_calico-node-mzhtk_kube-system_0050565a_365c13d
	// Required: true
	Name *string `json:"name"`

	// network mode
	// Example: host
	// Required: true
	NetworkMode *string `json:"network_mode"`

	// platform role
	// Example: core
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// pod name
	// Example: istio-policy-5cdbc47674-t67p4
	// Required: true
	PodName *string `json:"pod_name"`

	// policy mode
	// Example: Discover
	PolicyMode string `json:"policy_mode,omitempty"`

	// ports
	// Required: true
	Ports []*RESTWorkloadPorts `json:"ports"`

	// privileged
	// Example: false
	// Required: true
	Privileged *bool `json:"privileged"`

	// quarantine reason
	QuarantineReason string `json:"quarantine_reason,omitempty"`

	// run as root
	// Example: false
	// Required: true
	RunAsRoot *bool `json:"run_as_root"`

	// running
	// Example: false
	// Required: true
	Running *bool `json:"running"`

	// scan summary
	// Required: true
	ScanSummary *RESTScanBrief `json:"scan_summary"`

	// secured at
	// Example: 2018-01-18T01:20:02Z
	// Required: true
	// Format: date-time
	SecuredAt *strfmt.DateTime `json:"secured_at"`

	// service
	// Example: kafka.zookeeper
	// Required: true
	Service *string `json:"service"`

	// service account
	// Required: true
	ServiceAccount *string `json:"service_account"`

	// service group
	// Example: nv.calico
	// Required: true
	ServiceGroup *string `json:"service_group"`

	// service mesh
	// Example: false
	// Required: true
	ServiceMesh *bool `json:"service_mesh"`

	// service mesh sidecar
	// Example: false
	// Required: true
	ServiceMeshSidecar *bool `json:"service_mesh_sidecar"`

	// share ns with
	// Example: cc0709d522749203042e89dba28bf6924a4b0d360648
	ShareNsWith string `json:"share_ns_with,omitempty"`

	// started at
	// Example: 2018-01-18T00:44:02Z
	// Required: true
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at"`

	// state
	// Example: exit
	// Required: true
	State *string `json:"state"`
}

// Validate validates this r e s t workload
func (m *RESTWorkload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapQuarantine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapSniff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecuredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMesh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMeshSidecar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkload) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateCapChangeMode(formats strfmt.Registry) error {

	if err := validate.Required("cap_change_mode", "body", m.CapChangeMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateCapQuarantine(formats strfmt.Registry) error {

	if err := validate.Required("cap_quarantine", "body", m.CapQuarantine); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateCapSniff(formats strfmt.Registry) error {

	if err := validate.Required("cap_sniff", "body", m.CapSniff); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkload) validateCpus(formats strfmt.Registry) error {

	if err := validate.Required("cpus", "body", m.Cpus); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateEnforcerID(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_id", "body", m.EnforcerID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateEnforcerName(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_name", "body", m.EnforcerName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateExitCode(formats strfmt.Registry) error {

	if err := validate.Required("exit_code", "body", m.ExitCode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("finished_at", "body", m.FinishedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		if err := validate.Required("interfaces"+"."+k, "body", m.Interfaces[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if err := m.Interfaces[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTWorkload) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateMemoryLimit(formats strfmt.Registry) error {

	if err := validate.Required("memory_limit", "body", m.MemoryLimit); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateNetworkMode(formats strfmt.Registry) error {

	if err := validate.Required("network_mode", "body", m.NetworkMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkload) validatePrivileged(formats strfmt.Registry) error {

	if err := validate.Required("privileged", "body", m.Privileged); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateRunAsRoot(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root", "body", m.RunAsRoot); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateRunning(formats strfmt.Registry) error {

	if err := validate.Required("running", "body", m.Running); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateScanSummary(formats strfmt.Registry) error {

	if err := validate.Required("scan_summary", "body", m.ScanSummary); err != nil {
		return err
	}

	if m.ScanSummary != nil {
		if err := m.ScanSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkload) validateSecuredAt(formats strfmt.Registry) error {

	if err := validate.Required("secured_at", "body", m.SecuredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("secured_at", "body", "date-time", m.SecuredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateServiceAccount(formats strfmt.Registry) error {

	if err := validate.Required("service_account", "body", m.ServiceAccount); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateServiceGroup(formats strfmt.Registry) error {

	if err := validate.Required("service_group", "body", m.ServiceGroup); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateServiceMesh(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh", "body", m.ServiceMesh); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateServiceMeshSidecar(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh_sidecar", "body", m.ServiceMeshSidecar); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("started_at", "body", m.StartedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkload) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t workload based on the context it is used
func (m *RESTWorkload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkload) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {

			if swag.IsZero(m.Children[i]) { // not required
				return nil
			}

			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkload) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if swag.IsZero(m.Interfaces[k][i]) { // not required
				return nil
			}

			if err := m.Interfaces[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTWorkload) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {

			if swag.IsZero(m.Ports[i]) { // not required
				return nil
			}

			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkload) contextValidateScanSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanSummary != nil {

		if err := m.ScanSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkload) UnmarshalBinary(b []byte) error {
	var res RESTWorkload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
