// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTApikeysData r e s t apikeys data
//
// swagger:model RESTApikeysData
type RESTApikeysData struct {

	// apikeys
	// Required: true
	Apikeys []*RESTApikey `json:"apikeys"`

	// domain roles
	// Example: ["role1","role2"]
	// Required: true
	DomainRoles []string `json:"domain_roles"`

	// global roles
	// Example: ["admin","reader"]
	// Required: true
	GlobalRoles []string `json:"global_roles"`
}

// Validate validates this r e s t apikeys data
func (m *RESTApikeysData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApikeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTApikeysData) validateApikeys(formats strfmt.Registry) error {

	if err := validate.Required("apikeys", "body", m.Apikeys); err != nil {
		return err
	}

	for i := 0; i < len(m.Apikeys); i++ {
		if swag.IsZero(m.Apikeys[i]) { // not required
			continue
		}

		if m.Apikeys[i] != nil {
			if err := m.Apikeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apikeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apikeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTApikeysData) validateDomainRoles(formats strfmt.Registry) error {

	if err := validate.Required("domain_roles", "body", m.DomainRoles); err != nil {
		return err
	}

	return nil
}

func (m *RESTApikeysData) validateGlobalRoles(formats strfmt.Registry) error {

	if err := validate.Required("global_roles", "body", m.GlobalRoles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t apikeys data based on the context it is used
func (m *RESTApikeysData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApikeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTApikeysData) contextValidateApikeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Apikeys); i++ {

		if m.Apikeys[i] != nil {

			if swag.IsZero(m.Apikeys[i]) { // not required
				return nil
			}

			if err := m.Apikeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apikeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apikeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTApikeysData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTApikeysData) UnmarshalBinary(b []byte) error {
	var res RESTApikeysData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
