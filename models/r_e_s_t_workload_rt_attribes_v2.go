// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadRtAttribesV2 r e s t workload rt attribes v2
//
// swagger:model RESTWorkloadRtAttribesV2
type RESTWorkloadRtAttribesV2 struct {

	// applications
	// Required: true
	Applications []string `json:"applications"`

	// cpus
	// Required: true
	Cpus *string `json:"cpus"`

	// map key is string type like "eth0"
	// Required: true
	Interfaces map[string][]RESTIPAddr `json:"interfaces"`

	// map key is string type
	// Example: {"io.kubernetes.pod.name":"calico-node-mzhtk"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// memory limit
	// Example: 0
	// Required: true
	MemoryLimit *int64 `json:"memory_limit"`

	// network mode
	// Example: host
	// Required: true
	NetworkMode *string `json:"network_mode"`

	// pod name
	// Example: istio-policy-5cdbc47674-t67p4
	// Required: true
	PodName *string `json:"pod_name"`

	// ports
	// Required: true
	Ports []*RESTWorkloadPorts `json:"ports"`

	// privileged
	// Example: false
	// Required: true
	Privileged *bool `json:"privileged"`

	// run as root
	// Example: false
	// Required: true
	RunAsRoot *bool `json:"run_as_root"`

	// service account
	// Required: true
	ServiceAccount *string `json:"service_account"`

	// share ns with
	// Example: cc0709d522749203042e89dba28bf6924a4b0d360648
	ShareNsWith string `json:"share_ns_with,omitempty"`
}

// Validate validates this r e s t workload rt attribes v2
func (m *RESTWorkloadRtAttribesV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateApplications(formats strfmt.Registry) error {

	if err := validate.Required("applications", "body", m.Applications); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateCpus(formats strfmt.Registry) error {

	if err := validate.Required("cpus", "body", m.Cpus); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		if err := validate.Required("interfaces"+"."+k, "body", m.Interfaces[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if err := m.Interfaces[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateMemoryLimit(formats strfmt.Registry) error {

	if err := validate.Required("memory_limit", "body", m.MemoryLimit); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateNetworkMode(formats strfmt.Registry) error {

	if err := validate.Required("network_mode", "body", m.NetworkMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validatePrivileged(formats strfmt.Registry) error {

	if err := validate.Required("privileged", "body", m.Privileged); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateRunAsRoot(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root", "body", m.RunAsRoot); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) validateServiceAccount(formats strfmt.Registry) error {

	if err := validate.Required("service_account", "body", m.ServiceAccount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t workload rt attribes v2 based on the context it is used
func (m *RESTWorkloadRtAttribesV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadRtAttribesV2) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for k := range m.Interfaces {

		for i := 0; i < len(m.Interfaces[k]); i++ {

			if swag.IsZero(m.Interfaces[k][i]) { // not required
				return nil
			}

			if err := m.Interfaces[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTWorkloadRtAttribesV2) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {

			if swag.IsZero(m.Ports[i]) { // not required
				return nil
			}

			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadRtAttribesV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadRtAttribesV2) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadRtAttribesV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
