// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWafSensor r e s t waf sensor
//
// swagger:model RESTWafSensor
type RESTWafSensor struct {

	// cfg type
	// Required: true
	// Enum: [user_created ground]
	CfgType *string `json:"cfg_type"`

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// groups
	// Required: true
	Groups []string `json:"groups"`

	// name
	// Example: test4321546242574254672462572452615362453
	// Required: true
	Name *string `json:"name"`

	// predefine
	// Example: false
	// Required: true
	Predefine *bool `json:"predefine"`

	// rules
	// Required: true
	Rules []*RESTWafRule `json:"rules"`
}

// Validate validates this r e s t waf sensor
func (m *RESTWafSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredefine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rESTWafSensorTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTWafSensorTypeCfgTypePropEnum = append(rESTWafSensorTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTWafSensorCfgTypeUserCreated captures enum value "user_created"
	RESTWafSensorCfgTypeUserCreated string = "user_created"

	// RESTWafSensorCfgTypeGround captures enum value "ground"
	RESTWafSensorCfgTypeGround string = "ground"
)

// prop value enum
func (m *RESTWafSensor) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTWafSensorTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTWafSensor) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensor) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensor) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensor) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensor) validatePredefine(formats strfmt.Registry) error {

	if err := validate.Required("predefine", "body", m.Predefine); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensor) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t waf sensor based on the context it is used
func (m *RESTWafSensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafSensor) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWafSensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWafSensor) UnmarshalBinary(b []byte) error {
	var res RESTWafSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
