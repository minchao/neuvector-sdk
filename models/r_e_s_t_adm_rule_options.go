// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmRuleOptions r e s t adm rule options
//
// swagger:model RESTAdmRuleOptions
type RESTAdmRuleOptions struct {

	// rule options
	// Required: true
	RuleOptions *RESTAdmRuleOptionsRuleOptions `json:"rule_options"`
}

// Validate validates this r e s t adm rule options
func (m *RESTAdmRuleOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleOptions) validateRuleOptions(formats strfmt.Registry) error {

	if err := validate.Required("rule_options", "body", m.RuleOptions); err != nil {
		return err
	}

	if m.RuleOptions != nil {
		if err := m.RuleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t adm rule options based on the context it is used
func (m *RESTAdmRuleOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleOptions) contextValidateRuleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleOptions != nil {

		if err := m.RuleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmRuleOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmRuleOptions) UnmarshalBinary(b []byte) error {
	var res RESTAdmRuleOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTAdmRuleOptionsRuleOptions r e s t adm rule options rule options
//
// swagger:model RESTAdmRuleOptionsRuleOptions
type RESTAdmRuleOptionsRuleOptions struct {

	// options
	Options *RESTAdmissionRuleOption `json:"options,omitempty"`

	// rule
	// Example: criterion_name
	Rule string `json:"rule,omitempty"`
}

// Validate validates this r e s t adm rule options rule options
func (m *RESTAdmRuleOptionsRuleOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleOptionsRuleOptions) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_options" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_options" + "." + "options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t adm rule options rule options based on the context it is used
func (m *RESTAdmRuleOptionsRuleOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleOptionsRuleOptions) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_options" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_options" + "." + "options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmRuleOptionsRuleOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmRuleOptionsRuleOptions) UnmarshalBinary(b []byte) error {
	var res RESTAdmRuleOptionsRuleOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
