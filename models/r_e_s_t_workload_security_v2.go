// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadSecurityV2 r e s t workload security v2
//
// swagger:model RESTWorkloadSecurityV2
type RESTWorkloadSecurityV2 struct {

	// baseline profile
	// Required: true
	BaselineProfile *string `json:"baseline_profile"`

	// cap change mode
	// Example: true
	// Required: true
	CapChangeMode *bool `json:"cap_change_mode"`

	// cap quarantine
	// Example: true
	// Required: true
	CapQuarantine *bool `json:"cap_quarantine"`

	// cap sniff
	// Example: true
	// Required: true
	CapSniff *bool `json:"cap_sniff"`

	// policy mode
	// Example: Discover
	// Required: true
	PolicyMode *string `json:"policy_mode"`

	// profile mode
	// Example: Discover
	// Required: true
	ProfileMode *string `json:"profile_mode"`

	// quarantine reason
	// Example: violation
	QuarantineReason string `json:"quarantine_reason,omitempty"`

	// scan summary
	// Required: true
	ScanSummary *RESTScanBrief `json:"scan_summary"`

	// service mesh
	// Example: true
	// Required: true
	ServiceMesh *bool `json:"service_mesh"`

	// service mesh sidecar
	// Example: true
	// Required: true
	ServiceMeshSidecar *bool `json:"service_mesh_sidecar"`
}

// Validate validates this r e s t workload security v2
func (m *RESTWorkloadSecurityV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaselineProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapQuarantine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapSniff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMesh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMeshSidecar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadSecurityV2) validateBaselineProfile(formats strfmt.Registry) error {

	if err := validate.Required("baseline_profile", "body", m.BaselineProfile); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateCapChangeMode(formats strfmt.Registry) error {

	if err := validate.Required("cap_change_mode", "body", m.CapChangeMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateCapQuarantine(formats strfmt.Registry) error {

	if err := validate.Required("cap_quarantine", "body", m.CapQuarantine); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateCapSniff(formats strfmt.Registry) error {

	if err := validate.Required("cap_sniff", "body", m.CapSniff); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validatePolicyMode(formats strfmt.Registry) error {

	if err := validate.Required("policy_mode", "body", m.PolicyMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateProfileMode(formats strfmt.Registry) error {

	if err := validate.Required("profile_mode", "body", m.ProfileMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateScanSummary(formats strfmt.Registry) error {

	if err := validate.Required("scan_summary", "body", m.ScanSummary); err != nil {
		return err
	}

	if m.ScanSummary != nil {
		if err := m.ScanSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateServiceMesh(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh", "body", m.ServiceMesh); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadSecurityV2) validateServiceMeshSidecar(formats strfmt.Registry) error {

	if err := validate.Required("service_mesh_sidecar", "body", m.ServiceMeshSidecar); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t workload security v2 based on the context it is used
func (m *RESTWorkloadSecurityV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadSecurityV2) contextValidateScanSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanSummary != nil {

		if err := m.ScanSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadSecurityV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadSecurityV2) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadSecurityV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
