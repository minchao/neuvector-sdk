// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanAwsFuncReport r e s t scan aws func report
//
// swagger:model RESTScanAwsFuncReport
type RESTScanAwsFuncReport struct {

	// allowed resources
	// Required: true
	AllowedResources *RESTScanAwsFuncReportAllowedResources `json:"allowed_resources"`

	// function id
	// Example: arn:aws:lambda:us-west-1:831010404316:function:nvnodejs
	// Required: true
	FunctionID *string `json:"function_id"`

	// nv sec id
	// Required: true
	NvSecID *string `json:"nv_sec_id"`

	// req resources
	// Required: true
	ReqResources *RESTScanAwsFuncReportReqResources `json:"req_resources"`

	// scan result
	// Required: true
	ScanResult *RESTScanAwsFuncDetail `json:"scan_result"`

	// version
	// Example: 1
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this r e s t scan aws func report
func (m *RESTScanAwsFuncReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvSecID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReqResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReport) validateAllowedResources(formats strfmt.Registry) error {

	if err := validate.Required("allowed_resources", "body", m.AllowedResources); err != nil {
		return err
	}

	if m.AllowedResources != nil {
		if err := m.AllowedResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_resources")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanAwsFuncReport) validateFunctionID(formats strfmt.Registry) error {

	if err := validate.Required("function_id", "body", m.FunctionID); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanAwsFuncReport) validateNvSecID(formats strfmt.Registry) error {

	if err := validate.Required("nv_sec_id", "body", m.NvSecID); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanAwsFuncReport) validateReqResources(formats strfmt.Registry) error {

	if err := validate.Required("req_resources", "body", m.ReqResources); err != nil {
		return err
	}

	if m.ReqResources != nil {
		if err := m.ReqResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("req_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("req_resources")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanAwsFuncReport) validateScanResult(formats strfmt.Registry) error {

	if err := validate.Required("scan_result", "body", m.ScanResult); err != nil {
		return err
	}

	if m.ScanResult != nil {
		if err := m.ScanResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_result")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanAwsFuncReport) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t scan aws func report based on the context it is used
func (m *RESTScanAwsFuncReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReqResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReport) contextValidateAllowedResources(ctx context.Context, formats strfmt.Registry) error {

	if m.AllowedResources != nil {

		if err := m.AllowedResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_resources")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanAwsFuncReport) contextValidateReqResources(ctx context.Context, formats strfmt.Registry) error {

	if m.ReqResources != nil {

		if err := m.ReqResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("req_resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("req_resources")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanAwsFuncReport) contextValidateScanResult(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanResult != nil {

		if err := m.ScanResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanAwsFuncReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanAwsFuncReport) UnmarshalBinary(b []byte) error {
	var res RESTScanAwsFuncReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTScanAwsFuncReportAllowedResources r e s t scan aws func report allowed resources
//
// swagger:model RESTScanAwsFuncReportAllowedResources
type RESTScanAwsFuncReportAllowedResources struct {

	// key
	// Example: AWSLambdaFullAccess
	Key string `json:"key,omitempty"`

	// value
	Value *RESTAwsFuncPermission `json:"value,omitempty"`
}

// Validate validates this r e s t scan aws func report allowed resources
func (m *RESTScanAwsFuncReportAllowedResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReportAllowedResources) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_resources" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_resources" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t scan aws func report allowed resources based on the context it is used
func (m *RESTScanAwsFuncReportAllowedResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReportAllowedResources) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {

		if swag.IsZero(m.Value) { // not required
			return nil
		}

		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_resources" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_resources" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanAwsFuncReportAllowedResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanAwsFuncReportAllowedResources) UnmarshalBinary(b []byte) error {
	var res RESTScanAwsFuncReportAllowedResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTScanAwsFuncReportReqResources r e s t scan aws func report req resources
//
// swagger:model RESTScanAwsFuncReportReqResources
type RESTScanAwsFuncReportReqResources struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value *RESTAwsFuncPermission `json:"value,omitempty"`
}

// Validate validates this r e s t scan aws func report req resources
func (m *RESTScanAwsFuncReportReqResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReportReqResources) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("req_resources" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("req_resources" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t scan aws func report req resources based on the context it is used
func (m *RESTScanAwsFuncReportReqResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAwsFuncReportReqResources) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {

		if swag.IsZero(m.Value) { // not required
			return nil
		}

		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("req_resources" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("req_resources" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanAwsFuncReportReqResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanAwsFuncReportReqResources) UnmarshalBinary(b []byte) error {
	var res RESTScanAwsFuncReportReqResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
