// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RESTServerLDAPConfig r e s t server l d a p config
//
// swagger:model RESTServerLDAPConfig
type RESTServerLDAPConfig struct {

	// base dn
	// Example: dc=win,dc=nv,dc=com
	BaseDn string `json:"base_dn,omitempty"`

	// bind dn
	// Example: administrator
	BindDn string `json:"bind_dn,omitempty"`

	// bind password
	// Example: 2222
	BindPassword string `json:"bind_password,omitempty"`

	// default role
	// Example: admin
	DefaultRole string `json:"default_role,omitempty"`

	// directory
	Directory string `json:"directory,omitempty"`

	// enable
	// Example: true
	Enable bool `json:"enable,omitempty"`

	// group mapped roles
	GroupMappedRoles []*GroupRoleMapping `json:"group_mapped_roles"`

	// group member attr
	GroupMemberAttr string `json:"group_member_attr,omitempty"`

	// hostname
	// Example: 1.2.3.4
	Hostname string `json:"hostname,omitempty"`

	// port
	// Example: 1234
	Port uint16 `json:"port,omitempty"`

	// role groups
	RoleGroups *RESTServerLDAPConfigRoleGroups `json:"role_groups,omitempty"`

	// ssl
	// Example: true
	Ssl bool `json:"ssl,omitempty"`

	// username attr
	UsernameAttr string `json:"username_attr,omitempty"`
}

// Validate validates this r e s t server l d a p config
func (m *RESTServerLDAPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupMappedRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTServerLDAPConfig) validateGroupMappedRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupMappedRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupMappedRoles); i++ {
		if swag.IsZero(m.GroupMappedRoles[i]) { // not required
			continue
		}

		if m.GroupMappedRoles[i] != nil {
			if err := m.GroupMappedRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group_mapped_roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("group_mapped_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTServerLDAPConfig) validateRoleGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleGroups) { // not required
		return nil
	}

	if m.RoleGroups != nil {
		if err := m.RoleGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_groups")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t server l d a p config based on the context it is used
func (m *RESTServerLDAPConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupMappedRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTServerLDAPConfig) contextValidateGroupMappedRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupMappedRoles); i++ {

		if m.GroupMappedRoles[i] != nil {

			if swag.IsZero(m.GroupMappedRoles[i]) { // not required
				return nil
			}

			if err := m.GroupMappedRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group_mapped_roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("group_mapped_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTServerLDAPConfig) contextValidateRoleGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleGroups != nil {

		if swag.IsZero(m.RoleGroups) { // not required
			return nil
		}

		if err := m.RoleGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_groups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTServerLDAPConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTServerLDAPConfig) UnmarshalBinary(b []byte) error {
	var res RESTServerLDAPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTServerLDAPConfigRoleGroups r e s t server l d a p config role groups
//
// swagger:model RESTServerLDAPConfigRoleGroups
type RESTServerLDAPConfigRoleGroups struct {

	// groups
	// Example: ["admin1","admin2"]
	Groups []string `json:"groups"`

	// role
	// Example: admin
	Role string `json:"role,omitempty"`
}

// Validate validates this r e s t server l d a p config role groups
func (m *RESTServerLDAPConfigRoleGroups) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this r e s t server l d a p config role groups based on context it is used
func (m *RESTServerLDAPConfigRoleGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTServerLDAPConfigRoleGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTServerLDAPConfigRoleGroups) UnmarshalBinary(b []byte) error {
	var res RESTServerLDAPConfigRoleGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
