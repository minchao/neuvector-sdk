// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTProcessProfileConfig r e s t process profile config
//
// swagger:model RESTProcessProfileConfig
type RESTProcessProfileConfig struct {

	// alert disabled
	// Example: false
	AlertDisabled bool `json:"alert_disabled,omitempty"`

	// group
	// Example: myGroup
	// Required: true
	Group *string `json:"group"`

	// hash enabled
	// Example: true
	HashEnabled bool `json:"hash_enabled,omitempty"`

	// process change list
	ProcessChangeList []*RESTProcessProfileEntryConfig `json:"process_change_list"`

	// process delete list
	ProcessDeleteList []*RESTProcessProfileEntryConfig `json:"process_delete_list"`

	// process replace list
	ProcessReplaceList []*RESTProcessProfileEntryConfig `json:"process_replace_list"`
}

// Validate validates this r e s t process profile config
func (m *RESTProcessProfileConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessChangeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessDeleteList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessReplaceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTProcessProfileConfig) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *RESTProcessProfileConfig) validateProcessChangeList(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessChangeList) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessChangeList); i++ {
		if swag.IsZero(m.ProcessChangeList[i]) { // not required
			continue
		}

		if m.ProcessChangeList[i] != nil {
			if err := m.ProcessChangeList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_change_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_change_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTProcessProfileConfig) validateProcessDeleteList(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessDeleteList) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessDeleteList); i++ {
		if swag.IsZero(m.ProcessDeleteList[i]) { // not required
			continue
		}

		if m.ProcessDeleteList[i] != nil {
			if err := m.ProcessDeleteList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_delete_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_delete_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTProcessProfileConfig) validateProcessReplaceList(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessReplaceList) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessReplaceList); i++ {
		if swag.IsZero(m.ProcessReplaceList[i]) { // not required
			continue
		}

		if m.ProcessReplaceList[i] != nil {
			if err := m.ProcessReplaceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_replace_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_replace_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t process profile config based on the context it is used
func (m *RESTProcessProfileConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProcessChangeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessDeleteList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessReplaceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTProcessProfileConfig) contextValidateProcessChangeList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessChangeList); i++ {

		if m.ProcessChangeList[i] != nil {

			if swag.IsZero(m.ProcessChangeList[i]) { // not required
				return nil
			}

			if err := m.ProcessChangeList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_change_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_change_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTProcessProfileConfig) contextValidateProcessDeleteList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessDeleteList); i++ {

		if m.ProcessDeleteList[i] != nil {

			if swag.IsZero(m.ProcessDeleteList[i]) { // not required
				return nil
			}

			if err := m.ProcessDeleteList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_delete_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_delete_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTProcessProfileConfig) contextValidateProcessReplaceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessReplaceList); i++ {

		if m.ProcessReplaceList[i] != nil {

			if swag.IsZero(m.ProcessReplaceList[i]) { // not required
				return nil
			}

			if err := m.ProcessReplaceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_replace_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_replace_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTProcessProfileConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTProcessProfileConfig) UnmarshalBinary(b []byte) error {
	var res RESTProcessProfileConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
