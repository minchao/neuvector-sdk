// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWafSensorConfig r e s t waf sensor config
//
// swagger:model RESTWafSensorConfig
type RESTWafSensorConfig struct {

	// change
	Change []*RESTWafRule `json:"change"`

	// comment
	Comment string `json:"comment,omitempty"`

	// delete
	Delete []*RESTWafRule `json:"delete"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rules
	Rules []*RESTWafRule `json:"rules"`
}

// Validate validates this r e s t waf sensor config
func (m *RESTWafSensorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafSensorConfig) validateChange(formats strfmt.Registry) error {
	if swag.IsZero(m.Change) { // not required
		return nil
	}

	for i := 0; i < len(m.Change); i++ {
		if swag.IsZero(m.Change[i]) { // not required
			continue
		}

		if m.Change[i] != nil {
			if err := m.Change[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("change" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("change" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafSensorConfig) validateDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.Delete) { // not required
		return nil
	}

	for i := 0; i < len(m.Delete); i++ {
		if swag.IsZero(m.Delete[i]) { // not required
			continue
		}

		if m.Delete[i] != nil {
			if err := m.Delete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafSensorConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTWafSensorConfig) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t waf sensor config based on the context it is used
func (m *RESTWafSensorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWafSensorConfig) contextValidateChange(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Change); i++ {

		if m.Change[i] != nil {

			if swag.IsZero(m.Change[i]) { // not required
				return nil
			}

			if err := m.Change[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("change" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("change" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafSensorConfig) contextValidateDelete(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Delete); i++ {

		if m.Delete[i] != nil {

			if swag.IsZero(m.Delete[i]) { // not required
				return nil
			}

			if err := m.Delete[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWafSensorConfig) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWafSensorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWafSensorConfig) UnmarshalBinary(b []byte) error {
	var res RESTWafSensorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
