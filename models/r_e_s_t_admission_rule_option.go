// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmissionRuleOption r e s t admission rule option
//
// swagger:model RESTAdmissionRuleOption
type RESTAdmissionRuleOption struct {

	// match src
	// Example: yaml
	MatchSrc string `json:"match_src,omitempty"`

	// name
	// Example: group
	// Required: true
	Name *string `json:"name"`

	// ops
	// Example: ["containsAny","containsAll","="]
	// Required: true
	Ops []string `json:"ops"`

	// sub options
	SubOptions *RESTAdmissionRuleOptionSubOptions `json:"sub_options,omitempty"`

	// values
	// Example: ["","true","false"]
	Values []string `json:"values"`
}

// Validate validates this r e s t admission rule option
func (m *RESTAdmissionRuleOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleOption) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRuleOption) validateOps(formats strfmt.Registry) error {

	if err := validate.Required("ops", "body", m.Ops); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionRuleOption) validateSubOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SubOptions) { // not required
		return nil
	}

	if m.SubOptions != nil {
		if err := m.SubOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sub_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t admission rule option based on the context it is used
func (m *RESTAdmissionRuleOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleOption) contextValidateSubOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SubOptions != nil {

		if swag.IsZero(m.SubOptions) { // not required
			return nil
		}

		if err := m.SubOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sub_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmissionRuleOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmissionRuleOption) UnmarshalBinary(b []byte) error {
	var res RESTAdmissionRuleOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTAdmissionRuleOptionSubOptions r e s t admission rule option sub options
//
// swagger:model RESTAdmissionRuleOptionSubOptions
type RESTAdmissionRuleOptionSubOptions struct {

	// options
	Options *RESTAdmissionRuleOption `json:"options,omitempty"`

	// rule
	// Example: criterion_name
	Rule string `json:"rule,omitempty"`
}

// Validate validates this r e s t admission rule option sub options
func (m *RESTAdmissionRuleOptionSubOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleOptionSubOptions) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_options" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sub_options" + "." + "options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t admission rule option sub options based on the context it is used
func (m *RESTAdmissionRuleOptionSubOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionRuleOptionSubOptions) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_options" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sub_options" + "." + "options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmissionRuleOptionSubOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmissionRuleOptionSubOptions) UnmarshalBinary(b []byte) error {
	var res RESTAdmissionRuleOptionSubOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
