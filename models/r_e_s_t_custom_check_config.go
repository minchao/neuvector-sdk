// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTCustomCheckConfig r e s t custom check config
//
// swagger:model RESTCustomCheckConfig
type RESTCustomCheckConfig struct {

	// add
	// Required: true
	Add *RESTCustomChecks `json:"add"`

	// delete
	// Required: true
	Delete *RESTCustomChecks `json:"delete"`

	// update
	// Required: true
	Update *RESTCustomChecks `json:"update"`
}

// Validate validates this r e s t custom check config
func (m *RESTCustomCheckConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTCustomCheckConfig) validateAdd(formats strfmt.Registry) error {

	if err := validate.Required("add", "body", m.Add); err != nil {
		return err
	}

	if m.Add != nil {
		if err := m.Add.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("add")
			}
			return err
		}
	}

	return nil
}

func (m *RESTCustomCheckConfig) validateDelete(formats strfmt.Registry) error {

	if err := validate.Required("delete", "body", m.Delete); err != nil {
		return err
	}

	if m.Delete != nil {
		if err := m.Delete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete")
			}
			return err
		}
	}

	return nil
}

func (m *RESTCustomCheckConfig) validateUpdate(formats strfmt.Registry) error {

	if err := validate.Required("update", "body", m.Update); err != nil {
		return err
	}

	if m.Update != nil {
		if err := m.Update.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t custom check config based on the context it is used
func (m *RESTCustomCheckConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTCustomCheckConfig) contextValidateAdd(ctx context.Context, formats strfmt.Registry) error {

	if m.Add != nil {

		if err := m.Add.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("add")
			}
			return err
		}
	}

	return nil
}

func (m *RESTCustomCheckConfig) contextValidateDelete(ctx context.Context, formats strfmt.Registry) error {

	if m.Delete != nil {

		if err := m.Delete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete")
			}
			return err
		}
	}

	return nil
}

func (m *RESTCustomCheckConfig) contextValidateUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.Update != nil {

		if err := m.Update.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTCustomCheckConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTCustomCheckConfig) UnmarshalBinary(b []byte) error {
	var res RESTCustomCheckConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
