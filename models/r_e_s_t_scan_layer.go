// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanLayer r e s t scan layer
//
// swagger:model RESTScanLayer
type RESTScanLayer struct {

	// cmds
	// Required: true
	Cmds *string `json:"cmds"`

	// digest
	// Required: true
	Digest *string `json:"digest"`

	// size
	// Example: 1
	// Required: true
	Size *int64 `json:"size"`

	// vulnerabilities
	// Required: true
	Vulnerabilities []*RESTVulnerability `json:"vulnerabilities"`
}

// Validate validates this r e s t scan layer
func (m *RESTScanLayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCmds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanLayer) validateCmds(formats strfmt.Registry) error {

	if err := validate.Required("cmds", "body", m.Cmds); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanLayer) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanLayer) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanLayer) validateVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities", "body", m.Vulnerabilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t scan layer based on the context it is used
func (m *RESTScanLayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanLayer) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanLayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanLayer) UnmarshalBinary(b []byte) error {
	var res RESTScanLayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
