// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAwsFuncPermission r e s t aws func permission
//
// swagger:model RESTAwsFuncPermission
type RESTAwsFuncPermission struct {

	// allowed detail
	// Required: true
	AllowedDetail *RESTAwsFuncPermissionAllowedDetail `json:"allowed_detail"`

	// aws attached policy
	// Example: true
	// Required: true
	AwsAttachedPolicy *bool `json:"aws_attached_policy"`

	// permission state
	// Example: ["Full Access policy  AWSLambdaFullAccess","In policy AWSLambdaFullAccess : Full Access to dynamodb "]
	// Required: true
	PermissionState []string `json:"permission_state"`

	// policy permission level
	// Example: High
	// Required: true
	PolicyPermissionLevel *string `json:"policy_permission_level"`
}

// Validate validates this r e s t aws func permission
func (m *RESTAwsFuncPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsAttachedPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyPermissionLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAwsFuncPermission) validateAllowedDetail(formats strfmt.Registry) error {

	if err := validate.Required("allowed_detail", "body", m.AllowedDetail); err != nil {
		return err
	}

	if m.AllowedDetail != nil {
		if err := m.AllowedDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_detail")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAwsFuncPermission) validateAwsAttachedPolicy(formats strfmt.Registry) error {

	if err := validate.Required("aws_attached_policy", "body", m.AwsAttachedPolicy); err != nil {
		return err
	}

	return nil
}

func (m *RESTAwsFuncPermission) validatePermissionState(formats strfmt.Registry) error {

	if err := validate.Required("permission_state", "body", m.PermissionState); err != nil {
		return err
	}

	return nil
}

func (m *RESTAwsFuncPermission) validatePolicyPermissionLevel(formats strfmt.Registry) error {

	if err := validate.Required("policy_permission_level", "body", m.PolicyPermissionLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t aws func permission based on the context it is used
func (m *RESTAwsFuncPermission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAwsFuncPermission) contextValidateAllowedDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.AllowedDetail != nil {

		if err := m.AllowedDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowed_detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowed_detail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAwsFuncPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAwsFuncPermission) UnmarshalBinary(b []byte) error {
	var res RESTAwsFuncPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RESTAwsFuncPermissionAllowedDetail r e s t aws func permission allowed detail
//
// swagger:model RESTAwsFuncPermissionAllowedDetail
type RESTAwsFuncPermissionAllowedDetail struct {

	// key
	// Example: cloudformation
	Key string `json:"key,omitempty"`

	// value
	Value []*RESTAwsResDetail `json:"value"`
}

// Validate validates this r e s t aws func permission allowed detail
func (m *RESTAwsFuncPermissionAllowedDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAwsFuncPermissionAllowedDetail) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	for i := 0; i < len(m.Value); i++ {
		if swag.IsZero(m.Value[i]) { // not required
			continue
		}

		if m.Value[i] != nil {
			if err := m.Value[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowed_detail" + "." + "value" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowed_detail" + "." + "value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t aws func permission allowed detail based on the context it is used
func (m *RESTAwsFuncPermissionAllowedDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAwsFuncPermissionAllowedDetail) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Value); i++ {

		if m.Value[i] != nil {

			if swag.IsZero(m.Value[i]) { // not required
				return nil
			}

			if err := m.Value[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowed_detail" + "." + "value" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowed_detail" + "." + "value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAwsFuncPermissionAllowedDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAwsFuncPermissionAllowedDetail) UnmarshalBinary(b []byte) error {
	var res RESTAwsFuncPermissionAllowedDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
