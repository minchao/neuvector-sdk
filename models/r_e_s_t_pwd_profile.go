// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTPwdProfile r e s t pwd profile
//
// swagger:model RESTPwdProfile
type RESTPwdProfile struct {

	// block after failed login count
	// Example: 0
	// Required: true
	BlockAfterFailedLoginCount *int64 `json:"block_after_failed_login_count"`

	// block minutes
	// Example: 0
	// Required: true
	BlockMinutes *int64 `json:"block_minutes"`

	// comment
	// Example: default
	// Required: true
	Comment *string `json:"comment"`

	// enable block after failed login
	// Example: false
	// Required: true
	EnableBlockAfterFailedLogin *bool `json:"enable_block_after_failed_login"`

	// enable password expiration
	// Example: false
	// Required: true
	EnablePasswordExpiration *bool `json:"enable_password_expiration"`

	// enable password history
	// Example: 0
	// Required: true
	EnablePasswordHistory *int64 `json:"enable_password_history"`

	// min digit count
	// Example: 0
	// Required: true
	MinDigitCount *int64 `json:"min_digit_count"`

	// min len
	// Example: 6
	// Required: true
	MinLen *int64 `json:"min_len"`

	// min lowercase count
	// Example: 0
	// Required: true
	MinLowercaseCount *int64 `json:"min_lowercase_count"`

	// min special count
	// Example: 0
	// Required: true
	MinSpecialCount *int64 `json:"min_special_count"`

	// min uppercase count
	// Example: 0
	// Required: true
	MinUppercaseCount *int64 `json:"min_uppercase_count"`

	// name
	// Example: default
	// Required: true
	Name *string `json:"name"`

	// password expire after days
	// Example: 0
	// Required: true
	PasswordExpireAfterDays *int64 `json:"password_expire_after_days"`

	// password keep history count
	// Example: 0
	// Required: true
	PasswordKeepHistoryCount *int64 `json:"password_keep_history_count"`

	// session timeout
	// Example: 300
	// Required: true
	SessionTimeout *int64 `json:"session_timeout"`
}

// Validate validates this r e s t pwd profile
func (m *RESTPwdProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockAfterFailedLoginCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableBlockAfterFailedLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnablePasswordExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnablePasswordHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinDigitCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinLen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinLowercaseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSpecialCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinUppercaseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpireAfterDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordKeepHistoryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTPwdProfile) validateBlockAfterFailedLoginCount(formats strfmt.Registry) error {

	if err := validate.Required("block_after_failed_login_count", "body", m.BlockAfterFailedLoginCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateBlockMinutes(formats strfmt.Registry) error {

	if err := validate.Required("block_minutes", "body", m.BlockMinutes); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateEnableBlockAfterFailedLogin(formats strfmt.Registry) error {

	if err := validate.Required("enable_block_after_failed_login", "body", m.EnableBlockAfterFailedLogin); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateEnablePasswordExpiration(formats strfmt.Registry) error {

	if err := validate.Required("enable_password_expiration", "body", m.EnablePasswordExpiration); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateEnablePasswordHistory(formats strfmt.Registry) error {

	if err := validate.Required("enable_password_history", "body", m.EnablePasswordHistory); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateMinDigitCount(formats strfmt.Registry) error {

	if err := validate.Required("min_digit_count", "body", m.MinDigitCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateMinLen(formats strfmt.Registry) error {

	if err := validate.Required("min_len", "body", m.MinLen); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateMinLowercaseCount(formats strfmt.Registry) error {

	if err := validate.Required("min_lowercase_count", "body", m.MinLowercaseCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateMinSpecialCount(formats strfmt.Registry) error {

	if err := validate.Required("min_special_count", "body", m.MinSpecialCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateMinUppercaseCount(formats strfmt.Registry) error {

	if err := validate.Required("min_uppercase_count", "body", m.MinUppercaseCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validatePasswordExpireAfterDays(formats strfmt.Registry) error {

	if err := validate.Required("password_expire_after_days", "body", m.PasswordExpireAfterDays); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validatePasswordKeepHistoryCount(formats strfmt.Registry) error {

	if err := validate.Required("password_keep_history_count", "body", m.PasswordKeepHistoryCount); err != nil {
		return err
	}

	return nil
}

func (m *RESTPwdProfile) validateSessionTimeout(formats strfmt.Registry) error {

	if err := validate.Required("session_timeout", "body", m.SessionTimeout); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t pwd profile based on context it is used
func (m *RESTPwdProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTPwdProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTPwdProfile) UnmarshalBinary(b []byte) error {
	var res RESTPwdProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
