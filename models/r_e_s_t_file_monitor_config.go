// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RESTFileMonitorConfig r e s t file monitor config
//
// swagger:model RESTFileMonitorConfig
type RESTFileMonitorConfig struct {

	// add filters
	AddFilters []*RESTFileMonitorFilterConfig `json:"add_filters"`

	// delete filters
	DeleteFilters []*RESTFileMonitorFilterConfig `json:"delete_filters"`

	// update filters
	UpdateFilters []*RESTFileMonitorFilterConfig `json:"update_filters"`
}

// Validate validates this r e s t file monitor config
func (m *RESTFileMonitorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTFileMonitorConfig) validateAddFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.AddFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AddFilters); i++ {
		if swag.IsZero(m.AddFilters[i]) { // not required
			continue
		}

		if m.AddFilters[i] != nil {
			if err := m.AddFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTFileMonitorConfig) validateDeleteFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteFilters); i++ {
		if swag.IsZero(m.DeleteFilters[i]) { // not required
			continue
		}

		if m.DeleteFilters[i] != nil {
			if err := m.DeleteFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delete_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delete_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTFileMonitorConfig) validateUpdateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.UpdateFilters); i++ {
		if swag.IsZero(m.UpdateFilters[i]) { // not required
			continue
		}

		if m.UpdateFilters[i] != nil {
			if err := m.UpdateFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t file monitor config based on the context it is used
func (m *RESTFileMonitorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTFileMonitorConfig) contextValidateAddFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddFilters); i++ {

		if m.AddFilters[i] != nil {

			if swag.IsZero(m.AddFilters[i]) { // not required
				return nil
			}

			if err := m.AddFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTFileMonitorConfig) contextValidateDeleteFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteFilters); i++ {

		if m.DeleteFilters[i] != nil {

			if swag.IsZero(m.DeleteFilters[i]) { // not required
				return nil
			}

			if err := m.DeleteFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delete_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delete_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTFileMonitorConfig) contextValidateUpdateFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpdateFilters); i++ {

		if m.UpdateFilters[i] != nil {

			if swag.IsZero(m.UpdateFilters[i]) { // not required
				return nil
			}

			if err := m.UpdateFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTFileMonitorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTFileMonitorConfig) UnmarshalBinary(b []byte) error {
	var res RESTFileMonitorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
