// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadBriefV2 r e s t workload brief v2
//
// swagger:model RESTWorkloadBriefV2
type RESTWorkloadBriefV2 struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// display name
	// Example: calico-node-mzhtk
	// Required: true
	DisplayName *string `json:"display_name"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// host id
	// Example: GRSW:3RCY:YL6O:TIGT:666B:OW22:XYQF:YHGI:JB3L
	// Required: true
	HostID *string `json:"host_id"`

	// host name
	// Example: ubuntu1604-k8worker1-calico
	// Required: true
	HostName *string `json:"host_name"`

	// id
	// Example: 7304e72fd093155c4cbcd65d07375329b2db82cc679
	// Required: true
	ID *string `json:"id"`

	// image
	// Example: calico
	// Required: true
	Image *string `json:"image"`

	// image id
	// Example: d572b7ee3511b21a2b78b8915bc03c5786ad01949704c1418624224c4cae2c5f
	// Required: true
	ImageID *string `json:"image_id"`

	// name
	// Example: k8s_POD.d86c_calico-node-mzhtk_kube-system_0050565a_365c13d
	// Required: true
	Name *string `json:"name"`

	// service
	// Example: kafkazookeeper
	// Required: true
	Service *string `json:"service"`

	// service group
	// Example: nv.calico
	// Required: true
	ServiceGroup *string `json:"service_group"`

	// state
	// Example: exit
	// Required: true
	State *string `json:"state"`
}

// Validate validates this r e s t workload brief v2
func (m *RESTWorkloadBriefV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadBriefV2) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateServiceGroup(formats strfmt.Registry) error {

	if err := validate.Required("service_group", "body", m.ServiceGroup); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadBriefV2) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t workload brief v2 based on context it is used
func (m *RESTWorkloadBriefV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadBriefV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadBriefV2) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadBriefV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
