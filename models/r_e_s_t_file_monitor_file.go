// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTFileMonitorFile r e s t file monitor file
//
// swagger:model RESTFileMonitorFile
type RESTFileMonitorFile struct {

	// files
	// Example: [""]
	// Required: true
	Files []string `json:"files"`

	// is dir
	// Example: false
	// Required: true
	IsDir *bool `json:"is_dir"`

	// mask
	// Example: 0
	// Required: true
	Mask *uint64 `json:"mask"`

	// path
	// Required: true
	Path *string `json:"path"`

	// protect
	// Example: false
	// Required: true
	Protect *bool `json:"protect"`
}

// Validate validates this r e s t file monitor file
func (m *RESTFileMonitorFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtect(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTFileMonitorFile) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("files", "body", m.Files); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFile) validateIsDir(formats strfmt.Registry) error {

	if err := validate.Required("is_dir", "body", m.IsDir); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFile) validateMask(formats strfmt.Registry) error {

	if err := validate.Required("mask", "body", m.Mask); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFile) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *RESTFileMonitorFile) validateProtect(formats strfmt.Registry) error {

	if err := validate.Required("protect", "body", m.Protect); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t file monitor file based on context it is used
func (m *RESTFileMonitorFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTFileMonitorFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTFileMonitorFile) UnmarshalBinary(b []byte) error {
	var res RESTFileMonitorFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
