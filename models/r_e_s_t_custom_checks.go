// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTCustomChecks r e s t custom checks
//
// swagger:model RESTCustomChecks
type RESTCustomChecks struct {

	// group
	// Example: containers
	// Required: true
	Group *string `json:"group"`

	// scripts
	// Required: true
	Scripts []*RESTCustomCheck `json:"scripts"`
}

// Validate validates this r e s t custom checks
func (m *RESTCustomChecks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScripts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTCustomChecks) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *RESTCustomChecks) validateScripts(formats strfmt.Registry) error {

	if err := validate.Required("scripts", "body", m.Scripts); err != nil {
		return err
	}

	for i := 0; i < len(m.Scripts); i++ {
		if swag.IsZero(m.Scripts[i]) { // not required
			continue
		}

		if m.Scripts[i] != nil {
			if err := m.Scripts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t custom checks based on the context it is used
func (m *RESTCustomChecks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTCustomChecks) contextValidateScripts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Scripts); i++ {

		if m.Scripts[i] != nil {

			if swag.IsZero(m.Scripts[i]) { // not required
				return nil
			}

			if err := m.Scripts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTCustomChecks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTCustomChecks) UnmarshalBinary(b []byte) error {
	var res RESTCustomChecks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
