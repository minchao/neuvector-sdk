// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAWSAccountKey r e s t a w s account key
//
// swagger:model RESTAWSAccountKey
type RESTAWSAccountKey struct {

	// access key id
	// Example: NSKN3KM0OSN854MZ2LOV90S7DFVCL6
	AccessKeyID string `json:"access_key_id,omitempty"`

	// id
	// Example: 349695068245
	// Required: true
	ID *string `json:"id"`

	// region
	// Example: us-east-1
	// Required: true
	Region *string `json:"region"`

	// secret access key
	// Example: E7B0OS/N3KMVCL6KNMZ2+LOV90S7854NSD84P0BF
	SecretAccessKey string `json:"secret_access_key,omitempty"`
}

// Validate validates this r e s t a w s account key
func (m *RESTAWSAccountKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAWSAccountKey) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RESTAWSAccountKey) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t a w s account key based on context it is used
func (m *RESTAWSAccountKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTAWSAccountKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAWSAccountKey) UnmarshalBinary(b []byte) error {
	var res RESTAWSAccountKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
