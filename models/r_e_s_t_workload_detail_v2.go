// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadDetailV2 r e s t workload detail v2
//
// swagger:model RESTWorkloadDetailV2
type RESTWorkloadDetailV2 struct {

	// brief
	// Required: true
	Brief *RESTWorkloadBriefV2 `json:"brief"`

	// children
	// Required: true
	Children []*RESTWorkloadV2 `json:"children"`

	// created at
	// Example: 2018-01-18T00:44:02Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// enforcer id
	// Example: 002a4f71d9dbdb40db81c31484ac25564fe80574dfbe
	// Required: true
	EnforcerID *string `json:"enforcer_id"`

	// enforcer name
	// Example: allinone
	// Required: true
	EnforcerName *string `json:"enforcer_name"`

	// exit code
	// Example: 0
	// Required: true
	ExitCode *int64 `json:"exit_code"`

	// finished at
	// Example: 2018-01-18T01:20:02Z
	// Required: true
	// Format: date-time
	FinishedAt *strfmt.DateTime `json:"finished_at"`

	// misc
	// Required: true
	Misc *RESTWorkloadDetailMiscV2 `json:"misc"`

	// platform role
	// Example: core
	// Required: true
	PlatformRole *string `json:"platform_role"`

	// rt attributes
	// Required: true
	RtAttributes *RESTWorkloadRtAttribesV2 `json:"rt_attributes"`

	// running
	// Example: false
	// Required: true
	Running *bool `json:"running"`

	// secured at
	// Example: 2018-01-18T01:20:02Z
	// Required: true
	// Format: date-time
	SecuredAt *strfmt.DateTime `json:"secured_at"`

	// security
	// Required: true
	Security *RESTWorkloadSecurityV2 `json:"security"`

	// started at
	// Example: 2018-01-18T00:44:02Z
	// Required: true
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at"`
}

// Validate validates this r e s t workload detail v2
func (m *RESTWorkloadDetailV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrief(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMisc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecuredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadDetailV2) validateBrief(formats strfmt.Registry) error {

	if err := validate.Required("brief", "body", m.Brief); err != nil {
		return err
	}

	if m.Brief != nil {
		if err := m.Brief.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brief")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brief")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateEnforcerID(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_id", "body", m.EnforcerID); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateEnforcerName(formats strfmt.Registry) error {

	if err := validate.Required("enforcer_name", "body", m.EnforcerName); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateExitCode(formats strfmt.Registry) error {

	if err := validate.Required("exit_code", "body", m.ExitCode); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("finished_at", "body", m.FinishedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateMisc(formats strfmt.Registry) error {

	if err := validate.Required("misc", "body", m.Misc); err != nil {
		return err
	}

	if m.Misc != nil {
		if err := m.Misc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("misc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("misc")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validatePlatformRole(formats strfmt.Registry) error {

	if err := validate.Required("platform_role", "body", m.PlatformRole); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateRtAttributes(formats strfmt.Registry) error {

	if err := validate.Required("rt_attributes", "body", m.RtAttributes); err != nil {
		return err
	}

	if m.RtAttributes != nil {
		if err := m.RtAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rt_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rt_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateRunning(formats strfmt.Registry) error {

	if err := validate.Required("running", "body", m.Running); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateSecuredAt(formats strfmt.Registry) error {

	if err := validate.Required("secured_at", "body", m.SecuredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("secured_at", "body", "date-time", m.SecuredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	if m.Security != nil {
		if err := m.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("started_at", "body", m.StartedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t workload detail v2 based on the context it is used
func (m *RESTWorkloadDetailV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrief(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMisc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRtAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadDetailV2) contextValidateBrief(ctx context.Context, formats strfmt.Registry) error {

	if m.Brief != nil {

		if err := m.Brief.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brief")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brief")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {

			if swag.IsZero(m.Children[i]) { // not required
				return nil
			}

			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTWorkloadDetailV2) contextValidateMisc(ctx context.Context, formats strfmt.Registry) error {

	if m.Misc != nil {

		if err := m.Misc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("misc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("misc")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) contextValidateRtAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.RtAttributes != nil {

		if err := m.RtAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rt_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rt_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *RESTWorkloadDetailV2) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security != nil {

		if err := m.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadDetailV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadDetailV2) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadDetailV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
