// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTVulnerabilityAsset r e s t vulnerability asset
//
// swagger:model RESTVulnerabilityAsset
type RESTVulnerabilityAsset struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// images
	// Required: true
	Images []string `json:"images"`

	// last modified timestamp
	// Example: 1516561253
	// Required: true
	LastModifiedTimestamp *int64 `json:"last_modified_timestamp"`

	// link
	// Required: true
	Link *string `json:"link"`

	// name
	// Required: true
	Name *string `json:"name"`

	// nodes
	// Required: true
	Nodes []string `json:"nodes"`

	// package name
	// Required: true
	PackageName *string `json:"package_name"`

	// map key is string type
	Packages map[string][]RESTVulnPackageVersion `json:"packages,omitempty"`

	// platforms
	// Required: true
	Platforms []string `json:"platforms"`

	// published timestamp
	// Example: 1516561260
	// Required: true
	PublishedTimestamp *int64 `json:"published_timestamp"`

	// score
	// Example: 7.2
	// Required: true
	Score *float64 `json:"score"`

	// score v3
	// Example: 7.3
	// Required: true
	ScoreV3 *float64 `json:"score_v3"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// vectors
	// Required: true
	Vectors *string `json:"vectors"`

	// vectors v3
	// Required: true
	VectorsV3 *string `json:"vectors_v3"`

	// workloads
	// Required: true
	Workloads []string `json:"workloads"`
}

// Validate validates this r e s t vulnerability asset
func (m *RESTVulnerabilityAsset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectorsV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTVulnerabilityAsset) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_timestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateNodes(formats strfmt.Registry) error {

	if err := validate.Required("nodes", "body", m.Nodes); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("package_name", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validatePackages(formats strfmt.Registry) error {
	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for k := range m.Packages {

		if err := validate.Required("packages"+"."+k, "body", m.Packages[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Packages[k]); i++ {

			if err := m.Packages[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RESTVulnerabilityAsset) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("platforms", "body", m.Platforms); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validatePublishedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("published_timestamp", "body", m.PublishedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateScoreV3(formats strfmt.Registry) error {

	if err := validate.Required("score_v3", "body", m.ScoreV3); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateVectors(formats strfmt.Registry) error {

	if err := validate.Required("vectors", "body", m.Vectors); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateVectorsV3(formats strfmt.Registry) error {

	if err := validate.Required("vectors_v3", "body", m.VectorsV3); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerabilityAsset) validateWorkloads(formats strfmt.Registry) error {

	if err := validate.Required("workloads", "body", m.Workloads); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t vulnerability asset based on the context it is used
func (m *RESTVulnerabilityAsset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTVulnerabilityAsset) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Packages {

		for i := 0; i < len(m.Packages[k]); i++ {

			if swag.IsZero(m.Packages[k][i]) { // not required
				return nil
			}

			if err := m.Packages[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTVulnerabilityAsset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTVulnerabilityAsset) UnmarshalBinary(b []byte) error {
	var res RESTVulnerabilityAsset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
