// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTError r e s t error
//
// swagger:model RESTError
type RESTError struct {

	// code
	// Example: 3
	// Required: true
	Code *int64 `json:"code"`

	// error
	// Example: Request failed
	// Required: true
	Error *string `json:"error"`

	// import task data
	ImportTaskData *RESTImportTaskData `json:"import_task_data,omitempty"`

	// message
	// Example: Invalid format
	// Required: true
	Message *string `json:"message"`

	// password profile basic
	PasswordProfileBasic *RESTPwdProfileBasic `json:"password_profile_basic,omitempty"`
}

// Validate validates this r e s t error
func (m *RESTError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportTaskData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordProfileBasic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *RESTError) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *RESTError) validateImportTaskData(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportTaskData) { // not required
		return nil
	}

	if m.ImportTaskData != nil {
		if err := m.ImportTaskData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_task_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_task_data")
			}
			return err
		}
	}

	return nil
}

func (m *RESTError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *RESTError) validatePasswordProfileBasic(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordProfileBasic) { // not required
		return nil
	}

	if m.PasswordProfileBasic != nil {
		if err := m.PasswordProfileBasic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_profile_basic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_profile_basic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t error based on the context it is used
func (m *RESTError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImportTaskData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordProfileBasic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTError) contextValidateImportTaskData(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportTaskData != nil {

		if swag.IsZero(m.ImportTaskData) { // not required
			return nil
		}

		if err := m.ImportTaskData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_task_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_task_data")
			}
			return err
		}
	}

	return nil
}

func (m *RESTError) contextValidatePasswordProfileBasic(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordProfileBasic != nil {

		if swag.IsZero(m.PasswordProfileBasic) { // not required
			return nil
		}

		if err := m.PasswordProfileBasic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_profile_basic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_profile_basic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTError) UnmarshalBinary(b []byte) error {
	var res RESTError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
