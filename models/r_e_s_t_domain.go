// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTDomain r e s t domain
//
// swagger:model RESTDomain
type RESTDomain struct {

	// map key is string type
	// Example: {"ns.env-1":"production"}
	// Required: true
	Labels map[string]string `json:"labels"`

	// name
	// Example: iperfspace
	// Required: true
	Name *string `json:"name"`

	// running pods
	// Example: 7
	// Required: true
	RunningPods *int64 `json:"running_pods"`

	// running workloads
	// Example: 14
	// Required: true
	RunningWorkloads *int64 `json:"running_workloads"`

	// services
	// Example: 3
	// Required: true
	Services *int64 `json:"services"`

	// tags
	// Example: [""]
	// Required: true
	Tags []string `json:"tags"`

	// workloads
	// Example: 14
	// Required: true
	Workloads *int64 `json:"workloads"`
}

// Validate validates this r e s t domain
func (m *RESTDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningPods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTDomain) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateRunningPods(formats strfmt.Registry) error {

	if err := validate.Required("running_pods", "body", m.RunningPods); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateRunningWorkloads(formats strfmt.Registry) error {

	if err := validate.Required("running_workloads", "body", m.RunningWorkloads); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateServices(formats strfmt.Registry) error {

	if err := validate.Required("services", "body", m.Services); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *RESTDomain) validateWorkloads(formats strfmt.Registry) error {

	if err := validate.Required("workloads", "body", m.Workloads); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t domain based on context it is used
func (m *RESTDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTDomain) UnmarshalBinary(b []byte) error {
	var res RESTDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
