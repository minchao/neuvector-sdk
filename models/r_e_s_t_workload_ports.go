// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWorkloadPorts r e s t workload ports
//
// swagger:model RESTWorkloadPorts
type RESTWorkloadPorts struct {

	// host ip
	// Example: 10.1.5.1
	// Required: true
	HostIP *string `json:"host_ip"`

	// host port
	// Example: 5000
	// Required: true
	HostPort *uint16 `json:"host_port"`

	// ip proto
	// Example: 6
	// Required: true
	IPProto *uint8 `json:"ip_proto"`

	// port
	// Example: 51764
	// Required: true
	Port *uint16 `json:"port"`
}

// Validate validates this r e s t workload ports
func (m *RESTWorkloadPorts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTWorkloadPorts) validateHostIP(formats strfmt.Registry) error {

	if err := validate.Required("host_ip", "body", m.HostIP); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadPorts) validateHostPort(formats strfmt.Registry) error {

	if err := validate.Required("host_port", "body", m.HostPort); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadPorts) validateIPProto(formats strfmt.Registry) error {

	if err := validate.Required("ip_proto", "body", m.IPProto); err != nil {
		return err
	}

	return nil
}

func (m *RESTWorkloadPorts) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t workload ports based on context it is used
func (m *RESTWorkloadPorts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTWorkloadPorts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWorkloadPorts) UnmarshalBinary(b []byte) error {
	var res RESTWorkloadPorts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
