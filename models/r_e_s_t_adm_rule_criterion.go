// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmRuleCriterion r e s t adm rule criterion
//
// swagger:model RESTAdmRuleCriterion
type RESTAdmRuleCriterion struct {

	// name
	// Example: namespace
	// Required: true
	Name *string `json:"name"`

	// op
	// Example: =
	// Required: true
	Op *string `json:"op"`

	// path
	// Example: item.spec.serviceAccountName
	Path string `json:"path,omitempty"`

	// sub criteria
	SubCriteria []*RESTAdmRuleCriterion `json:"sub_criteria"`

	// template kind
	// Example: podTemplate
	TemplateKind string `json:"template_kind,omitempty"`

	// type
	// Example: customPath
	Type string `json:"type,omitempty"`

	// value
	// Example: kube-system
	// Required: true
	Value *string `json:"value"`

	// value type
	// Example: string
	ValueType string `json:"value_type,omitempty"`
}

// Validate validates this r e s t adm rule criterion
func (m *RESTAdmRuleCriterion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleCriterion) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmRuleCriterion) validateOp(formats strfmt.Registry) error {

	if err := validate.Required("op", "body", m.Op); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmRuleCriterion) validateSubCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.SubCriteria) { // not required
		return nil
	}

	for i := 0; i < len(m.SubCriteria); i++ {
		if swag.IsZero(m.SubCriteria[i]) { // not required
			continue
		}

		if m.SubCriteria[i] != nil {
			if err := m.SubCriteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTAdmRuleCriterion) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r e s t adm rule criterion based on the context it is used
func (m *RESTAdmRuleCriterion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmRuleCriterion) contextValidateSubCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubCriteria); i++ {

		if m.SubCriteria[i] != nil {

			if swag.IsZero(m.SubCriteria[i]) { // not required
				return nil
			}

			if err := m.SubCriteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmRuleCriterion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmRuleCriterion) UnmarshalBinary(b []byte) error {
	var res RESTAdmRuleCriterion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
