// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTWebhook r e s t webhook
//
// swagger:model RESTWebhook
type RESTWebhook struct {

	// cfg type
	// Required: true
	// Enum: [user_created ground federal]
	CfgType *string `json:"cfg_type"`

	// enable
	// Example: true
	// Required: true
	Enable *bool `json:"enable"`

	// name
	// Example: slack-webhook
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	// Enum: [ Slack JSON Teams]
	Type *string `json:"type"`

	// url
	// Example: https://neuvector.slack.com/archives/C8AU75GKE
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this r e s t webhook
func (m *RESTWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfgType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rESTWebhookTypeCfgTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_created","ground","federal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTWebhookTypeCfgTypePropEnum = append(rESTWebhookTypeCfgTypePropEnum, v)
	}
}

const (

	// RESTWebhookCfgTypeUserCreated captures enum value "user_created"
	RESTWebhookCfgTypeUserCreated string = "user_created"

	// RESTWebhookCfgTypeGround captures enum value "ground"
	RESTWebhookCfgTypeGround string = "ground"

	// RESTWebhookCfgTypeFederal captures enum value "federal"
	RESTWebhookCfgTypeFederal string = "federal"
)

// prop value enum
func (m *RESTWebhook) validateCfgTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTWebhookTypeCfgTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTWebhook) validateCfgType(formats strfmt.Registry) error {

	if err := validate.Required("cfg_type", "body", m.CfgType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCfgTypeEnum("cfg_type", "body", *m.CfgType); err != nil {
		return err
	}

	return nil
}

func (m *RESTWebhook) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

func (m *RESTWebhook) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var rESTWebhookTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","Slack","JSON","Teams"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rESTWebhookTypeTypePropEnum = append(rESTWebhookTypeTypePropEnum, v)
	}
}

const (

	// RESTWebhookTypeEmpty captures enum value ""
	RESTWebhookTypeEmpty string = ""

	// RESTWebhookTypeSlack captures enum value "Slack"
	RESTWebhookTypeSlack string = "Slack"

	// RESTWebhookTypeJSON captures enum value "JSON"
	RESTWebhookTypeJSON string = "JSON"

	// RESTWebhookTypeTeams captures enum value "Teams"
	RESTWebhookTypeTeams string = "Teams"
)

// prop value enum
func (m *RESTWebhook) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rESTWebhookTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RESTWebhook) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RESTWebhook) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this r e s t webhook based on context it is used
func (m *RESTWebhook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RESTWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTWebhook) UnmarshalBinary(b []byte) error {
	var res RESTWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
