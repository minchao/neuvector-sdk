// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RESTPolicyRuleActionData r e s t policy rule action data
//
// swagger:model RESTPolicyRuleActionData
type RESTPolicyRuleActionData struct {

	// delete
	// Example: [1234]
	Delete []uint32 `json:"delete"`

	// insert
	Insert *RESTPolicyRuleInsert `json:"insert,omitempty"`

	// move
	Move *RESTPolicyRuleMove `json:"move,omitempty"`

	// rules
	Rules []*RESTPolicyRule `json:"rules"`
}

// Validate validates this r e s t policy rule action data
func (m *RESTPolicyRuleActionData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTPolicyRuleActionData) validateInsert(formats strfmt.Registry) error {
	if swag.IsZero(m.Insert) { // not required
		return nil
	}

	if m.Insert != nil {
		if err := m.Insert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insert")
			}
			return err
		}
	}

	return nil
}

func (m *RESTPolicyRuleActionData) validateMove(formats strfmt.Registry) error {
	if swag.IsZero(m.Move) { // not required
		return nil
	}

	if m.Move != nil {
		if err := m.Move.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("move")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("move")
			}
			return err
		}
	}

	return nil
}

func (m *RESTPolicyRuleActionData) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this r e s t policy rule action data based on the context it is used
func (m *RESTPolicyRuleActionData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInsert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMove(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTPolicyRuleActionData) contextValidateInsert(ctx context.Context, formats strfmt.Registry) error {

	if m.Insert != nil {

		if swag.IsZero(m.Insert) { // not required
			return nil
		}

		if err := m.Insert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insert")
			}
			return err
		}
	}

	return nil
}

func (m *RESTPolicyRuleActionData) contextValidateMove(ctx context.Context, formats strfmt.Registry) error {

	if m.Move != nil {

		if swag.IsZero(m.Move) { // not required
			return nil
		}

		if err := m.Move.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("move")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("move")
			}
			return err
		}
	}

	return nil
}

func (m *RESTPolicyRuleActionData) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTPolicyRuleActionData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTPolicyRuleActionData) UnmarshalBinary(b []byte) error {
	var res RESTPolicyRuleActionData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
