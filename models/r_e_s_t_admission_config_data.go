// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTAdmissionConfigData r e s t admission config data
//
// swagger:model RESTAdmissionConfigData
type RESTAdmissionConfigData struct {

	// admission custom criteria options
	AdmissionCustomCriteriaOptions *RESTAdminCustomCriteriaOptions `json:"admission_custom_criteria_options,omitempty"`

	// admission custom criteria templates
	AdmissionCustomCriteriaTemplates *RESTAdminCriteriaTemplate `json:"admission_custom_criteria_templates,omitempty"`

	// admission options
	AdmissionOptions *RESTAdmRuleTypeOptions `json:"admission_options,omitempty"`

	// k8s env
	// Example: false
	// Required: true
	K8sEnv *bool `json:"k8s_env"`

	// predefined risky roles
	// Example: ["risky_role_view_secret","risky_role_create_pod"]
	PredefinedRiskyRoles []string `json:"predefined_risky_roles"`

	// state
	State *RESTAdmissionState `json:"state,omitempty"`
}

// Validate validates this r e s t admission config data
func (m *RESTAdmissionConfigData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmissionCustomCriteriaOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdmissionCustomCriteriaTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdmissionOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionConfigData) validateAdmissionCustomCriteriaOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AdmissionCustomCriteriaOptions) { // not required
		return nil
	}

	if m.AdmissionCustomCriteriaOptions != nil {
		if err := m.AdmissionCustomCriteriaOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_custom_criteria_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_custom_criteria_options")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) validateAdmissionCustomCriteriaTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.AdmissionCustomCriteriaTemplates) { // not required
		return nil
	}

	if m.AdmissionCustomCriteriaTemplates != nil {
		if err := m.AdmissionCustomCriteriaTemplates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_custom_criteria_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_custom_criteria_templates")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) validateAdmissionOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AdmissionOptions) { // not required
		return nil
	}

	if m.AdmissionOptions != nil {
		if err := m.AdmissionOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_options")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) validateK8sEnv(formats strfmt.Registry) error {

	if err := validate.Required("k8s_env", "body", m.K8sEnv); err != nil {
		return err
	}

	return nil
}

func (m *RESTAdmissionConfigData) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this r e s t admission config data based on the context it is used
func (m *RESTAdmissionConfigData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdmissionCustomCriteriaOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdmissionCustomCriteriaTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdmissionOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTAdmissionConfigData) contextValidateAdmissionCustomCriteriaOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AdmissionCustomCriteriaOptions != nil {

		if swag.IsZero(m.AdmissionCustomCriteriaOptions) { // not required
			return nil
		}

		if err := m.AdmissionCustomCriteriaOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_custom_criteria_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_custom_criteria_options")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) contextValidateAdmissionCustomCriteriaTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.AdmissionCustomCriteriaTemplates != nil {

		if swag.IsZero(m.AdmissionCustomCriteriaTemplates) { // not required
			return nil
		}

		if err := m.AdmissionCustomCriteriaTemplates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_custom_criteria_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_custom_criteria_templates")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) contextValidateAdmissionOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AdmissionOptions != nil {

		if swag.IsZero(m.AdmissionOptions) { // not required
			return nil
		}

		if err := m.AdmissionOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admission_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admission_options")
			}
			return err
		}
	}

	return nil
}

func (m *RESTAdmissionConfigData) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTAdmissionConfigData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTAdmissionConfigData) UnmarshalBinary(b []byte) error {
	var res RESTAdmissionConfigData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
