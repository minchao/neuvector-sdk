// Code generated by go-swagger; DO NOT EDIT.

package w_a_f_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new w a f rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for w a f rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1WafSersorName(params *DeleteV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1WafSersorNameOK, error)

	GetV1WafGroup(params *GetV1WafGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafGroupOK, error)

	GetV1WafGroupName(params *GetV1WafGroupNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafGroupNameOK, error)

	GetV1WafRule(params *GetV1WafRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafRuleOK, error)

	GetV1WafRuleName(params *GetV1WafRuleNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafRuleNameOK, error)

	GetV1WafSensor(params *GetV1WafSensorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafSensorOK, error)

	GetV1WafSersorName(params *GetV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafSersorNameOK, error)

	PatchV1WafGroupName(params *PatchV1WafGroupNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WafGroupNameOK, error)

	PatchV1WafSersorName(params *PatchV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WafSersorNameOK, error)

	PostV1WafSensor(params *PostV1WafSensorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1WafSensorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1WafSersorName deletes a waf sensor
*/
func (a *Client) DeleteV1WafSersorName(params *DeleteV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1WafSersorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1WafSersorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1WafSersorName",
		Method:             "DELETE",
		PathPattern:        "/v1/waf/sersor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1WafSersorNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1WafSersorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1WafSersorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafGroup gets waf group list
*/
func (a *Client) GetV1WafGroup(params *GetV1WafGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafGroup",
		Method:             "GET",
		PathPattern:        "/v1/waf/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafGroupName gets waf group detail
*/
func (a *Client) GetV1WafGroupName(params *GetV1WafGroupNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafGroupNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafGroupNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafGroupName",
		Method:             "GET",
		PathPattern:        "/v1/waf/group/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafGroupNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafGroupNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafGroupName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafRule gets waf rule list
*/
func (a *Client) GetV1WafRule(params *GetV1WafRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafRule",
		Method:             "GET",
		PathPattern:        "/v1/waf/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafRuleName gets waf rule detail
*/
func (a *Client) GetV1WafRuleName(params *GetV1WafRuleNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafRuleNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafRuleNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafRuleName",
		Method:             "GET",
		PathPattern:        "/v1/waf/rule/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafRuleNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafRuleNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafRuleName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafSensor gets waf rule list
*/
func (a *Client) GetV1WafSensor(params *GetV1WafSensorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafSensorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafSensor",
		Method:             "GET",
		PathPattern:        "/v1/waf/sensor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WafSersorName gets waf sensor detail
*/
func (a *Client) GetV1WafSersorName(params *GetV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WafSersorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WafSersorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WafSersorName",
		Method:             "GET",
		PathPattern:        "/v1/waf/sersor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WafSersorNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WafSersorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WafSersorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1WafGroupName updates a waf group
*/
func (a *Client) PatchV1WafGroupName(params *PatchV1WafGroupNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WafGroupNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1WafGroupNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1WafGroupName",
		Method:             "PATCH",
		PathPattern:        "/v1/waf/group/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1WafGroupNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1WafGroupNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1WafGroupName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1WafSersorName updates a waf sensor
*/
func (a *Client) PatchV1WafSersorName(params *PatchV1WafSersorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WafSersorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1WafSersorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1WafSersorName",
		Method:             "PATCH",
		PathPattern:        "/v1/waf/sersor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1WafSersorNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1WafSersorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1WafSersorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1WafSensor creates waf sensor
*/
func (a *Client) PostV1WafSensor(params *PostV1WafSensorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1WafSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1WafSensorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1WafSensor",
		Method:             "POST",
		PathPattern:        "/v1/waf/sensor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1WafSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1WafSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1WafSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
