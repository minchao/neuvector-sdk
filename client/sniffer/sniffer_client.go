// Code generated by go-swagger; DO NOT EDIT.

package sniffer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sniffer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sniffer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1SnifferID(params *DeleteV1SnifferIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SnifferIDOK, error)

	GetV1Sniffer(params *GetV1SnifferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferOK, error)

	GetV1SnifferID(params *GetV1SnifferIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferIDOK, error)

	GetV1SnifferIDPcap(params *GetV1SnifferIDPcapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferIDPcapOK, error)

	PatchV1SnifferStopID(params *PatchV1SnifferStopIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SnifferStopIDOK, error)

	PostV1Sniffer(params *PostV1SnifferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SnifferOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1SnifferID deletes sniffer
*/
func (a *Client) DeleteV1SnifferID(params *DeleteV1SnifferIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SnifferIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SnifferIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1SnifferID",
		Method:             "DELETE",
		PathPattern:        "/v1/sniffer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SnifferIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SnifferIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1SnifferID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Sniffer gets a list of sniffers
*/
func (a *Client) GetV1Sniffer(params *GetV1SnifferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SnifferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Sniffer",
		Method:             "GET",
		PathPattern:        "/v1/sniffer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SnifferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SnifferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Sniffer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SnifferID shows sniffer
*/
func (a *Client) GetV1SnifferID(params *GetV1SnifferIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SnifferIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SnifferID",
		Method:             "GET",
		PathPattern:        "/v1/sniffer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SnifferIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SnifferIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SnifferID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SnifferIDPcap sniffers get a pcap file
*/
func (a *Client) GetV1SnifferIDPcap(params *GetV1SnifferIDPcapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SnifferIDPcapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SnifferIDPcapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SnifferIDPcap",
		Method:             "GET",
		PathPattern:        "/v1/sniffer/{id}/pcap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SnifferIDPcapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SnifferIDPcapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SnifferIDPcap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SnifferStopID stops sniffer
*/
func (a *Client) PatchV1SnifferStopID(params *PatchV1SnifferStopIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SnifferStopIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SnifferStopIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1SnifferStopID",
		Method:             "PATCH",
		PathPattern:        "/v1/sniffer/stop/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SnifferStopIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SnifferStopIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1SnifferStopID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Sniffer sniffers start
*/
func (a *Client) PostV1Sniffer(params *PostV1SnifferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SnifferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SnifferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Sniffer",
		Method:             "POST",
		PathPattern:        "/v1/sniffer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SnifferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SnifferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Sniffer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
