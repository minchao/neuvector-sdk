// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1FileConfig(params *GetV1FileConfigParams, opts ...ClientOption) (*GetV1FileConfigOK, error)

	GetV1FileGroup(params *GetV1FileGroupParams, opts ...ClientOption) (*GetV1FileGroupOK, error)

	GetV1FileGroupConfig(params *GetV1FileGroupConfigParams, opts ...ClientOption) (*GetV1FileGroupConfigOK, error)

	PostV1CspFileSupport(params *PostV1CspFileSupportParams, opts ...ClientOption) (*PostV1CspFileSupportOK, error)

	PostV1FileAdmission(params *PostV1FileAdmissionParams, opts ...ClientOption) (*PostV1FileAdmissionOK, error)

	PostV1FileAdmissionConfig(params *PostV1FileAdmissionConfigParams, opts ...ClientOption) (*PostV1FileAdmissionConfigOK, error)

	PostV1FileConfig(params *PostV1FileConfigParams, opts ...ClientOption) (*PostV1FileConfigOK, error)

	PostV1FileDlp(params *PostV1FileDlpParams, opts ...ClientOption) (*PostV1FileDlpOK, error)

	PostV1FileDlpConfig(params *PostV1FileDlpConfigParams, opts ...ClientOption) (*PostV1FileDlpConfigOK, error)

	PostV1FileGroup(params *PostV1FileGroupParams, opts ...ClientOption) (*PostV1FileGroupOK, error)

	PostV1FileGroupConfig(params *PostV1FileGroupConfigParams, opts ...ClientOption) (*PostV1FileGroupConfigOK, error)

	PostV1FileWaf(params *PostV1FileWafParams, opts ...ClientOption) (*PostV1FileWafOK, error)

	PostV1FileWafConfig(params *PostV1FileWafConfigParams, opts ...ClientOption) (*PostV1FileWafConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1FileConfig downloads a configure file
*/
func (a *Client) GetV1FileConfig(params *GetV1FileConfigParams, opts ...ClientOption) (*GetV1FileConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FileConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FileConfig",
		Method:             "GET",
		PathPattern:        "/v1/file/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FileConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FileConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FileConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FileGroup obsoletes please use p o s t method export the yaml format configuration file used for c r d or group policy
*/
func (a *Client) GetV1FileGroup(params *GetV1FileGroupParams, opts ...ClientOption) (*GetV1FileGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FileGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FileGroup",
		Method:             "GET",
		PathPattern:        "/v1/file/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FileGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FileGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FileGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FileGroupConfig gets import status
*/
func (a *Client) GetV1FileGroupConfig(params *GetV1FileGroupConfigParams, opts ...ClientOption) (*GetV1FileGroupConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FileGroupConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FileGroupConfig",
		Method:             "GET",
		PathPattern:        "/v1/file/group/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FileGroupConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FileGroupConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FileGroupConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1CspFileSupport exports support config tarball in gz format
*/
func (a *Client) PostV1CspFileSupport(params *PostV1CspFileSupportParams, opts ...ClientOption) (*PostV1CspFileSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CspFileSupportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1CspFileSupport",
		Method:             "POST",
		PathPattern:        "/v1/csp/file/support",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CspFileSupportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CspFileSupportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1CspFileSupport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileAdmission exports admission control configuration as a yaml format the exported yaml file can be imported by c r d or r e s t API to update the admission control settings
*/
func (a *Client) PostV1FileAdmission(params *PostV1FileAdmissionParams, opts ...ClientOption) (*PostV1FileAdmissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileAdmissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileAdmission",
		Method:             "POST",
		PathPattern:        "/v1/file/admission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileAdmissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileAdmissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileAdmission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileAdmissionConfig imports admission config

Importing admission config. The payload body is the content of the admission config yaml file.
*/
func (a *Client) PostV1FileAdmissionConfig(params *PostV1FileAdmissionConfigParams, opts ...ClientOption) (*PostV1FileAdmissionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileAdmissionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileAdmissionConfig",
		Method:             "POST",
		PathPattern:        "/v1/file/admission/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileAdmissionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileAdmissionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileAdmissionConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileConfig uploads configure file
*/
func (a *Client) PostV1FileConfig(params *PostV1FileConfigParams, opts ...ClientOption) (*PostV1FileConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileConfig",
		Method:             "POST",
		PathPattern:        "/v1/file/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileDlp exports d l p configuration as a yaml format
*/
func (a *Client) PostV1FileDlp(params *PostV1FileDlpParams, opts ...ClientOption) (*PostV1FileDlpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileDlpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileDlp",
		Method:             "POST",
		PathPattern:        "/v1/file/dlp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileDlpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileDlpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileDlp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileDlpConfig imports d l p config

Importing DLP config. The payload body is the content of the DLP config yaml file.
*/
func (a *Client) PostV1FileDlpConfig(params *PostV1FileDlpConfigParams, opts ...ClientOption) (*PostV1FileDlpConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileDlpConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileDlpConfig",
		Method:             "POST",
		PathPattern:        "/v1/file/dlp/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileDlpConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileDlpConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileDlpConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileGroup exports configuration as the yaml format used for c r d or group policy
*/
func (a *Client) PostV1FileGroup(params *PostV1FileGroupParams, opts ...ClientOption) (*PostV1FileGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileGroup",
		Method:             "POST",
		PathPattern:        "/v1/file/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileGroupConfig imports group policy

Importing group policy. The payload body is the content of the group policy yaml file.
*/
func (a *Client) PostV1FileGroupConfig(params *PostV1FileGroupConfigParams, opts ...ClientOption) (*PostV1FileGroupConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileGroupConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileGroupConfig",
		Method:             "POST",
		PathPattern:        "/v1/file/group/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileGroupConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileGroupConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileGroupConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileWaf exports waf configuration as a yaml format
*/
func (a *Client) PostV1FileWaf(params *PostV1FileWafParams, opts ...ClientOption) (*PostV1FileWafOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileWafParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileWaf",
		Method:             "POST",
		PathPattern:        "/v1/file/waf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileWafReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileWafOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileWaf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1FileWafConfig imports waf config

Importing waf config. The payload body is the content of the waf config yaml file.
*/
func (a *Client) PostV1FileWafConfig(params *PostV1FileWafConfigParams, opts ...ClientOption) (*PostV1FileWafConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FileWafConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1FileWafConfig",
		Method:             "POST",
		PathPattern:        "/v1/file/waf/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FileWafConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FileWafConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1FileWafConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
