// Code generated by go-swagger; DO NOT EDIT.

package compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new compliance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compliance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ComplianceProfileNameEntryCheck(params *DeleteV1ComplianceProfileNameEntryCheckParams, opts ...ClientOption) (*DeleteV1ComplianceProfileNameEntryCheckOK, error)

	GetV1BenchHostIDDocker(params *GetV1BenchHostIDDockerParams, opts ...ClientOption) (*GetV1BenchHostIDDockerOK, error)

	GetV1BenchHostIDKubernetes(params *GetV1BenchHostIDKubernetesParams, opts ...ClientOption) (*GetV1BenchHostIDKubernetesOK, error)

	GetV1ComplianceProfile(params *GetV1ComplianceProfileParams, opts ...ClientOption) (*GetV1ComplianceProfileOK, error)

	GetV1ComplianceProfileName(params *GetV1ComplianceProfileNameParams, opts ...ClientOption) (*GetV1ComplianceProfileNameOK, error)

	GetV1CustomCheck(params *GetV1CustomCheckParams, opts ...ClientOption) (*GetV1CustomCheckOK, error)

	GetV1CustomCheckGroup(params *GetV1CustomCheckGroupParams, opts ...ClientOption) (*GetV1CustomCheckGroupOK, error)

	PatchV1ComplianceProfileName(params *PatchV1ComplianceProfileNameParams, opts ...ClientOption) (*PatchV1ComplianceProfileNameOK, error)

	PatchV1ComplianceProfileNameEntryCheck(params *PatchV1ComplianceProfileNameEntryCheckParams, opts ...ClientOption) (*PatchV1ComplianceProfileNameEntryCheckOK, error)

	PatchV1CustomCheckGroup(params *PatchV1CustomCheckGroupParams, opts ...ClientOption) (*PatchV1CustomCheckGroupOK, error)

	PostV1BenchHostIDDocker(params *PostV1BenchHostIDDockerParams, opts ...ClientOption) (*PostV1BenchHostIDDockerOK, error)

	PostV1BenchHostIDKubernetes(params *PostV1BenchHostIDKubernetesParams, opts ...ClientOption) (*PostV1BenchHostIDKubernetesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ComplianceProfileNameEntryCheck deletes compliance profile entry
*/
func (a *Client) DeleteV1ComplianceProfileNameEntryCheck(params *DeleteV1ComplianceProfileNameEntryCheckParams, opts ...ClientOption) (*DeleteV1ComplianceProfileNameEntryCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ComplianceProfileNameEntryCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ComplianceProfileNameEntryCheck",
		Method:             "DELETE",
		PathPattern:        "/v1/compliance/profile/{name}/entry/{check}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ComplianceProfileNameEntryCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ComplianceProfileNameEntryCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ComplianceProfileNameEntryCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1BenchHostIDDocker dockers bench
*/
func (a *Client) GetV1BenchHostIDDocker(params *GetV1BenchHostIDDockerParams, opts ...ClientOption) (*GetV1BenchHostIDDockerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1BenchHostIDDockerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1BenchHostIDDocker",
		Method:             "GET",
		PathPattern:        "/v1/bench/host/{id}/docker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1BenchHostIDDockerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1BenchHostIDDockerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1BenchHostIDDocker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1BenchHostIDKubernetes kubernetes bench
*/
func (a *Client) GetV1BenchHostIDKubernetes(params *GetV1BenchHostIDKubernetesParams, opts ...ClientOption) (*GetV1BenchHostIDKubernetesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1BenchHostIDKubernetesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1BenchHostIDKubernetes",
		Method:             "GET",
		PathPattern:        "/v1/bench/host/{id}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1BenchHostIDKubernetesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1BenchHostIDKubernetesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1BenchHostIDKubernetes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComplianceProfile gets compliance profile list
*/
func (a *Client) GetV1ComplianceProfile(params *GetV1ComplianceProfileParams, opts ...ClientOption) (*GetV1ComplianceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComplianceProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComplianceProfile",
		Method:             "GET",
		PathPattern:        "/v1/compliance/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ComplianceProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComplianceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComplianceProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComplianceProfileName gets compliance profile detail
*/
func (a *Client) GetV1ComplianceProfileName(params *GetV1ComplianceProfileNameParams, opts ...ClientOption) (*GetV1ComplianceProfileNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComplianceProfileNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComplianceProfileName",
		Method:             "GET",
		PathPattern:        "/v1/compliance/profile/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ComplianceProfileNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComplianceProfileNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComplianceProfileName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CustomCheck gets custom check scripts of all groups
*/
func (a *Client) GetV1CustomCheck(params *GetV1CustomCheckParams, opts ...ClientOption) (*GetV1CustomCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CustomCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CustomCheck",
		Method:             "GET",
		PathPattern:        "/v1/custom_check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CustomCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CustomCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CustomCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CustomCheckGroup gs e t custom check scripts of the specified group
*/
func (a *Client) GetV1CustomCheckGroup(params *GetV1CustomCheckGroupParams, opts ...ClientOption) (*GetV1CustomCheckGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CustomCheckGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CustomCheckGroup",
		Method:             "GET",
		PathPattern:        "/v1/custom_check/{group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CustomCheckGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CustomCheckGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CustomCheckGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ComplianceProfileName configures compliance profile
*/
func (a *Client) PatchV1ComplianceProfileName(params *PatchV1ComplianceProfileNameParams, opts ...ClientOption) (*PatchV1ComplianceProfileNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ComplianceProfileNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ComplianceProfileName",
		Method:             "PATCH",
		PathPattern:        "/v1/compliance/profile/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ComplianceProfileNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ComplianceProfileNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ComplianceProfileName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ComplianceProfileNameEntryCheck configures compliance profile entry
*/
func (a *Client) PatchV1ComplianceProfileNameEntryCheck(params *PatchV1ComplianceProfileNameEntryCheckParams, opts ...ClientOption) (*PatchV1ComplianceProfileNameEntryCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ComplianceProfileNameEntryCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ComplianceProfileNameEntryCheck",
		Method:             "PATCH",
		PathPattern:        "/v1/compliance/profile/{name}/entry/{check}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ComplianceProfileNameEntryCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ComplianceProfileNameEntryCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ComplianceProfileNameEntryCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1CustomCheckGroup updates custom check scripts of the specified group
*/
func (a *Client) PatchV1CustomCheckGroup(params *PatchV1CustomCheckGroupParams, opts ...ClientOption) (*PatchV1CustomCheckGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1CustomCheckGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1CustomCheckGroup",
		Method:             "PATCH",
		PathPattern:        "/v1/custom_check/{group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1CustomCheckGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1CustomCheckGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1CustomCheckGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1BenchHostIDDocker dockers bench run
*/
func (a *Client) PostV1BenchHostIDDocker(params *PostV1BenchHostIDDockerParams, opts ...ClientOption) (*PostV1BenchHostIDDockerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1BenchHostIDDockerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1BenchHostIDDocker",
		Method:             "POST",
		PathPattern:        "/v1/bench/host/{id}/docker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1BenchHostIDDockerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1BenchHostIDDockerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1BenchHostIDDocker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1BenchHostIDKubernetes kubernetes bench run
*/
func (a *Client) PostV1BenchHostIDKubernetes(params *PostV1BenchHostIDKubernetesParams, opts ...ClientOption) (*PostV1BenchHostIDKubernetesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1BenchHostIDKubernetesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1BenchHostIDKubernetes",
		Method:             "POST",
		PathPattern:        "/v1/bench/host/{id}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1BenchHostIDKubernetesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1BenchHostIDKubernetesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1BenchHostIDKubernetes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
