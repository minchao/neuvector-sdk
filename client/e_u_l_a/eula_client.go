// Code generated by go-swagger; DO NOT EDIT.

package e_u_l_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new e u l a API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for e u l a API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1Eula(params *GetV1EulaParams, opts ...ClientOption) (*GetV1EulaOK, error)

	PostV1Eula(params *PostV1EulaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1EulaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1Eula gets e u l a agreement acceptance status
*/
func (a *Client) GetV1Eula(params *GetV1EulaParams, opts ...ClientOption) (*GetV1EulaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1EulaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Eula",
		Method:             "GET",
		PathPattern:        "/v1/eula",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1EulaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1EulaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Eula: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Eula accepts e u l a agreement
*/
func (a *Client) PostV1Eula(params *PostV1EulaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1EulaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1EulaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Eula",
		Method:             "POST",
		PathPattern:        "/v1/eula",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1EulaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1EulaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Eula: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
