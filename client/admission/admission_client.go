// Code generated by go-swagger; DO NOT EDIT.

package admission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1AdmissionRuleID(params *DeleteV1AdmissionRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1AdmissionRuleIDOK, error)

	DeleteV1AdmissionRules(params *DeleteV1AdmissionRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1AdmissionRulesOK, error)

	GetV1AdmissionOptions(params *GetV1AdmissionOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionOptionsOK, error)

	GetV1AdmissionRuleID(params *GetV1AdmissionRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionRuleIDOK, error)

	GetV1AdmissionRules(params *GetV1AdmissionRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionRulesOK, error)

	GetV1AdmissionState(params *GetV1AdmissionStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionStateOK, error)

	GetV1AdmissionStats(params *GetV1AdmissionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionStatsOK, error)

	PatchV1AdmissionRule(params *PatchV1AdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AdmissionRuleOK, error)

	PatchV1AdmissionState(params *PatchV1AdmissionStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AdmissionStateOK, error)

	PostV1AdmissionRule(params *PostV1AdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AdmissionRuleOK, error)

	PostV1AdmissionRulePromote(params *PostV1AdmissionRulePromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AdmissionRulePromoteOK, error)

	PostV1AssessAdmissionRule(params *PostV1AssessAdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AssessAdmissionRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1AdmissionRuleID deletes an admission rule
*/
func (a *Client) DeleteV1AdmissionRuleID(params *DeleteV1AdmissionRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1AdmissionRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1AdmissionRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1AdmissionRuleID",
		Method:             "DELETE",
		PathPattern:        "/v1/admission/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1AdmissionRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1AdmissionRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1AdmissionRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1AdmissionRules deletes all admission rules
*/
func (a *Client) DeleteV1AdmissionRules(params *DeleteV1AdmissionRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1AdmissionRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1AdmissionRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1AdmissionRules",
		Method:             "DELETE",
		PathPattern:        "/v1/admission/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1AdmissionRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1AdmissionRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1AdmissionRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AdmissionOptions gets a list of admission options
*/
func (a *Client) GetV1AdmissionOptions(params *GetV1AdmissionOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AdmissionOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AdmissionOptions",
		Method:             "GET",
		PathPattern:        "/v1/admission/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AdmissionOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AdmissionOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AdmissionOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AdmissionRuleID shows an admission rule
*/
func (a *Client) GetV1AdmissionRuleID(params *GetV1AdmissionRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AdmissionRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AdmissionRuleID",
		Method:             "GET",
		PathPattern:        "/v1/admission/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AdmissionRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AdmissionRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AdmissionRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AdmissionRules gets a list of admission rules
*/
func (a *Client) GetV1AdmissionRules(params *GetV1AdmissionRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AdmissionRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AdmissionRules",
		Method:             "GET",
		PathPattern:        "/v1/admission/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AdmissionRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AdmissionRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AdmissionRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AdmissionState gets admission state
*/
func (a *Client) GetV1AdmissionState(params *GetV1AdmissionStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AdmissionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AdmissionState",
		Method:             "GET",
		PathPattern:        "/v1/admission/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AdmissionStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AdmissionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AdmissionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AdmissionStats gets admission control statistics
*/
func (a *Client) GetV1AdmissionStats(params *GetV1AdmissionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AdmissionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AdmissionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AdmissionStats",
		Method:             "GET",
		PathPattern:        "/v1/admission/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AdmissionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AdmissionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AdmissionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1AdmissionRule updates admission rule
*/
func (a *Client) PatchV1AdmissionRule(params *PatchV1AdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AdmissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AdmissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1AdmissionRule",
		Method:             "PATCH",
		PathPattern:        "/v1/admission/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1AdmissionRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AdmissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1AdmissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1AdmissionState updates admission state
*/
func (a *Client) PatchV1AdmissionState(params *PatchV1AdmissionStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AdmissionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AdmissionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1AdmissionState",
		Method:             "PATCH",
		PathPattern:        "/v1/admission/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1AdmissionStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AdmissionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1AdmissionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AdmissionRule adds admission control rule
*/
func (a *Client) PostV1AdmissionRule(params *PostV1AdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AdmissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AdmissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AdmissionRule",
		Method:             "POST",
		PathPattern:        "/v1/admission/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1AdmissionRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AdmissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AdmissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AdmissionRulePromote promotes admission control rule
*/
func (a *Client) PostV1AdmissionRulePromote(params *PostV1AdmissionRulePromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AdmissionRulePromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AdmissionRulePromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AdmissionRulePromote",
		Method:             "POST",
		PathPattern:        "/v1/admission/rule/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1AdmissionRulePromoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AdmissionRulePromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AdmissionRulePromote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AssessAdmissionRule tests admission control rules
*/
func (a *Client) PostV1AssessAdmissionRule(params *PostV1AssessAdmissionRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1AssessAdmissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AssessAdmissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AssessAdmissionRule",
		Method:             "POST",
		PathPattern:        "/v1/assess/admission/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1AssessAdmissionRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AssessAdmissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AssessAdmissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
