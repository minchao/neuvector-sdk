// Code generated by go-swagger; DO NOT EDIT.

package admission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// PatchV1AdmissionStateReader is a Reader for the PatchV1AdmissionState structure.
type PatchV1AdmissionStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1AdmissionStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchV1AdmissionStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPatchV1AdmissionStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/admission/state] PatchV1AdmissionState", response, response.Code())
	}
}

// NewPatchV1AdmissionStateOK creates a PatchV1AdmissionStateOK with default headers values
func NewPatchV1AdmissionStateOK() *PatchV1AdmissionStateOK {
	return &PatchV1AdmissionStateOK{}
}

/*
PatchV1AdmissionStateOK describes a response with status code 200, with default header values.

Success
*/
type PatchV1AdmissionStateOK struct {
}

// IsSuccess returns true when this patch v1 admission state o k response has a 2xx status code
func (o *PatchV1AdmissionStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 admission state o k response has a 3xx status code
func (o *PatchV1AdmissionStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 admission state o k response has a 4xx status code
func (o *PatchV1AdmissionStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 admission state o k response has a 5xx status code
func (o *PatchV1AdmissionStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 admission state o k response a status code equal to that given
func (o *PatchV1AdmissionStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch v1 admission state o k response
func (o *PatchV1AdmissionStateOK) Code() int {
	return 200
}

func (o *PatchV1AdmissionStateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/admission/state][%d] patchV1AdmissionStateOK ", 200)
}

func (o *PatchV1AdmissionStateOK) String() string {
	return fmt.Sprintf("[PATCH /v1/admission/state][%d] patchV1AdmissionStateOK ", 200)
}

func (o *PatchV1AdmissionStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchV1AdmissionStateNotFound creates a PatchV1AdmissionStateNotFound with default headers values
func NewPatchV1AdmissionStateNotFound() *PatchV1AdmissionStateNotFound {
	return &PatchV1AdmissionStateNotFound{}
}

/*
PatchV1AdmissionStateNotFound describes a response with status code 404, with default header values.

Operation not allowed
*/
type PatchV1AdmissionStateNotFound struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this patch v1 admission state not found response has a 2xx status code
func (o *PatchV1AdmissionStateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 admission state not found response has a 3xx status code
func (o *PatchV1AdmissionStateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 admission state not found response has a 4xx status code
func (o *PatchV1AdmissionStateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 admission state not found response has a 5xx status code
func (o *PatchV1AdmissionStateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 admission state not found response a status code equal to that given
func (o *PatchV1AdmissionStateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch v1 admission state not found response
func (o *PatchV1AdmissionStateNotFound) Code() int {
	return 404
}

func (o *PatchV1AdmissionStateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/admission/state][%d] patchV1AdmissionStateNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1AdmissionStateNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/admission/state][%d] patchV1AdmissionStateNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1AdmissionStateNotFound) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *PatchV1AdmissionStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
