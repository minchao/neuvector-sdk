// Code generated by go-swagger; DO NOT EDIT.

package d_l_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// NewPatchV1DlpSensorNameParams creates a new PatchV1DlpSensorNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchV1DlpSensorNameParams() *PatchV1DlpSensorNameParams {
	return &PatchV1DlpSensorNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchV1DlpSensorNameParamsWithTimeout creates a new PatchV1DlpSensorNameParams object
// with the ability to set a timeout on a request.
func NewPatchV1DlpSensorNameParamsWithTimeout(timeout time.Duration) *PatchV1DlpSensorNameParams {
	return &PatchV1DlpSensorNameParams{
		timeout: timeout,
	}
}

// NewPatchV1DlpSensorNameParamsWithContext creates a new PatchV1DlpSensorNameParams object
// with the ability to set a context for a request.
func NewPatchV1DlpSensorNameParamsWithContext(ctx context.Context) *PatchV1DlpSensorNameParams {
	return &PatchV1DlpSensorNameParams{
		Context: ctx,
	}
}

// NewPatchV1DlpSensorNameParamsWithHTTPClient creates a new PatchV1DlpSensorNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchV1DlpSensorNameParamsWithHTTPClient(client *http.Client) *PatchV1DlpSensorNameParams {
	return &PatchV1DlpSensorNameParams{
		HTTPClient: client,
	}
}

/*
PatchV1DlpSensorNameParams contains all the parameters to send to the API endpoint

	for the patch v1 dlp sensor name operation.

	Typically these are written to a http.Request.
*/
type PatchV1DlpSensorNameParams struct {

	// XAuthToken.
	XAuthToken string

	/* Body.

	   Sensor data
	*/
	Body *models.RESTDlpSensorConfigData

	/* Name.

	   Sensor name
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch v1 dlp sensor name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1DlpSensorNameParams) WithDefaults() *PatchV1DlpSensorNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch v1 dlp sensor name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1DlpSensorNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithTimeout(timeout time.Duration) *PatchV1DlpSensorNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithContext(ctx context.Context) *PatchV1DlpSensorNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithHTTPClient(client *http.Client) *PatchV1DlpSensorNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithXAuthToken(xAuthToken string) *PatchV1DlpSensorNameParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithBody adds the body to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithBody(body *models.RESTDlpSensorConfigData) *PatchV1DlpSensorNameParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetBody(body *models.RESTDlpSensorConfigData) {
	o.Body = body
}

// WithName adds the name to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) WithName(name string) *PatchV1DlpSensorNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the patch v1 dlp sensor name params
func (o *PatchV1DlpSensorNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PatchV1DlpSensorNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
