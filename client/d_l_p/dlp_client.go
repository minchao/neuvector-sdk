// Code generated by go-swagger; DO NOT EDIT.

package d_l_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new d l p API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d l p API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1DlpSensorName(params *DeleteV1DlpSensorNameParams, opts ...ClientOption) (*DeleteV1DlpSensorNameOK, error)

	GetV1DlpGroup(params *GetV1DlpGroupParams, opts ...ClientOption) (*GetV1DlpGroupOK, error)

	GetV1DlpGroupName(params *GetV1DlpGroupNameParams, opts ...ClientOption) (*GetV1DlpGroupNameOK, error)

	GetV1DlpRule(params *GetV1DlpRuleParams, opts ...ClientOption) (*GetV1DlpRuleOK, error)

	GetV1DlpRuleName(params *GetV1DlpRuleNameParams, opts ...ClientOption) (*GetV1DlpRuleNameOK, error)

	GetV1DlpSensor(params *GetV1DlpSensorParams, opts ...ClientOption) (*GetV1DlpSensorOK, error)

	GetV1DlpSensorName(params *GetV1DlpSensorNameParams, opts ...ClientOption) (*GetV1DlpSensorNameOK, error)

	PatchV1DlpGroupName(params *PatchV1DlpGroupNameParams, opts ...ClientOption) (*PatchV1DlpGroupNameOK, error)

	PatchV1DlpSensorName(params *PatchV1DlpSensorNameParams, opts ...ClientOption) (*PatchV1DlpSensorNameOK, error)

	PostV1DlpSensor(params *PostV1DlpSensorParams, opts ...ClientOption) (*PostV1DlpSensorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1DlpSensorName deletes d l p sensor
*/
func (a *Client) DeleteV1DlpSensorName(params *DeleteV1DlpSensorNameParams, opts ...ClientOption) (*DeleteV1DlpSensorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1DlpSensorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1DlpSensorName",
		Method:             "DELETE",
		PathPattern:        "/v1/dlp/sensor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1DlpSensorNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1DlpSensorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1DlpSensorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpGroup gets d l p group list
*/
func (a *Client) GetV1DlpGroup(params *GetV1DlpGroupParams, opts ...ClientOption) (*GetV1DlpGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpGroup",
		Method:             "GET",
		PathPattern:        "/v1/dlp/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpGroupName gets d l p group detail
*/
func (a *Client) GetV1DlpGroupName(params *GetV1DlpGroupNameParams, opts ...ClientOption) (*GetV1DlpGroupNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpGroupNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpGroupName",
		Method:             "GET",
		PathPattern:        "/v1/dlp/group/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpGroupNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpGroupNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpGroupName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpRule gets all d l p rules
*/
func (a *Client) GetV1DlpRule(params *GetV1DlpRuleParams, opts ...ClientOption) (*GetV1DlpRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpRule",
		Method:             "GET",
		PathPattern:        "/v1/dlp/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpRuleName gets d l p rule
*/
func (a *Client) GetV1DlpRuleName(params *GetV1DlpRuleNameParams, opts ...ClientOption) (*GetV1DlpRuleNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpRuleNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpRuleName",
		Method:             "GET",
		PathPattern:        "/v1/dlp/rule/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpRuleNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpRuleNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpRuleName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpSensor gets d l p sensors
*/
func (a *Client) GetV1DlpSensor(params *GetV1DlpSensorParams, opts ...ClientOption) (*GetV1DlpSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpSensorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpSensor",
		Method:             "GET",
		PathPattern:        "/v1/dlp/sensor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpSensorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DlpSensorName gets d l p sensor detail
*/
func (a *Client) GetV1DlpSensorName(params *GetV1DlpSensorNameParams, opts ...ClientOption) (*GetV1DlpSensorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DlpSensorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DlpSensorName",
		Method:             "GET",
		PathPattern:        "/v1/dlp/sensor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DlpSensorNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DlpSensorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DlpSensorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1DlpGroupName configures d l p group
*/
func (a *Client) PatchV1DlpGroupName(params *PatchV1DlpGroupNameParams, opts ...ClientOption) (*PatchV1DlpGroupNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1DlpGroupNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1DlpGroupName",
		Method:             "PATCH",
		PathPattern:        "/v1/dlp/group/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1DlpGroupNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1DlpGroupNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1DlpGroupName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1DlpSensorName configures d l p sensor
*/
func (a *Client) PatchV1DlpSensorName(params *PatchV1DlpSensorNameParams, opts ...ClientOption) (*PatchV1DlpSensorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1DlpSensorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1DlpSensorName",
		Method:             "PATCH",
		PathPattern:        "/v1/dlp/sensor/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1DlpSensorNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1DlpSensorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1DlpSensorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1DlpSensor creates d l p sensor
*/
func (a *Client) PostV1DlpSensor(params *PostV1DlpSensorParams, opts ...ClientOption) (*PostV1DlpSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DlpSensorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1DlpSensor",
		Method:             "POST",
		PathPattern:        "/v1/dlp/sensor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1DlpSensorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DlpSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1DlpSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
