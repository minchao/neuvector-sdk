// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// PatchV1UserFullnameReader is a Reader for the PatchV1UserFullname structure.
type PatchV1UserFullnameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1UserFullnameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchV1UserFullnameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchV1UserFullnameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/user/{fullname}] PatchV1UserFullname", response, response.Code())
	}
}

// NewPatchV1UserFullnameOK creates a PatchV1UserFullnameOK with default headers values
func NewPatchV1UserFullnameOK() *PatchV1UserFullnameOK {
	return &PatchV1UserFullnameOK{}
}

/*
PatchV1UserFullnameOK describes a response with status code 200, with default header values.

Success
*/
type PatchV1UserFullnameOK struct {
}

// IsSuccess returns true when this patch v1 user fullname o k response has a 2xx status code
func (o *PatchV1UserFullnameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 user fullname o k response has a 3xx status code
func (o *PatchV1UserFullnameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 user fullname o k response has a 4xx status code
func (o *PatchV1UserFullnameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 user fullname o k response has a 5xx status code
func (o *PatchV1UserFullnameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 user fullname o k response a status code equal to that given
func (o *PatchV1UserFullnameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch v1 user fullname o k response
func (o *PatchV1UserFullnameOK) Code() int {
	return 200
}

func (o *PatchV1UserFullnameOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/user/{fullname}][%d] patchV1UserFullnameOK ", 200)
}

func (o *PatchV1UserFullnameOK) String() string {
	return fmt.Sprintf("[PATCH /v1/user/{fullname}][%d] patchV1UserFullnameOK ", 200)
}

func (o *PatchV1UserFullnameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchV1UserFullnameForbidden creates a PatchV1UserFullnameForbidden with default headers values
func NewPatchV1UserFullnameForbidden() *PatchV1UserFullnameForbidden {
	return &PatchV1UserFullnameForbidden{}
}

/*
PatchV1UserFullnameForbidden describes a response with status code 403, with default header values.

Error
*/
type PatchV1UserFullnameForbidden struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this patch v1 user fullname forbidden response has a 2xx status code
func (o *PatchV1UserFullnameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 user fullname forbidden response has a 3xx status code
func (o *PatchV1UserFullnameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 user fullname forbidden response has a 4xx status code
func (o *PatchV1UserFullnameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 user fullname forbidden response has a 5xx status code
func (o *PatchV1UserFullnameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 user fullname forbidden response a status code equal to that given
func (o *PatchV1UserFullnameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch v1 user fullname forbidden response
func (o *PatchV1UserFullnameForbidden) Code() int {
	return 403
}

func (o *PatchV1UserFullnameForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/user/{fullname}][%d] patchV1UserFullnameForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1UserFullnameForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/user/{fullname}][%d] patchV1UserFullnameForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1UserFullnameForbidden) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *PatchV1UserFullnameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
