// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apikey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apikey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1APIKeyAccesskey(params *DeleteV1APIKeyAccesskeyParams, opts ...ClientOption) (*DeleteV1APIKeyAccesskeyOK, error)

	GetV1APIKey(params *GetV1APIKeyParams, opts ...ClientOption) (*GetV1APIKeyOK, error)

	GetV1APIKeyAccesskey(params *GetV1APIKeyAccesskeyParams, opts ...ClientOption) (*GetV1APIKeyAccesskeyOK, error)

	PostV1APIKey(params *PostV1APIKeyParams, opts ...ClientOption) (*PostV1APIKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1APIKeyAccesskey deletes apikey
*/
func (a *Client) DeleteV1APIKeyAccesskey(params *DeleteV1APIKeyAccesskeyParams, opts ...ClientOption) (*DeleteV1APIKeyAccesskeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1APIKeyAccesskeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1APIKeyAccesskey",
		Method:             "DELETE",
		PathPattern:        "/v1/api_key/{accesskey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1APIKeyAccesskeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1APIKeyAccesskeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1APIKeyAccesskey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1APIKey gets a list of apikeys
*/
func (a *Client) GetV1APIKey(params *GetV1APIKeyParams, opts ...ClientOption) (*GetV1APIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1APIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1APIKey",
		Method:             "GET",
		PathPattern:        "/v1/api_key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1APIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1APIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1APIKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1APIKeyAccesskey gets an apikey
*/
func (a *Client) GetV1APIKeyAccesskey(params *GetV1APIKeyAccesskeyParams, opts ...ClientOption) (*GetV1APIKeyAccesskeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1APIKeyAccesskeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1APIKeyAccesskey",
		Method:             "GET",
		PathPattern:        "/v1/api_key/{accesskey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1APIKeyAccesskeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1APIKeyAccesskeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1APIKeyAccesskey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1APIKey creates an apikey
*/
func (a *Client) PostV1APIKey(params *PostV1APIKeyParams, opts ...ClientOption) (*PostV1APIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1APIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1APIKey",
		Method:             "POST",
		PathPattern:        "/v1/api_key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1APIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1APIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1APIKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
