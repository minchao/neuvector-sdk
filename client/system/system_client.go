// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1SystemConfigWebhookName(params *DeleteV1SystemConfigWebhookNameParams, opts ...ClientOption) (*DeleteV1SystemConfigWebhookNameOK, error)

	DeleteV1SystemLicense(params *DeleteV1SystemLicenseParams, opts ...ClientOption) (*DeleteV1SystemLicenseOK, error)

	GetV1SystemConfig(params *GetV1SystemConfigParams, opts ...ClientOption) (*GetV1SystemConfigOK, error)

	GetV1SystemLicense(params *GetV1SystemLicenseParams, opts ...ClientOption) (*GetV1SystemLicenseOK, error)

	GetV1SystemSummary(params *GetV1SystemSummaryParams, opts ...ClientOption) (*GetV1SystemSummaryOK, error)

	GetV2SystemConfig(params *GetV2SystemConfigParams, opts ...ClientOption) (*GetV2SystemConfigOK, error)

	PatchV1SystemConfig(params *PatchV1SystemConfigParams, opts ...ClientOption) (*PatchV1SystemConfigOK, error)

	PatchV1SystemConfigWebhookName(params *PatchV1SystemConfigWebhookNameParams, opts ...ClientOption) (*PatchV1SystemConfigWebhookNameOK, error)

	PostV1SystemConfigWebhook(params *PostV1SystemConfigWebhookParams, opts ...ClientOption) (*PostV1SystemConfigWebhookOK, error)

	PostV1SystemLicenseUpdate(params *PostV1SystemLicenseUpdateParams, opts ...ClientOption) (*PostV1SystemLicenseUpdateOK, error)

	PostV1SystemRequest(params *PostV1SystemRequestParams, opts ...ClientOption) (*PostV1SystemRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1SystemConfigWebhookName deletes system webhook
*/
func (a *Client) DeleteV1SystemConfigWebhookName(params *DeleteV1SystemConfigWebhookNameParams, opts ...ClientOption) (*DeleteV1SystemConfigWebhookNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SystemConfigWebhookNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1SystemConfigWebhookName",
		Method:             "DELETE",
		PathPattern:        "/v1/system/config/webhook/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SystemConfigWebhookNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SystemConfigWebhookNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1SystemConfigWebhookName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SystemLicense deletes license
*/
func (a *Client) DeleteV1SystemLicense(params *DeleteV1SystemLicenseParams, opts ...ClientOption) (*DeleteV1SystemLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SystemLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1SystemLicense",
		Method:             "DELETE",
		PathPattern:        "/v1/system/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SystemLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SystemLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1SystemLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SystemConfig systems get configure
*/
func (a *Client) GetV1SystemConfig(params *GetV1SystemConfigParams, opts ...ClientOption) (*GetV1SystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SystemConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SystemConfig",
		Method:             "GET",
		PathPattern:        "/v1/system/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SystemConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SystemLicense shows license
*/
func (a *Client) GetV1SystemLicense(params *GetV1SystemLicenseParams, opts ...ClientOption) (*GetV1SystemLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SystemLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SystemLicense",
		Method:             "GET",
		PathPattern:        "/v1/system/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SystemLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SystemLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SystemLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SystemSummary systems summary
*/
func (a *Client) GetV1SystemSummary(params *GetV1SystemSummaryParams, opts ...ClientOption) (*GetV1SystemSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SystemSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SystemSummary",
		Method:             "GET",
		PathPattern:        "/v1/system/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SystemSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SystemSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SystemSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV2SystemConfig gets system configuration starting from 5 0 rest client should call this api
*/
func (a *Client) GetV2SystemConfig(params *GetV2SystemConfigParams, opts ...ClientOption) (*GetV2SystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV2SystemConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV2SystemConfig",
		Method:             "GET",
		PathPattern:        "/v2/system/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV2SystemConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV2SystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV2SystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SystemConfig systems configure
*/
func (a *Client) PatchV1SystemConfig(params *PatchV1SystemConfigParams, opts ...ClientOption) (*PatchV1SystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SystemConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1SystemConfig",
		Method:             "PATCH",
		PathPattern:        "/v1/system/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SystemConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1SystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SystemConfigWebhookName configures system webhook
*/
func (a *Client) PatchV1SystemConfigWebhookName(params *PatchV1SystemConfigWebhookNameParams, opts ...ClientOption) (*PatchV1SystemConfigWebhookNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SystemConfigWebhookNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1SystemConfigWebhookName",
		Method:             "PATCH",
		PathPattern:        "/v1/system/config/webhook/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SystemConfigWebhookNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SystemConfigWebhookNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1SystemConfigWebhookName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SystemConfigWebhook creates system webhook
*/
func (a *Client) PostV1SystemConfigWebhook(params *PostV1SystemConfigWebhookParams, opts ...ClientOption) (*PostV1SystemConfigWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SystemConfigWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1SystemConfigWebhook",
		Method:             "POST",
		PathPattern:        "/v1/system/config/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SystemConfigWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SystemConfigWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1SystemConfigWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SystemLicenseUpdate licenses update
*/
func (a *Client) PostV1SystemLicenseUpdate(params *PostV1SystemLicenseUpdateParams, opts ...ClientOption) (*PostV1SystemLicenseUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SystemLicenseUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1SystemLicenseUpdate",
		Method:             "POST",
		PathPattern:        "/v1/system/license/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SystemLicenseUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SystemLicenseUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1SystemLicenseUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SystemRequest systems request
*/
func (a *Client) PostV1SystemRequest(params *PostV1SystemRequestParams, opts ...ClientOption) (*PostV1SystemRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SystemRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1SystemRequest",
		Method:             "POST",
		PathPattern:        "/v1/system/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SystemRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SystemRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1SystemRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
