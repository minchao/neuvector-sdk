// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PatchV1ServerNameRoleRoleReader is a Reader for the PatchV1ServerNameRoleRole structure.
type PatchV1ServerNameRoleRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1ServerNameRoleRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchV1ServerNameRoleRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/server/{name}/role/{role}] PatchV1ServerNameRoleRole", response, response.Code())
	}
}

// NewPatchV1ServerNameRoleRoleOK creates a PatchV1ServerNameRoleRoleOK with default headers values
func NewPatchV1ServerNameRoleRoleOK() *PatchV1ServerNameRoleRoleOK {
	return &PatchV1ServerNameRoleRoleOK{}
}

/*
PatchV1ServerNameRoleRoleOK describes a response with status code 200, with default header values.

Success
*/
type PatchV1ServerNameRoleRoleOK struct {
}

// IsSuccess returns true when this patch v1 server name role role o k response has a 2xx status code
func (o *PatchV1ServerNameRoleRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 server name role role o k response has a 3xx status code
func (o *PatchV1ServerNameRoleRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 server name role role o k response has a 4xx status code
func (o *PatchV1ServerNameRoleRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 server name role role o k response has a 5xx status code
func (o *PatchV1ServerNameRoleRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 server name role role o k response a status code equal to that given
func (o *PatchV1ServerNameRoleRoleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch v1 server name role role o k response
func (o *PatchV1ServerNameRoleRoleOK) Code() int {
	return 200
}

func (o *PatchV1ServerNameRoleRoleOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/server/{name}/role/{role}][%d] patchV1ServerNameRoleRoleOK ", 200)
}

func (o *PatchV1ServerNameRoleRoleOK) String() string {
	return fmt.Sprintf("[PATCH /v1/server/{name}/role/{role}][%d] patchV1ServerNameRoleRoleOK ", 200)
}

func (o *PatchV1ServerNameRoleRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
