// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ServerName(params *DeleteV1ServerNameParams, opts ...ClientOption) (*DeleteV1ServerNameOK, error)

	GetV1Server(params *GetV1ServerParams, opts ...ClientOption) (*GetV1ServerOK, error)

	GetV1ServerName(params *GetV1ServerNameParams, opts ...ClientOption) (*GetV1ServerNameOK, error)

	GetV1ServerNameUser(params *GetV1ServerNameUserParams, opts ...ClientOption) (*GetV1ServerNameUserOK, error)

	PatchV1ServerName(params *PatchV1ServerNameParams, opts ...ClientOption) (*PatchV1ServerNameOK, error)

	PatchV1ServerNameRoleRole(params *PatchV1ServerNameRoleRoleParams, opts ...ClientOption) (*PatchV1ServerNameRoleRoleOK, error)

	PostV1Server(params *PostV1ServerParams, opts ...ClientOption) (*PostV1ServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ServerName deletes the server
*/
func (a *Client) DeleteV1ServerName(params *DeleteV1ServerNameParams, opts ...ClientOption) (*DeleteV1ServerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ServerNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ServerName",
		Method:             "DELETE",
		PathPattern:        "/v1/server/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ServerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ServerNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ServerName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Server gets a list of servers
*/
func (a *Client) GetV1Server(params *GetV1ServerParams, opts ...ClientOption) (*GetV1ServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Server",
		Method:             "GET",
		PathPattern:        "/v1/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ServerName shows server
*/
func (a *Client) GetV1ServerName(params *GetV1ServerNameParams, opts ...ClientOption) (*GetV1ServerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServerNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ServerName",
		Method:             "GET",
		PathPattern:        "/v1/server/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ServerNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ServerName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ServerNameUser shows server user list
*/
func (a *Client) GetV1ServerNameUser(params *GetV1ServerNameUserParams, opts ...ClientOption) (*GetV1ServerNameUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServerNameUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ServerNameUser",
		Method:             "GET",
		PathPattern:        "/v1/server/{name}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServerNameUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ServerNameUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ServerNameUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ServerName updates server
*/
func (a *Client) PatchV1ServerName(params *PatchV1ServerNameParams, opts ...ClientOption) (*PatchV1ServerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ServerNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ServerName",
		Method:             "PATCH",
		PathPattern:        "/v1/server/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ServerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ServerNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ServerName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ServerNameRoleRole updates server role groups
*/
func (a *Client) PatchV1ServerNameRoleRole(params *PatchV1ServerNameRoleRoleParams, opts ...ClientOption) (*PatchV1ServerNameRoleRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ServerNameRoleRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ServerNameRoleRole",
		Method:             "PATCH",
		PathPattern:        "/v1/server/{name}/role/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ServerNameRoleRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ServerNameRoleRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ServerNameRoleRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Server creates server
*/
func (a *Client) PostV1Server(params *PostV1ServerParams, opts ...ClientOption) (*PostV1ServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Server",
		Method:             "POST",
		PathPattern:        "/v1/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
