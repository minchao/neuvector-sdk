// Code generated by go-swagger; DO NOT EDIT.

package response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new response rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for response rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ResponseRule(params *DeleteV1ResponseRuleParams, opts ...ClientOption) (*DeleteV1ResponseRuleOK, error)

	DeleteV1ResponseRuleID(params *DeleteV1ResponseRuleIDParams, opts ...ClientOption) (*DeleteV1ResponseRuleIDOK, error)

	GetV1ResponseRule(params *GetV1ResponseRuleParams, opts ...ClientOption) (*GetV1ResponseRuleOK, error)

	GetV1ResponseRuleID(params *GetV1ResponseRuleIDParams, opts ...ClientOption) (*GetV1ResponseRuleIDOK, error)

	GetV1ResponseWorkloadRulesID(params *GetV1ResponseWorkloadRulesIDParams, opts ...ClientOption) (*GetV1ResponseWorkloadRulesIDOK, error)

	PatchV1ResponseRule(params *PatchV1ResponseRuleParams, opts ...ClientOption) (*PatchV1ResponseRuleOK, error)

	PatchV1ResponseRuleID(params *PatchV1ResponseRuleIDParams, opts ...ClientOption) (*PatchV1ResponseRuleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ResponseRule deletes all response rules
*/
func (a *Client) DeleteV1ResponseRule(params *DeleteV1ResponseRuleParams, opts ...ClientOption) (*DeleteV1ResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ResponseRule",
		Method:             "DELETE",
		PathPattern:        "/v1/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ResponseRuleID deletes a response rule
*/
func (a *Client) DeleteV1ResponseRuleID(params *DeleteV1ResponseRuleIDParams, opts ...ClientOption) (*DeleteV1ResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ResponseRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ResponseRuleID",
		Method:             "DELETE",
		PathPattern:        "/v1/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ResponseRule gets a list of response rules
*/
func (a *Client) GetV1ResponseRule(params *GetV1ResponseRuleParams, opts ...ClientOption) (*GetV1ResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ResponseRule",
		Method:             "GET",
		PathPattern:        "/v1/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ResponseRuleID gets a response rule
*/
func (a *Client) GetV1ResponseRuleID(params *GetV1ResponseRuleIDParams, opts ...ClientOption) (*GetV1ResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ResponseRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ResponseRuleID",
		Method:             "GET",
		PathPattern:        "/v1/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ResponseWorkloadRulesID gets response rule workload
*/
func (a *Client) GetV1ResponseWorkloadRulesID(params *GetV1ResponseWorkloadRulesIDParams, opts ...ClientOption) (*GetV1ResponseWorkloadRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ResponseWorkloadRulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ResponseWorkloadRulesID",
		Method:             "GET",
		PathPattern:        "/v1/response/workload_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ResponseWorkloadRulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ResponseWorkloadRulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ResponseWorkloadRulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ResponseRule updates response rule action
*/
func (a *Client) PatchV1ResponseRule(params *PatchV1ResponseRuleParams, opts ...ClientOption) (*PatchV1ResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ResponseRule",
		Method:             "PATCH",
		PathPattern:        "/v1/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ResponseRuleID updates a response rule
*/
func (a *Client) PatchV1ResponseRuleID(params *PatchV1ResponseRuleIDParams, opts ...ClientOption) (*PatchV1ResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ResponseRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ResponseRuleID",
		Method:             "PATCH",
		PathPattern:        "/v1/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
