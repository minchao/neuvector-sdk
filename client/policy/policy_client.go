// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1PolicyRule(params *DeleteV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PolicyRuleOK, error)

	DeleteV1PolicyRuleID(params *DeleteV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PolicyRuleIDOK, error)

	GetV1PolicyRule(params *GetV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PolicyRuleOK, error)

	GetV1PolicyRuleID(params *GetV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PolicyRuleIDOK, error)

	PatchV1PolicyRule(params *PatchV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PolicyRuleOK, error)

	PatchV1PolicyRuleID(params *PatchV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PolicyRuleIDOK, error)

	PostV1PolicyRulesPromote(params *PostV1PolicyRulesPromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PolicyRulesPromoteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1PolicyRule deletes all policy rules
*/
func (a *Client) DeleteV1PolicyRule(params *DeleteV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PolicyRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PolicyRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1PolicyRule",
		Method:             "DELETE",
		PathPattern:        "/v1/policy/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1PolicyRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1PolicyRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1PolicyRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1PolicyRuleID deletes policy rule
*/
func (a *Client) DeleteV1PolicyRuleID(params *DeleteV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PolicyRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PolicyRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1PolicyRuleID",
		Method:             "DELETE",
		PathPattern:        "/v1/policy/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1PolicyRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1PolicyRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1PolicyRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PolicyRule gets a list of policy rules
*/
func (a *Client) GetV1PolicyRule(params *GetV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PolicyRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PolicyRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1PolicyRule",
		Method:             "GET",
		PathPattern:        "/v1/policy/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PolicyRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PolicyRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1PolicyRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PolicyRuleID shows policy rule
*/
func (a *Client) GetV1PolicyRuleID(params *GetV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PolicyRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PolicyRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1PolicyRuleID",
		Method:             "GET",
		PathPattern:        "/v1/policy/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PolicyRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PolicyRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1PolicyRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PolicyRule policies rule action
*/
func (a *Client) PatchV1PolicyRule(params *PatchV1PolicyRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PolicyRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PolicyRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1PolicyRule",
		Method:             "PATCH",
		PathPattern:        "/v1/policy/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PolicyRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PolicyRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1PolicyRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PolicyRuleID updates policy rule
*/
func (a *Client) PatchV1PolicyRuleID(params *PatchV1PolicyRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PolicyRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PolicyRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1PolicyRuleID",
		Method:             "PATCH",
		PathPattern:        "/v1/policy/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PolicyRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PolicyRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1PolicyRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1PolicyRulesPromote promotes policy
*/
func (a *Client) PostV1PolicyRulesPromote(params *PostV1PolicyRulesPromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PolicyRulesPromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PolicyRulesPromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1PolicyRulesPromote",
		Method:             "POST",
		PathPattern:        "/v1/policy/rules/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PolicyRulesPromoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PolicyRulesPromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1PolicyRulesPromote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
