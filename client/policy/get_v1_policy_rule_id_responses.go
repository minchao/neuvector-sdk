// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// GetV1PolicyRuleIDReader is a Reader for the GetV1PolicyRuleID structure.
type GetV1PolicyRuleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1PolicyRuleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1PolicyRuleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1PolicyRuleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetV1PolicyRuleIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/policy/rule/{id}] GetV1PolicyRuleID", response, response.Code())
	}
}

// NewGetV1PolicyRuleIDOK creates a GetV1PolicyRuleIDOK with default headers values
func NewGetV1PolicyRuleIDOK() *GetV1PolicyRuleIDOK {
	return &GetV1PolicyRuleIDOK{}
}

/*
GetV1PolicyRuleIDOK describes a response with status code 200, with default header values.

Success
*/
type GetV1PolicyRuleIDOK struct {
	Payload *models.RESTPolicyRuleData
}

// IsSuccess returns true when this get v1 policy rule Id o k response has a 2xx status code
func (o *GetV1PolicyRuleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 policy rule Id o k response has a 3xx status code
func (o *GetV1PolicyRuleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 policy rule Id o k response has a 4xx status code
func (o *GetV1PolicyRuleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 policy rule Id o k response has a 5xx status code
func (o *GetV1PolicyRuleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 policy rule Id o k response a status code equal to that given
func (o *GetV1PolicyRuleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 policy rule Id o k response
func (o *GetV1PolicyRuleIDOK) Code() int {
	return 200
}

func (o *GetV1PolicyRuleIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdOK  %+v", 200, o.Payload)
}

func (o *GetV1PolicyRuleIDOK) String() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdOK  %+v", 200, o.Payload)
}

func (o *GetV1PolicyRuleIDOK) GetPayload() *models.RESTPolicyRuleData {
	return o.Payload
}

func (o *GetV1PolicyRuleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTPolicyRuleData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1PolicyRuleIDBadRequest creates a GetV1PolicyRuleIDBadRequest with default headers values
func NewGetV1PolicyRuleIDBadRequest() *GetV1PolicyRuleIDBadRequest {
	return &GetV1PolicyRuleIDBadRequest{}
}

/*
GetV1PolicyRuleIDBadRequest describes a response with status code 400, with default header values.

Error
*/
type GetV1PolicyRuleIDBadRequest struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this get v1 policy rule Id bad request response has a 2xx status code
func (o *GetV1PolicyRuleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 policy rule Id bad request response has a 3xx status code
func (o *GetV1PolicyRuleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 policy rule Id bad request response has a 4xx status code
func (o *GetV1PolicyRuleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 policy rule Id bad request response has a 5xx status code
func (o *GetV1PolicyRuleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 policy rule Id bad request response a status code equal to that given
func (o *GetV1PolicyRuleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 policy rule Id bad request response
func (o *GetV1PolicyRuleIDBadRequest) Code() int {
	return 400
}

func (o *GetV1PolicyRuleIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1PolicyRuleIDBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1PolicyRuleIDBadRequest) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *GetV1PolicyRuleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1PolicyRuleIDNotFound creates a GetV1PolicyRuleIDNotFound with default headers values
func NewGetV1PolicyRuleIDNotFound() *GetV1PolicyRuleIDNotFound {
	return &GetV1PolicyRuleIDNotFound{}
}

/*
GetV1PolicyRuleIDNotFound describes a response with status code 404, with default header values.

Error
*/
type GetV1PolicyRuleIDNotFound struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this get v1 policy rule Id not found response has a 2xx status code
func (o *GetV1PolicyRuleIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 policy rule Id not found response has a 3xx status code
func (o *GetV1PolicyRuleIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 policy rule Id not found response has a 4xx status code
func (o *GetV1PolicyRuleIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 policy rule Id not found response has a 5xx status code
func (o *GetV1PolicyRuleIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 policy rule Id not found response a status code equal to that given
func (o *GetV1PolicyRuleIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v1 policy rule Id not found response
func (o *GetV1PolicyRuleIDNotFound) Code() int {
	return 404
}

func (o *GetV1PolicyRuleIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdNotFound  %+v", 404, o.Payload)
}

func (o *GetV1PolicyRuleIDNotFound) String() string {
	return fmt.Sprintf("[GET /v1/policy/rule/{id}][%d] getV1PolicyRuleIdNotFound  %+v", 404, o.Payload)
}

func (o *GetV1PolicyRuleIDNotFound) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *GetV1PolicyRuleIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
