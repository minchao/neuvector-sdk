// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// GetV1WorkloadIDProcessReader is a Reader for the GetV1WorkloadIDProcess structure.
type GetV1WorkloadIDProcessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1WorkloadIDProcessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1WorkloadIDProcessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1WorkloadIDProcessBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/workload/{id}/process] GetV1WorkloadIDProcess", response, response.Code())
	}
}

// NewGetV1WorkloadIDProcessOK creates a GetV1WorkloadIDProcessOK with default headers values
func NewGetV1WorkloadIDProcessOK() *GetV1WorkloadIDProcessOK {
	return &GetV1WorkloadIDProcessOK{}
}

/*
GetV1WorkloadIDProcessOK describes a response with status code 200, with default header values.

Success
*/
type GetV1WorkloadIDProcessOK struct {
	Payload *models.RESTProcessList
}

// IsSuccess returns true when this get v1 workload Id process o k response has a 2xx status code
func (o *GetV1WorkloadIDProcessOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 workload Id process o k response has a 3xx status code
func (o *GetV1WorkloadIDProcessOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 workload Id process o k response has a 4xx status code
func (o *GetV1WorkloadIDProcessOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 workload Id process o k response has a 5xx status code
func (o *GetV1WorkloadIDProcessOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 workload Id process o k response a status code equal to that given
func (o *GetV1WorkloadIDProcessOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 workload Id process o k response
func (o *GetV1WorkloadIDProcessOK) Code() int {
	return 200
}

func (o *GetV1WorkloadIDProcessOK) Error() string {
	return fmt.Sprintf("[GET /v1/workload/{id}/process][%d] getV1WorkloadIdProcessOK  %+v", 200, o.Payload)
}

func (o *GetV1WorkloadIDProcessOK) String() string {
	return fmt.Sprintf("[GET /v1/workload/{id}/process][%d] getV1WorkloadIdProcessOK  %+v", 200, o.Payload)
}

func (o *GetV1WorkloadIDProcessOK) GetPayload() *models.RESTProcessList {
	return o.Payload
}

func (o *GetV1WorkloadIDProcessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTProcessList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1WorkloadIDProcessBadRequest creates a GetV1WorkloadIDProcessBadRequest with default headers values
func NewGetV1WorkloadIDProcessBadRequest() *GetV1WorkloadIDProcessBadRequest {
	return &GetV1WorkloadIDProcessBadRequest{}
}

/*
GetV1WorkloadIDProcessBadRequest describes a response with status code 400, with default header values.

Container not running
*/
type GetV1WorkloadIDProcessBadRequest struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this get v1 workload Id process bad request response has a 2xx status code
func (o *GetV1WorkloadIDProcessBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 workload Id process bad request response has a 3xx status code
func (o *GetV1WorkloadIDProcessBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 workload Id process bad request response has a 4xx status code
func (o *GetV1WorkloadIDProcessBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 workload Id process bad request response has a 5xx status code
func (o *GetV1WorkloadIDProcessBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 workload Id process bad request response a status code equal to that given
func (o *GetV1WorkloadIDProcessBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 workload Id process bad request response
func (o *GetV1WorkloadIDProcessBadRequest) Code() int {
	return 400
}

func (o *GetV1WorkloadIDProcessBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/workload/{id}/process][%d] getV1WorkloadIdProcessBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1WorkloadIDProcessBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/workload/{id}/process][%d] getV1WorkloadIdProcessBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1WorkloadIDProcessBadRequest) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *GetV1WorkloadIDProcessBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
