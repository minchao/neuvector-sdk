// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1Auth(params *DeleteV1AuthParams, opts ...ClientOption) (*DeleteV1AuthOK, error)

	PatchV1Auth(params *PatchV1AuthParams, opts ...ClientOption) (*PatchV1AuthOK, error)

	PostV1Auth(params *PostV1AuthParams, opts ...ClientOption) (*PostV1AuthOK, error)

	PostV1AuthServer(params *PostV1AuthServerParams, opts ...ClientOption) (*PostV1AuthServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1Auth logouts current logged in user
*/
func (a *Client) DeleteV1Auth(params *DeleteV1AuthParams, opts ...ClientOption) (*DeleteV1AuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1AuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1Auth",
		Method:             "DELETE",
		PathPattern:        "/v1/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1AuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1AuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1Auth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1Auth keeps login session alive
*/
func (a *Client) PatchV1Auth(params *PatchV1AuthParams, opts ...ClientOption) (*PatchV1AuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1Auth",
		Method:             "PATCH",
		PathPattern:        "/v1/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1AuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1Auth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Auth logins authentication
*/
func (a *Client) PostV1Auth(params *PostV1AuthParams, opts ...ClientOption) (*PostV1AuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Auth",
		Method:             "POST",
		PathPattern:        "/v1/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1AuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Auth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AuthServer authenticates to specified server
*/
func (a *Client) PostV1AuthServer(params *PostV1AuthServerParams, opts ...ClientOption) (*PostV1AuthServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AuthServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AuthServer",
		Method:             "POST",
		PathPattern:        "/v1/auth/{server}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1AuthServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AuthServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AuthServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
