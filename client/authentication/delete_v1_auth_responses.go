// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/neuvector-sdk/models"
)

// DeleteV1AuthReader is a Reader for the DeleteV1Auth structure.
type DeleteV1AuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteV1AuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteV1AuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 408:
		result := NewDeleteV1AuthRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/auth] DeleteV1Auth", response, response.Code())
	}
}

// NewDeleteV1AuthOK creates a DeleteV1AuthOK with default headers values
func NewDeleteV1AuthOK() *DeleteV1AuthOK {
	return &DeleteV1AuthOK{}
}

/*
DeleteV1AuthOK describes a response with status code 200, with default header values.

Success
*/
type DeleteV1AuthOK struct {
}

// IsSuccess returns true when this delete v1 auth o k response has a 2xx status code
func (o *DeleteV1AuthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete v1 auth o k response has a 3xx status code
func (o *DeleteV1AuthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 auth o k response has a 4xx status code
func (o *DeleteV1AuthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v1 auth o k response has a 5xx status code
func (o *DeleteV1AuthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 auth o k response a status code equal to that given
func (o *DeleteV1AuthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete v1 auth o k response
func (o *DeleteV1AuthOK) Code() int {
	return 200
}

func (o *DeleteV1AuthOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/auth][%d] deleteV1AuthOK ", 200)
}

func (o *DeleteV1AuthOK) String() string {
	return fmt.Sprintf("[DELETE /v1/auth][%d] deleteV1AuthOK ", 200)
}

func (o *DeleteV1AuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1AuthRequestTimeout creates a DeleteV1AuthRequestTimeout with default headers values
func NewDeleteV1AuthRequestTimeout() *DeleteV1AuthRequestTimeout {
	return &DeleteV1AuthRequestTimeout{}
}

/*
DeleteV1AuthRequestTimeout describes a response with status code 408, with default header values.

Authentication failed
*/
type DeleteV1AuthRequestTimeout struct {
	Payload *models.RESTError
}

// IsSuccess returns true when this delete v1 auth request timeout response has a 2xx status code
func (o *DeleteV1AuthRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 auth request timeout response has a 3xx status code
func (o *DeleteV1AuthRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 auth request timeout response has a 4xx status code
func (o *DeleteV1AuthRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v1 auth request timeout response has a 5xx status code
func (o *DeleteV1AuthRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 auth request timeout response a status code equal to that given
func (o *DeleteV1AuthRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the delete v1 auth request timeout response
func (o *DeleteV1AuthRequestTimeout) Code() int {
	return 408
}

func (o *DeleteV1AuthRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /v1/auth][%d] deleteV1AuthRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteV1AuthRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /v1/auth][%d] deleteV1AuthRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteV1AuthRequestTimeout) GetPayload() *models.RESTError {
	return o.Payload
}

func (o *DeleteV1AuthRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RESTError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
