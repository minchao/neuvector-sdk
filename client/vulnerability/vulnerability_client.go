// Code generated by go-swagger; DO NOT EDIT.

package vulnerability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vulnerability API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vulnerability API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1VulnerabilityProfileNameEntryID(params *DeleteV1VulnerabilityProfileNameEntryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1VulnerabilityProfileNameEntryIDOK, error)

	GetV1VulnerabilityProfile(params *GetV1VulnerabilityProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1VulnerabilityProfileOK, error)

	GetV1VulnerabilityProfileName(params *GetV1VulnerabilityProfileNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1VulnerabilityProfileNameOK, error)

	PatchV1VulnerabilityProfileName(params *PatchV1VulnerabilityProfileNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1VulnerabilityProfileNameOK, error)

	PatchV1VulnerabilityProfileNameEntryID(params *PatchV1VulnerabilityProfileNameEntryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1VulnerabilityProfileNameEntryIDOK, error)

	PostV1VulnerabilityProfileNameEntry(params *PostV1VulnerabilityProfileNameEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1VulnerabilityProfileNameEntryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1VulnerabilityProfileNameEntryID deletes vulnerability profile entry
*/
func (a *Client) DeleteV1VulnerabilityProfileNameEntryID(params *DeleteV1VulnerabilityProfileNameEntryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1VulnerabilityProfileNameEntryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1VulnerabilityProfileNameEntryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1VulnerabilityProfileNameEntryID",
		Method:             "DELETE",
		PathPattern:        "/v1/vulnerability/profile/{name}/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1VulnerabilityProfileNameEntryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1VulnerabilityProfileNameEntryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1VulnerabilityProfileNameEntryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1VulnerabilityProfile gets vulnerability profile list
*/
func (a *Client) GetV1VulnerabilityProfile(params *GetV1VulnerabilityProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1VulnerabilityProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1VulnerabilityProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1VulnerabilityProfile",
		Method:             "GET",
		PathPattern:        "/v1/vulnerability/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1VulnerabilityProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1VulnerabilityProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1VulnerabilityProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1VulnerabilityProfileName gets vulnerability profile detail
*/
func (a *Client) GetV1VulnerabilityProfileName(params *GetV1VulnerabilityProfileNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1VulnerabilityProfileNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1VulnerabilityProfileNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1VulnerabilityProfileName",
		Method:             "GET",
		PathPattern:        "/v1/vulnerability/profile/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1VulnerabilityProfileNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1VulnerabilityProfileNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1VulnerabilityProfileName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1VulnerabilityProfileName configures vulnerability profile
*/
func (a *Client) PatchV1VulnerabilityProfileName(params *PatchV1VulnerabilityProfileNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1VulnerabilityProfileNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1VulnerabilityProfileNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1VulnerabilityProfileName",
		Method:             "PATCH",
		PathPattern:        "/v1/vulnerability/profile/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1VulnerabilityProfileNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1VulnerabilityProfileNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1VulnerabilityProfileName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1VulnerabilityProfileNameEntryID configures vulnerability profile entry
*/
func (a *Client) PatchV1VulnerabilityProfileNameEntryID(params *PatchV1VulnerabilityProfileNameEntryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1VulnerabilityProfileNameEntryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1VulnerabilityProfileNameEntryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1VulnerabilityProfileNameEntryID",
		Method:             "PATCH",
		PathPattern:        "/v1/vulnerability/profile/{name}/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1VulnerabilityProfileNameEntryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1VulnerabilityProfileNameEntryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1VulnerabilityProfileNameEntryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1VulnerabilityProfileNameEntry creates the vulnerability profile entry
*/
func (a *Client) PostV1VulnerabilityProfileNameEntry(params *PostV1VulnerabilityProfileNameEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1VulnerabilityProfileNameEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1VulnerabilityProfileNameEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1VulnerabilityProfileNameEntry",
		Method:             "POST",
		PathPattern:        "/v1/vulnerability/profile/{name}/entry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1VulnerabilityProfileNameEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1VulnerabilityProfileNameEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1VulnerabilityProfileNameEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
