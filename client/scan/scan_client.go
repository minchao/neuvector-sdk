// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ScanRegistryName(params *DeleteV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanRegistryNameOK, error)

	DeleteV1ScanRegistryNameScan(params *DeleteV1ScanRegistryNameScanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanRegistryNameScanOK, error)

	DeleteV1ScanSigstoreRootOfTrustRootName(params *DeleteV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanSigstoreRootOfTrustRootNameOK, error)

	DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error)

	GetV1ScanConfig(params *GetV1ScanConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanConfigOK, error)

	GetV1ScanHostID(params *GetV1ScanHostIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanHostIDOK, error)

	GetV1ScanImage(params *GetV1ScanImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanImageOK, error)

	GetV1ScanImageID(params *GetV1ScanImageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanImageIDOK, error)

	GetV1ScanPlatform(params *GetV1ScanPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanPlatformOK, error)

	GetV1ScanPlatformPlatform(params *GetV1ScanPlatformPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanPlatformPlatformOK, error)

	GetV1ScanRegistry(params *GetV1ScanRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryOK, error)

	GetV1ScanRegistryName(params *GetV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameOK, error)

	GetV1ScanRegistryNameImageID(params *GetV1ScanRegistryNameImageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameImageIDOK, error)

	GetV1ScanRegistryNameImages(params *GetV1ScanRegistryNameImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameImagesOK, error)

	GetV1ScanRegistryNameLayersID(params *GetV1ScanRegistryNameLayersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameLayersIDOK, error)

	GetV1ScanScanner(params *GetV1ScanScannerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanScannerOK, error)

	GetV1ScanSigstoreRootOfTrust(params *GetV1ScanSigstoreRootOfTrustParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustOK, error)

	GetV1ScanSigstoreRootOfTrustRootName(params *GetV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameOK, error)

	GetV1ScanSigstoreRootOfTrustRootNameVerifier(params *GetV1ScanSigstoreRootOfTrustRootNameVerifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameVerifierOK, error)

	GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error)

	GetV1ScanStatus(params *GetV1ScanStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanStatusOK, error)

	GetV1ScanWorkloadID(params *GetV1ScanWorkloadIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanWorkloadIDOK, error)

	PatchV1ScanConfig(params *PatchV1ScanConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanConfigOK, error)

	PatchV1ScanRegistryName(params *PatchV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanRegistryNameOK, error)

	PatchV1ScanSigstoreRootOfTrustRootName(params *PatchV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanSigstoreRootOfTrustRootNameOK, error)

	PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error)

	PostV1ScanHostID(params *PostV1ScanHostIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanHostIDOK, error)

	PostV1ScanPlatformPlatform(params *PostV1ScanPlatformPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanPlatformPlatformOK, error)

	PostV1ScanRegistry(params *PostV1ScanRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRegistryOK, error)

	PostV1ScanRegistryNameScan(params *PostV1ScanRegistryNameScanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRegistryNameScanOK, error)

	PostV1ScanRepository(params *PostV1ScanRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRepositoryOK, error)

	PostV1ScanSigstoreRootOfTrust(params *PostV1ScanSigstoreRootOfTrustParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanSigstoreRootOfTrustOK, error)

	PostV1ScanSigstoreRootOfTrustRootNameVerifier(params *PostV1ScanSigstoreRootOfTrustRootNameVerifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanSigstoreRootOfTrustRootNameVerifierOK, error)

	PostV1ScanWorkloadID(params *PostV1ScanWorkloadIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanWorkloadIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ScanRegistryName deletes registry
*/
func (a *Client) DeleteV1ScanRegistryName(params *DeleteV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ScanRegistryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ScanRegistryName",
		Method:             "DELETE",
		PathPattern:        "/v1/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ScanRegistryNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ScanRegistryNameScan stops registry scan
*/
func (a *Client) DeleteV1ScanRegistryNameScan(params *DeleteV1ScanRegistryNameScanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanRegistryNameScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ScanRegistryNameScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ScanRegistryNameScan",
		Method:             "DELETE",
		PathPattern:        "/v1/scan/registry/{name}/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ScanRegistryNameScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ScanRegistryNameScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ScanRegistryNameScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ScanSigstoreRootOfTrustRootName deletes single sigstore root of trust by name
*/
func (a *Client) DeleteV1ScanSigstoreRootOfTrustRootName(params *DeleteV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanSigstoreRootOfTrustRootNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ScanSigstoreRootOfTrustRootNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ScanSigstoreRootOfTrustRootName",
		Method:             "DELETE",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ScanSigstoreRootOfTrustRootNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ScanSigstoreRootOfTrustRootNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ScanSigstoreRootOfTrustRootName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName deletes sigstore verifier by name under given sigstore root of trust
*/
func (a *Client) DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName",
		Method:             "DELETE",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}/verifier/{verifier_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanConfig gets scan configure
*/
func (a *Client) GetV1ScanConfig(params *GetV1ScanConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanConfig",
		Method:             "GET",
		PathPattern:        "/v1/scan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanHostID gets host scan report
*/
func (a *Client) GetV1ScanHostID(params *GetV1ScanHostIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanHostIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanHostIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanHostID",
		Method:             "GET",
		PathPattern:        "/v1/scan/host/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanHostIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanHostIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanHostID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanImage gets scan image summary
*/
func (a *Client) GetV1ScanImage(params *GetV1ScanImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanImage",
		Method:             "GET",
		PathPattern:        "/v1/scan/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanImageID gets image scan report
*/
func (a *Client) GetV1ScanImageID(params *GetV1ScanImageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanImageIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanImageID",
		Method:             "GET",
		PathPattern:        "/v1/scan/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanImageIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanImageID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanPlatform shows scan platform summary
*/
func (a *Client) GetV1ScanPlatform(params *GetV1ScanPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanPlatform",
		Method:             "GET",
		PathPattern:        "/v1/scan/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanPlatformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanPlatformPlatform shows scan platform report
*/
func (a *Client) GetV1ScanPlatformPlatform(params *GetV1ScanPlatformPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanPlatformPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanPlatformPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanPlatformPlatform",
		Method:             "GET",
		PathPattern:        "/v1/scan/platform/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanPlatformPlatformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanPlatformPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanPlatformPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanRegistry gets a list of registries
*/
func (a *Client) GetV1ScanRegistry(params *GetV1ScanRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanRegistry",
		Method:             "GET",
		PathPattern:        "/v1/scan/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanRegistryName shows registry
*/
func (a *Client) GetV1ScanRegistryName(params *GetV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanRegistryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanRegistryName",
		Method:             "GET",
		PathPattern:        "/v1/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanRegistryNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanRegistryNameImageID gets registry image scan report
*/
func (a *Client) GetV1ScanRegistryNameImageID(params *GetV1ScanRegistryNameImageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanRegistryNameImageIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanRegistryNameImageID",
		Method:             "GET",
		PathPattern:        "/v1/scan/registry/{name}/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanRegistryNameImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanRegistryNameImageIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanRegistryNameImageID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanRegistryNameImages shows registry image summary
*/
func (a *Client) GetV1ScanRegistryNameImages(params *GetV1ScanRegistryNameImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanRegistryNameImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanRegistryNameImages",
		Method:             "GET",
		PathPattern:        "/v1/scan/registry/{name}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanRegistryNameImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanRegistryNameImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanRegistryNameImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanRegistryNameLayersID shows registry layers report
*/
func (a *Client) GetV1ScanRegistryNameLayersID(params *GetV1ScanRegistryNameLayersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanRegistryNameLayersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanRegistryNameLayersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanRegistryNameLayersID",
		Method:             "GET",
		PathPattern:        "/v1/scan/registry/{name}/layers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanRegistryNameLayersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanRegistryNameLayersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanRegistryNameLayersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanScanner gets scanner list
*/
func (a *Client) GetV1ScanScanner(params *GetV1ScanScannerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanScannerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanScannerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanScanner",
		Method:             "GET",
		PathPattern:        "/v1/scan/scanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanScannerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanScannerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanScanner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanSigstoreRootOfTrust gets all sigstore roots of trust
*/
func (a *Client) GetV1ScanSigstoreRootOfTrust(params *GetV1ScanSigstoreRootOfTrustParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanSigstoreRootOfTrustParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanSigstoreRootOfTrust",
		Method:             "GET",
		PathPattern:        "/v1/scan/sigstore/root_of_trust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanSigstoreRootOfTrustReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanSigstoreRootOfTrustOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanSigstoreRootOfTrust: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanSigstoreRootOfTrustRootName gets single sigstore root of trust by name
*/
func (a *Client) GetV1ScanSigstoreRootOfTrustRootName(params *GetV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanSigstoreRootOfTrustRootNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanSigstoreRootOfTrustRootName",
		Method:             "GET",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanSigstoreRootOfTrustRootNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanSigstoreRootOfTrustRootNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanSigstoreRootOfTrustRootName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanSigstoreRootOfTrustRootNameVerifier gets all sigstore verifiers for given sigstore root of trust
*/
func (a *Client) GetV1ScanSigstoreRootOfTrustRootNameVerifier(params *GetV1ScanSigstoreRootOfTrustRootNameVerifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameVerifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanSigstoreRootOfTrustRootNameVerifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanSigstoreRootOfTrustRootNameVerifier",
		Method:             "GET",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}/verifier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanSigstoreRootOfTrustRootNameVerifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanSigstoreRootOfTrustRootNameVerifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanSigstoreRootOfTrustRootNameVerifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName gets sigstore verifier by name under given sigstore root of trust
*/
func (a *Client) GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName",
		Method:             "GET",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}/verifier/{verifier_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanStatus scans status
*/
func (a *Client) GetV1ScanStatus(params *GetV1ScanStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanStatus",
		Method:             "GET",
		PathPattern:        "/v1/scan/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ScanWorkloadID gets container scan report
*/
func (a *Client) GetV1ScanWorkloadID(params *GetV1ScanWorkloadIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ScanWorkloadIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ScanWorkloadIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ScanWorkloadID",
		Method:             "GET",
		PathPattern:        "/v1/scan/workload/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ScanWorkloadIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ScanWorkloadIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ScanWorkloadID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ScanConfig updates scan configure
*/
func (a *Client) PatchV1ScanConfig(params *PatchV1ScanConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ScanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ScanConfig",
		Method:             "PATCH",
		PathPattern:        "/v1/scan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ScanConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ScanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ScanConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ScanRegistryName updates registry
*/
func (a *Client) PatchV1ScanRegistryName(params *PatchV1ScanRegistryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ScanRegistryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ScanRegistryName",
		Method:             "PATCH",
		PathPattern:        "/v1/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ScanRegistryNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ScanSigstoreRootOfTrustRootName updates single sigstore root of trust by name
*/
func (a *Client) PatchV1ScanSigstoreRootOfTrustRootName(params *PatchV1ScanSigstoreRootOfTrustRootNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanSigstoreRootOfTrustRootNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ScanSigstoreRootOfTrustRootNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ScanSigstoreRootOfTrustRootName",
		Method:             "PATCH",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ScanSigstoreRootOfTrustRootNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ScanSigstoreRootOfTrustRootNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ScanSigstoreRootOfTrustRootName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName updates sigstore verifier by name under given sigstore root of trust
*/
func (a *Client) PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName(params *PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName",
		Method:             "PATCH",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}/verifier/{verifier_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ScanSigstoreRootOfTrustRootNameVerifierVerifierName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanHostID starts host scan
*/
func (a *Client) PostV1ScanHostID(params *PostV1ScanHostIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanHostIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanHostIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanHostID",
		Method:             "POST",
		PathPattern:        "/v1/scan/host/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanHostIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanHostIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanHostID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanPlatformPlatform requests scan platform
*/
func (a *Client) PostV1ScanPlatformPlatform(params *PostV1ScanPlatformPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanPlatformPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanPlatformPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanPlatformPlatform",
		Method:             "POST",
		PathPattern:        "/v1/scan/platform/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanPlatformPlatformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanPlatformPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanPlatformPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanRegistry creates a registry
*/
func (a *Client) PostV1ScanRegistry(params *PostV1ScanRegistryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanRegistry",
		Method:             "POST",
		PathPattern:        "/v1/scan/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanRegistryNameScan starts a registry scan
*/
func (a *Client) PostV1ScanRegistryNameScan(params *PostV1ScanRegistryNameScanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRegistryNameScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanRegistryNameScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanRegistryNameScan",
		Method:             "POST",
		PathPattern:        "/v1/scan/registry/{name}/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanRegistryNameScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanRegistryNameScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanRegistryNameScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanRepository scans repository
*/
func (a *Client) PostV1ScanRepository(params *PostV1ScanRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanRepository",
		Method:             "POST",
		PathPattern:        "/v1/scan/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanSigstoreRootOfTrust creates new sigstore root of trust
*/
func (a *Client) PostV1ScanSigstoreRootOfTrust(params *PostV1ScanSigstoreRootOfTrustParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanSigstoreRootOfTrustOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanSigstoreRootOfTrustParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanSigstoreRootOfTrust",
		Method:             "POST",
		PathPattern:        "/v1/scan/sigstore/root_of_trust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanSigstoreRootOfTrustReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanSigstoreRootOfTrustOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanSigstoreRootOfTrust: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanSigstoreRootOfTrustRootNameVerifier creates new sigstore verifier for given sigstore root of trust
*/
func (a *Client) PostV1ScanSigstoreRootOfTrustRootNameVerifier(params *PostV1ScanSigstoreRootOfTrustRootNameVerifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanSigstoreRootOfTrustRootNameVerifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanSigstoreRootOfTrustRootNameVerifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanSigstoreRootOfTrustRootNameVerifier",
		Method:             "POST",
		PathPattern:        "/v1/scan/sigstore/root_of_trust/{root_name}/verifier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanSigstoreRootOfTrustRootNameVerifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanSigstoreRootOfTrustRootNameVerifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanSigstoreRootOfTrustRootNameVerifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ScanWorkloadID starts container scan
*/
func (a *Client) PostV1ScanWorkloadID(params *PostV1ScanWorkloadIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ScanWorkloadIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ScanWorkloadIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ScanWorkloadID",
		Method:             "POST",
		PathPattern:        "/v1/scan/workload/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ScanWorkloadIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ScanWorkloadIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ScanWorkloadID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
