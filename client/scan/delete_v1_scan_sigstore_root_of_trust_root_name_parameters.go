// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteV1ScanSigstoreRootOfTrustRootNameParams creates a new DeleteV1ScanSigstoreRootOfTrustRootNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteV1ScanSigstoreRootOfTrustRootNameParams() *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	return &DeleteV1ScanSigstoreRootOfTrustRootNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithTimeout creates a new DeleteV1ScanSigstoreRootOfTrustRootNameParams object
// with the ability to set a timeout on a request.
func NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithTimeout(timeout time.Duration) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	return &DeleteV1ScanSigstoreRootOfTrustRootNameParams{
		timeout: timeout,
	}
}

// NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithContext creates a new DeleteV1ScanSigstoreRootOfTrustRootNameParams object
// with the ability to set a context for a request.
func NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithContext(ctx context.Context) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	return &DeleteV1ScanSigstoreRootOfTrustRootNameParams{
		Context: ctx,
	}
}

// NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithHTTPClient creates a new DeleteV1ScanSigstoreRootOfTrustRootNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteV1ScanSigstoreRootOfTrustRootNameParamsWithHTTPClient(client *http.Client) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	return &DeleteV1ScanSigstoreRootOfTrustRootNameParams{
		HTTPClient: client,
	}
}

/*
DeleteV1ScanSigstoreRootOfTrustRootNameParams contains all the parameters to send to the API endpoint

	for the delete v1 scan sigstore root of trust root name operation.

	Typically these are written to a http.Request.
*/
type DeleteV1ScanSigstoreRootOfTrustRootNameParams struct {

	// XAuthToken.
	XAuthToken string

	/* RootName.

	   Root Of Trust Name
	*/
	RootName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete v1 scan sigstore root of trust root name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithDefaults() *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete v1 scan sigstore root of trust root name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithTimeout(timeout time.Duration) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithContext(ctx context.Context) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithHTTPClient(client *http.Client) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithXAuthToken(xAuthToken string) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithRootName adds the rootName to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WithRootName(rootName string) *DeleteV1ScanSigstoreRootOfTrustRootNameParams {
	o.SetRootName(rootName)
	return o
}

// SetRootName adds the rootName to the delete v1 scan sigstore root of trust root name params
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) SetRootName(rootName string) {
	o.RootName = rootName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteV1ScanSigstoreRootOfTrustRootNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}

	// path param root_name
	if err := r.SetPathParam("root_name", o.RootName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
